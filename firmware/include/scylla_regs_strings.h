//
// Copyright Â© 2017-2019 Arm Limited.
// SPDX-License-Identifier: Apache-2.0
//
// This header file reflects architecture version 1.4.13

// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT


#pragma once

#include <stdint.h>
#include <string>

static __attribute__((unused)) std::string to_string(bank_status_t v)
{
    switch (v)
    {
         case bank_status_t::IDLE:
            return std::string("IDLE");
         case bank_status_t::PENDING:
            return std::string("PENDING");
         case bank_status_t::ACTIVE:
            return std::string("ACTIVE");
         case bank_status_t::RESERVED0:
            return std::string("RESERVED0");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(batch_size_t v)
{
    switch (v)
    {
         case batch_size_t::BATCH_1:
            return std::string("BATCH_1");
         case batch_size_t::BATCH_2:
            return std::string("BATCH_2");
         case batch_size_t::BATCH_4:
            return std::string("BATCH_4");
         case batch_size_t::BATCH_8:
            return std::string("BATCH_8");
         case batch_size_t::BATCH_16:
            return std::string("BATCH_16");
         case batch_size_t::BATCH_32:
            return std::string("BATCH_32");
         case batch_size_t::BATCH_64:
            return std::string("BATCH_64");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(block_sequence_t v)
{
    switch (v)
    {
         case block_sequence_t::MIDDLE:
            return std::string("MIDDLE");
         case block_sequence_t::FIRST:
            return std::string("FIRST");
         case block_sequence_t::LAST:
            return std::string("LAST");
         case block_sequence_t::FIRST_AND_LAST:
            return std::string("FIRST_AND_LAST");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(delegation_t v)
{
    switch (v)
    {
         case delegation_t::BLOCKED:
            return std::string("BLOCKED");
         case delegation_t::DELEGATED:
            return std::string("DELEGATED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(dma_format_read_t v)
{
    switch (v)
    {
         case dma_format_read_t::NHWC:
            return std::string("NHWC");
         case dma_format_read_t::NCHW:
            return std::string("NCHW");
         case dma_format_read_t::NHWCB:
            return std::string("NHWCB");
         case dma_format_read_t::RESERVED0:
            return std::string("RESERVED0");
         case dma_format_read_t::WEIGHTS:
            return std::string("WEIGHTS");
         case dma_format_read_t::BROADCAST:
            return std::string("BROADCAST");
         case dma_format_read_t::FCAF_DEEP:
            return std::string("FCAF_DEEP");
         case dma_format_read_t::FCAF_WIDE:
            return std::string("FCAF_WIDE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(dma_format_write_t v)
{
    switch (v)
    {
         case dma_format_write_t::NHWC:
            return std::string("NHWC");
         case dma_format_write_t::NCHW:
            return std::string("NCHW");
         case dma_format_write_t::NHWCB:
            return std::string("NHWCB");
         case dma_format_write_t::NHWCB_WEIGHT_STREAMING:
            return std::string("NHWCB_WEIGHT_STREAMING");
         case dma_format_write_t::RESERVED0:
            return std::string("RESERVED0");
         case dma_format_write_t::RESERVED1:
            return std::string("RESERVED1");
         case dma_format_write_t::FCAF_DEEP:
            return std::string("FCAF_DEEP");
         case dma_format_write_t::FCAF_WIDE:
            return std::string("FCAF_WIDE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(dma_stream_type_t v)
{
    switch (v)
    {
         case dma_stream_type_t::STREAM_4:
            return std::string("STREAM_4");
         case dma_stream_type_t::STREAM_5:
            return std::string("STREAM_5");
         case dma_stream_type_t::STREAM_6:
            return std::string("STREAM_6");
         case dma_stream_type_t::STREAM_7:
            return std::string("STREAM_7");
         case dma_stream_type_t::STREAM_8:
            return std::string("STREAM_8");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(event_create_t v)
{
    switch (v)
    {
         case event_create_t::IGNORE:
            return std::string("IGNORE");
         case event_create_t::CREATE:
            return std::string("CREATE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(event_mask_t v)
{
    switch (v)
    {
         case event_mask_t::MASKED:
            return std::string("MASKED");
         case event_mask_t::ENABLED:
            return std::string("ENABLED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(event_t v)
{
    switch (v)
    {
         case event_t::UNTRIGGERED:
            return std::string("UNTRIGGERED");
         case event_t::TRIGGERED:
            return std::string("TRIGGERED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(filter_mode_t v)
{
    switch (v)
    {
         case filter_mode_t::DEPTHWISE_SEPARABLE:
            return std::string("DEPTHWISE_SEPARABLE");
         case filter_mode_t::RESERVED0:
            return std::string("RESERVED0");
         case filter_mode_t::RESERVED1:
            return std::string("RESERVED1");
         case filter_mode_t::FILTER_NXM:
            return std::string("FILTER_NXM");
         case filter_mode_t::VECTOR_PRODUCT:
            return std::string("VECTOR_PRODUCT");
         case filter_mode_t::RESERVED2:
            return std::string("RESERVED2");
         case filter_mode_t::RESERVED3:
            return std::string("RESERVED3");
         case filter_mode_t::RESERVED4:
            return std::string("RESERVED4");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(force_block_bank_t v)
{
    switch (v)
    {
         case force_block_bank_t::NONE:
            return std::string("NONE");
         case force_block_bank_t::FORCE_BANK0:
            return std::string("FORCE_BANK0");
         case force_block_bank_t::FORCE_BANK1:
            return std::string("FORCE_BANK1");
         case force_block_bank_t::FORCE_BANK2:
            return std::string("FORCE_BANK2");
         case force_block_bank_t::FORCE_BANK3:
            return std::string("FORCE_BANK3");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(force_stripe_bank_t v)
{
    switch (v)
    {
         case force_stripe_bank_t::NONE:
            return std::string("NONE");
         case force_stripe_bank_t::FORCE_BANK0:
            return std::string("FORCE_BANK0");
         case force_stripe_bank_t::FORCE_BANK1:
            return std::string("FORCE_BANK1");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(horiz_reinterleave_enable_t v)
{
    switch (v)
    {
         case horiz_reinterleave_enable_t::DISABLE:
            return std::string("DISABLE");
         case horiz_reinterleave_enable_t::ENABLE:
            return std::string("ENABLE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(mac_ramp_t v)
{
    switch (v)
    {
         case mac_ramp_t::NO_RAMP:
            return std::string("NO_RAMP");
         case mac_ramp_t::EIGHT_CYCLE_RAMP:
            return std::string("EIGHT_CYCLE_RAMP");
         case mac_ramp_t::SIXTEEN_CYCLE_RAMP:
            return std::string("SIXTEEN_CYCLE_RAMP");
         case mac_ramp_t::THIRTY_TWO_CYCLE_RAMP:
            return std::string("THIRTY_TWO_CYCLE_RAMP");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(mce_extend_mode_t v)
{
    switch (v)
    {
         case mce_extend_mode_t::ZERO_EXTEND:
            return std::string("ZERO_EXTEND");
         case mce_extend_mode_t::SIGN_EXTEND:
            return std::string("SIGN_EXTEND");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(mceif_shuffle_pattern_t v)
{
    switch (v)
    {
         case mceif_shuffle_pattern_t::FLIPPED_N:
            return std::string("FLIPPED_N");
         case mceif_shuffle_pattern_t::X_THEN_Y:
            return std::string("X_THEN_Y");
         case mceif_shuffle_pattern_t::Y_THEN_X:
            return std::string("Y_THEN_X");
         case mceif_shuffle_pattern_t::RESERVED0:
            return std::string("RESERVED0");
         case mceif_shuffle_pattern_t::RESERVED1:
            return std::string("RESERVED1");
         case mceif_shuffle_pattern_t::RESERVED2:
            return std::string("RESERVED2");
         case mceif_shuffle_pattern_t::RESERVED3:
            return std::string("RESERVED3");
         case mceif_shuffle_pattern_t::RESERVED4:
            return std::string("RESERVED4");
         case mceif_shuffle_pattern_t::RESERVED5:
            return std::string("RESERVED5");
         case mceif_shuffle_pattern_t::RESERVED6:
            return std::string("RESERVED6");
         case mceif_shuffle_pattern_t::RESERVED7:
            return std::string("RESERVED7");
         case mceif_shuffle_pattern_t::RESERVED8:
            return std::string("RESERVED8");
         case mceif_shuffle_pattern_t::RESERVED9:
            return std::string("RESERVED9");
         case mceif_shuffle_pattern_t::RESERVED10:
            return std::string("RESERVED10");
         case mceif_shuffle_pattern_t::RESERVED11:
            return std::string("RESERVED11");
         case mceif_shuffle_pattern_t::RESERVED12:
            return std::string("RESERVED12");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(memory_attributes_t v)
{
    switch (v)
    {
         case memory_attributes_t::NORMAL_OUTSHARE_NONCACHE_NONBUFF:
            return std::string("NORMAL_OUTSHARE_NONCACHE_NONBUFF");
         case memory_attributes_t::DEVICE_NONSHARE_NOALLOCATE:
            return std::string("DEVICE_NONSHARE_NOALLOCATE");
         case memory_attributes_t::WRBACK_OUTSHARE_NOALLOCATE:
            return std::string("WRBACK_OUTSHARE_NOALLOCATE");
         case memory_attributes_t::WRBACK_NONSHARE_NOALLOCATE:
            return std::string("WRBACK_NONSHARE_NOALLOCATE");
         case memory_attributes_t::WRBACK_OUTSHARE_RDALLOCATE:
            return std::string("WRBACK_OUTSHARE_RDALLOCATE");
         case memory_attributes_t::WRBACK_OUTSHARE_WRALLOCATE:
            return std::string("WRBACK_OUTSHARE_WRALLOCATE");
         case memory_attributes_t::WRBACK_OUTSHARE_RWALLOCATE:
            return std::string("WRBACK_OUTSHARE_RWALLOCATE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(npu_version_status_t v)
{
    switch (v)
    {
         case npu_version_status_t::BETA:
            return std::string("BETA");
         case npu_version_status_t::EAC:
            return std::string("EAC");
         case npu_version_status_t::REL:
            return std::string("REL");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(output_ofm_data_type_t v)
{
    switch (v)
    {
         case output_ofm_data_type_t::UINT8:
            return std::string("UINT8");
         case output_ofm_data_type_t::INT8:
            return std::string("INT8");
         case output_ofm_data_type_t::INT16:
            return std::string("INT16");
         case output_ofm_data_type_t::RESERVED0:
            return std::string("RESERVED0");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(ple_event_status_t v)
{
    switch (v)
    {
         case ple_event_status_t::UNTRIGGERED:
            return std::string("UNTRIGGERED");
         case ple_event_status_t::TRIGGERED:
            return std::string("TRIGGERED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(pm_engine_event_type_t v)
{
    switch (v)
    {
         case pm_engine_event_type_t::CYCLE:
            return std::string("CYCLE");
         case pm_engine_event_type_t::CHAIN:
            return std::string("CHAIN");
         case pm_engine_event_type_t::MCE_ACTIVE:
            return std::string("MCE_ACTIVE");
         case pm_engine_event_type_t::MCE_MAC0_ANY_MUL_ACTIVE_OG0:
            return std::string("MCE_MAC0_ANY_MUL_ACTIVE_OG0");
         case pm_engine_event_type_t::MCE_MAC0_ALL_MUL_ACTIVE_OG0:
            return std::string("MCE_MAC0_ALL_MUL_ACTIVE_OG0");
         case pm_engine_event_type_t::MCE_MAC0_ANY_MUL_ACTIVE_OG1:
            return std::string("MCE_MAC0_ANY_MUL_ACTIVE_OG1");
         case pm_engine_event_type_t::MCE_MAC0_ALL_MUL_ACTIVE_OG1:
            return std::string("MCE_MAC0_ALL_MUL_ACTIVE_OG1");
         case pm_engine_event_type_t::MCE_MAC0_ANY_MUL_ACTIVE_OG2:
            return std::string("MCE_MAC0_ANY_MUL_ACTIVE_OG2");
         case pm_engine_event_type_t::MCE_MAC0_ALL_MUL_ACTIVE_OG2:
            return std::string("MCE_MAC0_ALL_MUL_ACTIVE_OG2");
         case pm_engine_event_type_t::MCE_MAC0_ANY_MUL_ACTIVE_OG3:
            return std::string("MCE_MAC0_ANY_MUL_ACTIVE_OG3");
         case pm_engine_event_type_t::MCE_MAC0_ALL_MUL_ACTIVE_OG3:
            return std::string("MCE_MAC0_ALL_MUL_ACTIVE_OG3");
         case pm_engine_event_type_t::PLE_ACTIVE:
            return std::string("PLE_ACTIVE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(pm_top_event_type_t v)
{
    switch (v)
    {
         case pm_top_event_type_t::CYCLE:
            return std::string("CYCLE");
         case pm_top_event_type_t::CHAIN:
            return std::string("CHAIN");
         case pm_top_event_type_t::BUS_ACCESS_RD_TRANSFERS:
            return std::string("BUS_ACCESS_RD_TRANSFERS");
         case pm_top_event_type_t::BUS_RD_COMPLETE_TRANSFERS:
            return std::string("BUS_RD_COMPLETE_TRANSFERS");
         case pm_top_event_type_t::BUS_READ_BEATS:
            return std::string("BUS_READ_BEATS");
         case pm_top_event_type_t::BUS_READ_TXFR_STALL_CYCLES:
            return std::string("BUS_READ_TXFR_STALL_CYCLES");
         case pm_top_event_type_t::BUS_READ_REORDER_CYCLES:
            return std::string("BUS_READ_REORDER_CYCLES");
         case pm_top_event_type_t::BUS_ACCESS_WR_TRANSFERS:
            return std::string("BUS_ACCESS_WR_TRANSFERS");
         case pm_top_event_type_t::BUS_WR_COMPLETE_TRANSFERS:
            return std::string("BUS_WR_COMPLETE_TRANSFERS");
         case pm_top_event_type_t::BUS_WRITE_BEATS:
            return std::string("BUS_WRITE_BEATS");
         case pm_top_event_type_t::BUS_WRITE_TXFR_STALL_CYCLES:
            return std::string("BUS_WRITE_TXFR_STALL_CYCLES");
         case pm_top_event_type_t::BUS_WRITE_STALL_CYCLES:
            return std::string("BUS_WRITE_STALL_CYCLES");
         case pm_top_event_type_t::BUS_ERROR_COUNT:
            return std::string("BUS_ERROR_COUNT");
         case pm_top_event_type_t::NCU_MCU_ICACHE_MISS:
            return std::string("NCU_MCU_ICACHE_MISS");
         case pm_top_event_type_t::NCU_MCU_DCACHE_MISS:
            return std::string("NCU_MCU_DCACHE_MISS");
         case pm_top_event_type_t::NCU_MCU_BUS_READ_BEATS:
            return std::string("NCU_MCU_BUS_READ_BEATS");
         case pm_top_event_type_t::NCU_MCU_BUS_WRITE_BEATS:
            return std::string("NCU_MCU_BUS_WRITE_BEATS");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_ANY:
            return std::string("BUS_READ_STREAM_LATENCY_ANY");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_128:
            return std::string("BUS_READ_STREAM_LATENCY_128");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_256:
            return std::string("BUS_READ_STREAM_LATENCY_256");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_512:
            return std::string("BUS_READ_STREAM_LATENCY_512");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_1024:
            return std::string("BUS_READ_STREAM_LATENCY_1024");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_2048:
            return std::string("BUS_READ_STREAM_LATENCY_2048");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_4096:
            return std::string("BUS_READ_STREAM_LATENCY_4096");
         case pm_top_event_type_t::BUS_READ_STREAM_LATENCY_8192:
            return std::string("BUS_READ_STREAM_LATENCY_8192");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_ANY:
            return std::string("BUS_WRITE_STREAM_LATENCY_ANY");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_128:
            return std::string("BUS_WRITE_STREAM_LATENCY_128");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_256:
            return std::string("BUS_WRITE_STREAM_LATENCY_256");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_512:
            return std::string("BUS_WRITE_STREAM_LATENCY_512");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_1024:
            return std::string("BUS_WRITE_STREAM_LATENCY_1024");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_2048:
            return std::string("BUS_WRITE_STREAM_LATENCY_2048");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_4096:
            return std::string("BUS_WRITE_STREAM_LATENCY_4096");
         case pm_top_event_type_t::BUS_WRITE_STREAM_LATENCY_8192:
            return std::string("BUS_WRITE_STREAM_LATENCY_8192");
         case pm_top_event_type_t::RAMP_CYCLE_COUNT:
            return std::string("RAMP_CYCLE_COUNT");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(signed_ifm_mode_t v)
{
    switch (v)
    {
         case signed_ifm_mode_t::DISABLE:
            return std::string("DISABLE");
         case signed_ifm_mode_t::ENABLE:
            return std::string("ENABLE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(soft_reset_t v)
{
    switch (v)
    {
         case soft_reset_t::NO_RESET_REQUEST:
            return std::string("NO_RESET_REQUEST");
         case soft_reset_t::DRAIN_DFC_ALLOW_AXI:
            return std::string("DRAIN_DFC_ALLOW_AXI");
         case soft_reset_t::RESERVED:
            return std::string("RESERVED");
         case soft_reset_t::DRAIN_DFC_BLOCK_AXI:
            return std::string("DRAIN_DFC_BLOCK_AXI");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(stream_type_t v)
{
    switch (v)
    {
         case stream_type_t::STREAM_0:
            return std::string("STREAM_0");
         case stream_type_t::STREAM_1:
            return std::string("STREAM_1");
         case stream_type_t::STREAM_2:
            return std::string("STREAM_2");
         case stream_type_t::STREAM_3:
            return std::string("STREAM_3");
         case stream_type_t::STREAM_4:
            return std::string("STREAM_4");
         case stream_type_t::STREAM_5:
            return std::string("STREAM_5");
         case stream_type_t::STREAM_6:
            return std::string("STREAM_6");
         case stream_type_t::STREAM_7:
            return std::string("STREAM_7");
         case stream_type_t::STREAM_8:
            return std::string("STREAM_8");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(streamid_delegation_t v)
{
    switch (v)
    {
         case streamid_delegation_t::ID_NOT_DELEGATED:
            return std::string("ID_NOT_DELEGATED");
         case streamid_delegation_t::ID_BOTTOM_3BITS_DELEGATED:
            return std::string("ID_BOTTOM_3BITS_DELEGATED");
         case streamid_delegation_t::ID_BOTTOM_8BITS_DELEGATED:
            return std::string("ID_BOTTOM_8BITS_DELEGATED");
         case streamid_delegation_t::ID_FULLY_DELEGATED:
            return std::string("ID_FULLY_DELEGATED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(subkernel_filter_size_t v)
{
    switch (v)
    {
         case subkernel_filter_size_t::FILTER_3X3:
            return std::string("FILTER_3X3");
         case subkernel_filter_size_t::FILTER_1X3:
            return std::string("FILTER_1X3");
         case subkernel_filter_size_t::FILTER_3X1:
            return std::string("FILTER_3X1");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(substreamid_delegation_t v)
{
    switch (v)
    {
         case substreamid_delegation_t::ID_NOT_DELEGATED:
            return std::string("ID_NOT_DELEGATED");
         case substreamid_delegation_t::ID_BOTTOM_3BITS_DELEGATED:
            return std::string("ID_BOTTOM_3BITS_DELEGATED");
         case substreamid_delegation_t::ID_BOTTOM_8BITS_DELEGATED:
            return std::string("ID_BOTTOM_8BITS_DELEGATED");
         case substreamid_delegation_t::ID_FULLY_DELEGATED:
            return std::string("ID_FULLY_DELEGATED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(udma_emc_choice_t v)
{
    switch (v)
    {
         case udma_emc_choice_t::EMC_0:
            return std::string("EMC_0");
         case udma_emc_choice_t::EMC_1:
            return std::string("EMC_1");
         case udma_emc_choice_t::EMC_2:
            return std::string("EMC_2");
         case udma_emc_choice_t::EMC_3:
            return std::string("EMC_3");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(udma_ple_choice_t v)
{
    switch (v)
    {
         case udma_ple_choice_t::MCU_MEM:
            return std::string("MCU_MEM");
         case udma_ple_choice_t::INPUT_0:
            return std::string("INPUT_0");
         case udma_ple_choice_t::INPUT_1:
            return std::string("INPUT_1");
         case udma_ple_choice_t::INPUT_2:
            return std::string("INPUT_2");
         case udma_ple_choice_t::INPUT_3:
            return std::string("INPUT_3");
         case udma_ple_choice_t::OUTPUT:
            return std::string("OUTPUT");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(vert_reinterleave_enable_t v)
{
    switch (v)
    {
         case vert_reinterleave_enable_t::DISABLE:
            return std::string("DISABLE");
         case vert_reinterleave_enable_t::ENABLE:
            return std::string("ENABLE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wdiv_t v)
{
    switch (v)
    {
         case wdiv_t::WDIV0:
            return std::string("WDIV0");
         case wdiv_t::WDIV1:
            return std::string("WDIV1");
         case wdiv_t::WDIV2:
            return std::string("WDIV2");
         case wdiv_t::WDIV3:
            return std::string("WDIV3");
         case wdiv_t::WDIV4:
            return std::string("WDIV4");
         case wdiv_t::WDIV5:
            return std::string("WDIV5");
         case wdiv_t::RESERVED0:
            return std::string("RESERVED0");
         case wdiv_t::UNCOMPRESSED:
            return std::string("UNCOMPRESSED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wide_mul_mode_t v)
{
    switch (v)
    {
         case wide_mul_mode_t::WEIGHT_8_IFM_8:
            return std::string("WEIGHT_8_IFM_8");
         case wide_mul_mode_t::WEIGHT_8_IFM_16:
            return std::string("WEIGHT_8_IFM_16");
         case wide_mul_mode_t::WEIGHT_16_IFM_8:
            return std::string("WEIGHT_16_IFM_8");
         case wide_mul_mode_t::WEIGHT_16_IFM_16:
            return std::string("WEIGHT_16_IFM_16");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wide_mul_pass_t v)
{
    switch (v)
    {
         case wide_mul_pass_t::WEIGHT_LO_IFM_LO:
            return std::string("WEIGHT_LO_IFM_LO");
         case wide_mul_pass_t::WEIGHT_LO_IFM_HI:
            return std::string("WEIGHT_LO_IFM_HI");
         case wide_mul_pass_t::WEIGHT_HI_IFM_LO:
            return std::string("WEIGHT_HI_IFM_LO");
         case wide_mul_pass_t::WEIGHT_HI_IFM_HI:
            return std::string("WEIGHT_HI_IFM_HI");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wide_subkernel_status_t v)
{
    switch (v)
    {
         case wide_subkernel_status_t::FIRST:
            return std::string("FIRST");
         case wide_subkernel_status_t::MIDDLE:
            return std::string("MIDDLE");
         case wide_subkernel_status_t::LAST:
            return std::string("LAST");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wit_broadcast_mode_t v)
{
    switch (v)
    {
         case wit_broadcast_mode_t::ALL:
            return std::string("ALL");
         case wit_broadcast_mode_t::LOCAL:
            return std::string("LOCAL");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wit_resampling_mode_t v)
{
    switch (v)
    {
         case wit_resampling_mode_t::NONE:
            return std::string("NONE");
         case wit_resampling_mode_t::NEAREST_NEIGHBOR:
            return std::string("NEAREST_NEIGHBOR");
         case wit_resampling_mode_t::TRANSPOSE:
            return std::string("TRANSPOSE");
         case wit_resampling_mode_t::BILINEAR:
            return std::string("BILINEAR");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wit_upscale_odd_height_enable_t v)
{
    switch (v)
    {
         case wit_upscale_odd_height_enable_t::DISABLE:
            return std::string("DISABLE");
         case wit_upscale_odd_height_enable_t::ENABLE:
            return std::string("ENABLE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(wit_upscale_odd_width_enable_t v)
{
    switch (v)
    {
         case wit_upscale_odd_width_enable_t::DISABLE:
            return std::string("DISABLE");
         case wit_upscale_odd_width_enable_t::ENABLE:
            return std::string("ENABLE");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(zdiv_t v)
{
    switch (v)
    {
         case zdiv_t::ZDIV0:
            return std::string("ZDIV0");
         case zdiv_t::ZDIV1:
            return std::string("ZDIV1");
         case zdiv_t::ZDIV2:
            return std::string("ZDIV2");
         case zdiv_t::ZDIV3:
            return std::string("ZDIV3");
         case zdiv_t::RESERVED0:
            return std::string("RESERVED0");
         case zdiv_t::RESERVED1:
            return std::string("RESERVED1");
         case zdiv_t::RESERVED2:
            return std::string("RESERVED2");
         case zdiv_t::RLE_DISABLED:
            return std::string("RLE_DISABLED");
    }
    return std::string("(invalid)");
}

static __attribute__((unused)) std::string to_string(ce_enables_r reg)
{
    return "ce_enable=" + std::to_string(reg.get_ce_enable())
        + " " + "mce_enable=" + std::to_string(reg.get_mce_enable())
        + " " + "mac_enable=" + std::to_string(reg.get_mac_enable());
}

static __attribute__((unused)) std::string to_string(ce_status_r reg)
{
    return "buffer_freed=" + ::to_string(reg.get_buffer_freed()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_buffer_freed())) + ")"
        + " " + "block_done=" + ::to_string(reg.get_block_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_block_done())) + ")"
        + " " + "stripe_done=" + ::to_string(reg.get_stripe_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_stripe_done())) + ")"
        + " " + "layer_done=" + ::to_string(reg.get_layer_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_layer_done())) + ")"
        + " " + "mcu_txev=" + ::to_string(reg.get_mcu_txev()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mcu_txev())) + ")"
        + " " + "udma_done=" + ::to_string(reg.get_udma_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_udma_done())) + ")"
        + " " + "clear_done=" + ::to_string(reg.get_clear_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_clear_done())) + ")"
        + " " + "pmu_overflow=" + ::to_string(reg.get_pmu_overflow()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pmu_overflow())) + ")";
}

static __attribute__((unused)) std::string to_string(ce_setirq_r reg)
{
    return "buffer_freed=" + ::to_string(reg.get_buffer_freed()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_buffer_freed())) + ")"
        + " " + "block_done=" + ::to_string(reg.get_block_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_block_done())) + ")"
        + " " + "stripe_done=" + ::to_string(reg.get_stripe_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_stripe_done())) + ")"
        + " " + "layer_done=" + ::to_string(reg.get_layer_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_layer_done())) + ")";
}

static __attribute__((unused)) std::string to_string(ce_inst_r reg)
{
    return "sram_clear=" + std::to_string(reg.get_sram_clear());
}

static __attribute__((unused)) std::string to_string(ce_id_r reg)
{
    return "id=" + std::to_string(reg.get_id());
}

static __attribute__((unused)) std::string to_string(ce_err_cause_r reg)
{
    return "engine_ram_correctable_err=" + std::to_string(reg.get_engine_ram_correctable_err())
        + " " + "engine_ram_uncorrectable_err=" + std::to_string(reg.get_engine_ram_uncorrectable_err())
        + " " + "mcu_lockup_err=" + std::to_string(reg.get_mcu_lockup_err())
        + " " + "mcu_instr_err=" + std::to_string(reg.get_mcu_instr_err())
        + " " + "mcu_data_read_err=" + std::to_string(reg.get_mcu_data_read_err())
        + " " + "mcu_data_write_err=" + std::to_string(reg.get_mcu_data_write_err())
        + " " + "udma_load_err=" + std::to_string(reg.get_udma_load_err())
        + " " + "udma_store_err=" + std::to_string(reg.get_udma_store_err())
        + " " + "mcu_illegal_coproc_err=" + std::to_string(reg.get_mcu_illegal_coproc_err())
        + " " + "udma_collision_err=" + std::to_string(reg.get_udma_collision_err())
        + " " + "rf_rd_collision_err=" + std::to_string(reg.get_rf_rd_collision_err())
        + " " + "rf_wr_collision_err=" + std::to_string(reg.get_rf_wr_collision_err())
        + " " + "ve_div_0_err=" + std::to_string(reg.get_ve_div_0_err())
        + " " + "ple_lane_err=" + std::to_string(reg.get_ple_lane_err());
}

static __attribute__((unused)) std::string to_string(ce_err_address_r reg)
{
    return "address=" + std::to_string(reg.get_address())
        + " " + "bank=" + std::to_string(reg.get_bank())
        + " " + "dfc_emc0=" + std::to_string(reg.get_dfc_emc0())
        + " " + "dfc_emc1=" + std::to_string(reg.get_dfc_emc1())
        + " " + "dfc_emc2=" + std::to_string(reg.get_dfc_emc2())
        + " " + "dfc_emc3=" + std::to_string(reg.get_dfc_emc3())
        + " " + "mce_ofm0=" + std::to_string(reg.get_mce_ofm0())
        + " " + "mce_ofm1=" + std::to_string(reg.get_mce_ofm1())
        + " " + "mce_ofm2=" + std::to_string(reg.get_mce_ofm2())
        + " " + "mce_ofm3=" + std::to_string(reg.get_mce_ofm3())
        + " " + "ple_input0=" + std::to_string(reg.get_ple_input0())
        + " " + "ple_input1=" + std::to_string(reg.get_ple_input1())
        + " " + "ple_input2=" + std::to_string(reg.get_ple_input2())
        + " " + "ple_input3=" + std::to_string(reg.get_ple_input3())
        + " " + "ple_output=" + std::to_string(reg.get_ple_output())
        + " " + "ple_mcu=" + std::to_string(reg.get_ple_mcu())
        + " " + "err_multi=" + std::to_string(reg.get_err_multi())
        + " " + "err_uncorrected=" + std::to_string(reg.get_err_uncorrected());
}

static __attribute__((unused)) std::string to_string(ple_control_0_r reg)
{
    return "cpuwait=" + std::to_string(reg.get_cpuwait())
        + " " + "lockup=" + std::to_string(reg.get_lockup())
        + " " + "halted=" + std::to_string(reg.get_halted())
        + " " + "rstreq=" + std::to_string(reg.get_rstreq())
        + " " + "sleeping=" + std::to_string(reg.get_sleeping());
}

static __attribute__((unused)) std::string to_string(ple_control_1_r reg)
{
    return "mcu_setevent=" + std::to_string(reg.get_mcu_setevent())
        + " " + "mcu_setirq=" + std::to_string(reg.get_mcu_setirq())
        + " " + "mcu_gpevent=" + std::to_string(reg.get_mcu_gpevent())
        + " " + "mceif_event=" + std::to_string(reg.get_mceif_event())
        + " " + "mceif_irq=" + std::to_string(reg.get_mceif_irq())
        + " " + "txev_ncu=" + std::to_string(reg.get_txev_ncu())
        + " " + "rxev_event=" + std::to_string(reg.get_rxev_event())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "udma_event=" + std::to_string(reg.get_udma_event())
        + " " + "udma_irq=" + std::to_string(reg.get_udma_irq())
        + " " + "pmu_event=" + std::to_string(reg.get_pmu_event())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_ncu=" + std::to_string(reg.get_pmu_ncu());
}

static __attribute__((unused)) std::string to_string(ple_status_r reg)
{
    return "setirq_event=" + ::to_string(reg.get_setirq_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_setirq_event())) + ")"
        + " " + "setirq_interrupt=" + ::to_string(reg.get_setirq_interrupt()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_setirq_interrupt())) + ")"
        + " " + "gp_event=" + ::to_string(reg.get_gp_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp_event())) + ")"
        + " " + "mceif_block_done=" + ::to_string(reg.get_mceif_block_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mceif_block_done())) + ")"
        + " " + "rxev_event=" + ::to_string(reg.get_rxev_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_rxev_event())) + ")"
        + " " + "rxev_irq=" + ::to_string(reg.get_rxev_irq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_rxev_irq())) + ")"
        + " " + "udma_load_done=" + ::to_string(reg.get_udma_load_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_udma_load_done())) + ")"
        + " " + "udma_store_done=" + ::to_string(reg.get_udma_store_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_udma_store_done())) + ")"
        + " " + "pmu_event=" + ::to_string(reg.get_pmu_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pmu_event())) + ")"
        + " " + "pmu_overflow=" + ::to_string(reg.get_pmu_overflow()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pmu_overflow())) + ")";
}

static __attribute__((unused)) std::string to_string(ple_setirq_r reg)
{
    return "event=" + std::to_string(reg.get_event())
        + " " + "interrupt=" + std::to_string(reg.get_interrupt())
        + " " + "nmi=" + std::to_string(reg.get_nmi());
}

static __attribute__((unused)) std::string to_string(ple_udma_load_parameters_r reg)
{
    return "length=" + std::to_string(reg.get_length())
        + " " + "emc=" + ::to_string(reg.get_emc()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_emc())) + ")"
        + " " + "ple=" + ::to_string(reg.get_ple()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple())) + ")";
}

static __attribute__((unused)) std::string to_string(ple_udma_load_command_r reg)
{
    return "emc_addr=" + std::to_string(reg.get_emc_addr())
        + " " + "ple_addr=" + std::to_string(reg.get_ple_addr());
}

static __attribute__((unused)) std::string to_string(ple_udma_store_parameters_r reg)
{
    return "length=" + std::to_string(reg.get_length())
        + " " + "emc=" + ::to_string(reg.get_emc()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_emc())) + ")"
        + " " + "ple=" + ::to_string(reg.get_ple()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple())) + ")";
}

static __attribute__((unused)) std::string to_string(ple_udma_store_command_r reg)
{
    return "emc_addr=" + std::to_string(reg.get_emc_addr())
        + " " + "ple_addr=" + std::to_string(reg.get_ple_addr());
}

static __attribute__((unused)) std::string to_string(ple_counters_r reg)
{
    return "ple_block_done_count=" + std::to_string(reg.get_ple_block_done_count());
}

static __attribute__((unused)) std::string to_string(ple_scratch0_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch1_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch2_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch3_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch4_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch5_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch6_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_scratch7_r reg)
{
    return "ple_scratch=" + std::to_string(reg.get_ple_scratch());
}

static __attribute__((unused)) std::string to_string(ple_debug_control_r reg)
{
    return "event_suppress=" + std::to_string(reg.get_event_suppress());
}

static __attribute__((unused)) std::string to_string(ofm_block_config_r reg)
{
    return "num_active_ofms=" + std::to_string(reg.get_num_active_ofms())
        + " " + "mac_acc_out_dis=" + std::to_string(reg.get_mac_acc_out_dis())
        + " " + "wide_mul_pass=" + ::to_string(reg.get_wide_mul_pass()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_wide_mul_pass())) + ")"
        + " " + "subkernel_size=" + ::to_string(reg.get_subkernel_size()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_subkernel_size())) + ")"
        + " " + "ifm_extend_mode=" + ::to_string(reg.get_ifm_extend_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ifm_extend_mode())) + ")"
        + " " + "ofm_block_width=" + std::to_string(reg.get_ofm_block_width())
        + " " + "ofm_block_height=" + std::to_string(reg.get_ofm_block_height())
        + " " + "block_sequence=" + ::to_string(reg.get_block_sequence()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_block_sequence())) + ")"
        + " " + "end_of_ofm=" + std::to_string(reg.get_end_of_ofm())
        + " " + "mac_acc_clr_disable=" + std::to_string(reg.get_mac_acc_clr_disable());
}

static __attribute__((unused)) std::string to_string(ofm_block_xy_r reg)
{
    return "ofm_block_x=" + std::to_string(reg.get_ofm_block_x())
        + " " + "ofm_block_y=" + std::to_string(reg.get_ofm_block_y());
}

static __attribute__((unused)) std::string to_string(subkernel_offset_r reg)
{
    return "subkernel_offset_w=" + std::to_string(reg.get_subkernel_offset_w())
        + " " + "subkernel_offset_w_sign=" + std::to_string(reg.get_subkernel_offset_w_sign())
        + " " + "subkernel_offset_h=" + std::to_string(reg.get_subkernel_offset_h())
        + " " + "subkernel_offset_h_sign=" + std::to_string(reg.get_subkernel_offset_h_sign())
        + " " + "subkernel_status=" + ::to_string(reg.get_subkernel_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_subkernel_status())) + ")";
}

static __attribute__((unused)) std::string to_string(ce_control_r reg)
{
    return "ifm_pad_n_active=" + std::to_string(reg.get_ifm_pad_n_active())
        + " " + "wide_mul_mode=" + ::to_string(reg.get_wide_mul_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_wide_mul_mode())) + ")"
        + " " + "resampling_mode=" + ::to_string(reg.get_resampling_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_resampling_mode())) + ")"
        + " " + "horiz_reinterleave_enable=" + ::to_string(reg.get_horiz_reinterleave_enable()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_horiz_reinterleave_enable())) + ")"
        + " " + "vert_reinterleave_enable=" + ::to_string(reg.get_vert_reinterleave_enable()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_vert_reinterleave_enable())) + ")"
        + " " + "upsample_2x_odd_width_enable=" + ::to_string(reg.get_upsample_2x_odd_width_enable()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_upsample_2x_odd_width_enable())) + ")"
        + " " + "upsample_2x_odd_height_enable=" + ::to_string(reg.get_upsample_2x_odd_height_enable()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_upsample_2x_odd_height_enable())) + ")"
        + " " + "wit_broadcast_mode=" + ::to_string(reg.get_wit_broadcast_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_wit_broadcast_mode())) + ")"
        + " " + "signed_ifm_mode=" + ::to_string(reg.get_signed_ifm_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_signed_ifm_mode())) + ")"
        + " " + "winograd_enable=" + std::to_string(reg.get_winograd_enable())
        + " " + "relu_enable=" + std::to_string(reg.get_relu_enable())
        + " " + "ofm_bypass_enable=" + std::to_string(reg.get_ofm_bypass_enable())
        + " " + "mac_acc_clr_disable=" + std::to_string(reg.get_mac_acc_clr_disable())
        + " " + "mac_acc_out_dis=" + std::to_string(reg.get_mac_acc_out_dis())
        + " " + "output_ofm_data_type=" + ::to_string(reg.get_output_ofm_data_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_output_ofm_data_type())) + ")";
}

static __attribute__((unused)) std::string to_string(wide_kernel_control_r reg)
{
    return "wide_kernel_enable=" + std::to_string(reg.get_wide_kernel_enable())
        + " " + "wide_filter_width=" + std::to_string(reg.get_wide_filter_width())
        + " " + "wide_filter_height=" + std::to_string(reg.get_wide_filter_height());
}

static __attribute__((unused)) std::string to_string(wide_kernel_offset_r reg)
{
    return "wide_filter_offset_w=" + std::to_string(reg.get_wide_filter_offset_w())
        + " " + "wide_filter_offset_h=" + std::to_string(reg.get_wide_filter_offset_h())
        + " " + "wide_delta_width=" + std::to_string(reg.get_wide_delta_width())
        + " " + "wide_delta_height=" + std::to_string(reg.get_wide_delta_height());
}

static __attribute__((unused)) std::string to_string(ifm_zero_point_r reg)
{
    return "zero_point=" + std::to_string(reg.get_zero_point());
}

static __attribute__((unused)) std::string to_string(ifm_default_slot_size_r reg)
{
    return "ifm_default_slot_width=" + std::to_string(reg.get_ifm_default_slot_width())
        + " " + "ifm_default_slot_height=" + std::to_string(reg.get_ifm_default_slot_height());
}

static __attribute__((unused)) std::string to_string(ifm_slot_stride_r reg)
{
    return "ifm_default_slot_stride=" + std::to_string(reg.get_ifm_default_slot_stride())
        + " " + "ifm_boundary_slot_stride=" + std::to_string(reg.get_ifm_boundary_slot_stride());
}

static __attribute__((unused)) std::string to_string(ifm_row_stride_r reg)
{
    return "ifm_default_row_stride=" + std::to_string(reg.get_ifm_default_row_stride())
        + " " + "ifm_residual_row_stride=" + std::to_string(reg.get_ifm_residual_row_stride());
}

static __attribute__((unused)) std::string to_string(ifm_config1_r reg)
{
    return "ifm_group_stride=" + std::to_string(reg.get_ifm_group_stride())
        + " " + "num_ifm_global=" + std::to_string(reg.get_num_ifm_global());
}

static __attribute__((unused)) std::string to_string(ifm_top_slots_r reg)
{
    return "top_left_slot=" + std::to_string(reg.get_top_left_slot())
        + " " + "top_left_residual=" + std::to_string(reg.get_top_left_residual())
        + " " + "top_center_slot=" + std::to_string(reg.get_top_center_slot())
        + " " + "top_center_residual=" + std::to_string(reg.get_top_center_residual())
        + " " + "top_right_slot=" + std::to_string(reg.get_top_right_slot())
        + " " + "top_right_residual=" + std::to_string(reg.get_top_right_residual());
}

static __attribute__((unused)) std::string to_string(ifm_mid_slots_r reg)
{
    return "mid_left_slot=" + std::to_string(reg.get_mid_left_slot())
        + " " + "mid_left_residual=" + std::to_string(reg.get_mid_left_residual())
        + " " + "mid_center_slot=" + std::to_string(reg.get_mid_center_slot())
        + " " + "mid_center_residual=" + std::to_string(reg.get_mid_center_residual())
        + " " + "mid_right_slot=" + std::to_string(reg.get_mid_right_slot())
        + " " + "mid_right_residual=" + std::to_string(reg.get_mid_right_residual());
}

static __attribute__((unused)) std::string to_string(ifm_bottom_slots_r reg)
{
    return "bottom_left_slot=" + std::to_string(reg.get_bottom_left_slot())
        + " " + "bottom_left_residual=" + std::to_string(reg.get_bottom_left_residual())
        + " " + "bottom_center_slot=" + std::to_string(reg.get_bottom_center_slot())
        + " " + "bottom_center_residual=" + std::to_string(reg.get_bottom_center_residual())
        + " " + "bottom_right_slot=" + std::to_string(reg.get_bottom_right_slot())
        + " " + "bottom_right_residual=" + std::to_string(reg.get_bottom_right_residual());
}

static __attribute__((unused)) std::string to_string(ifm_slot_pad_config_r reg)
{
    return "left_data=" + std::to_string(reg.get_left_data())
        + " " + "right_data=" + std::to_string(reg.get_right_data())
        + " " + "top_data=" + std::to_string(reg.get_top_data())
        + " " + "bottom_data=" + std::to_string(reg.get_bottom_data());
}

static __attribute__((unused)) std::string to_string(depthwise_control_r reg)
{
    return "num_ifms_per_ofm=" + std::to_string(reg.get_num_ifms_per_ofm());
}

static __attribute__((unused)) std::string to_string(ifm_config2_ig0_r reg)
{
    return "num_ifm_local=" + std::to_string(reg.get_num_ifm_local());
}

static __attribute__((unused)) std::string to_string(ifm_slot_base_address_ig0_r reg)
{
    return "ifm_slot_base_addr=" + std::to_string(reg.get_ifm_slot_base_addr())
        + " " + "ifm_slot_base_addr_hi=" + std::to_string(reg.get_ifm_slot_base_addr_hi());
}

static __attribute__((unused)) std::string to_string(ifm_pad0_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad1_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad2_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad3_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad4_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad5_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad6_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad7_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad8_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad9_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad10_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad11_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad12_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad13_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad14_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad15_ig0_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(activation_config_r reg)
{
    return "relu_min=" + std::to_string(reg.get_relu_min())
        + " " + "relu_max=" + std::to_string(reg.get_relu_max());
}

static __attribute__((unused)) std::string to_string(stripe_block_config_r reg)
{
    return "ofm_default_block_width=" + std::to_string(reg.get_ofm_default_block_width())
        + " " + "ofm_default_block_height=" + std::to_string(reg.get_ofm_default_block_height())
        + " " + "ofm_bypass_half_patch_output_type=" + std::to_string(reg.get_ofm_bypass_half_patch_output_type())
        + " " + "mceif_shuffle_pattern=" + ::to_string(reg.get_mceif_shuffle_pattern()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mceif_shuffle_pattern())) + ")";
}

static __attribute__((unused)) std::string to_string(ofm_stripe_size_r reg)
{
    return "ofm_stripe_width=" + std::to_string(reg.get_ofm_stripe_width())
        + " " + "ofm_stripe_height=" + std::to_string(reg.get_ofm_stripe_height());
}

static __attribute__((unused)) std::string to_string(ofm_config_r reg)
{
    return "num_ofm=" + std::to_string(reg.get_num_ofm());
}

static __attribute__((unused)) std::string to_string(vp_control_r reg)
{
    return "batch_size=" + ::to_string(reg.get_batch_size()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_batch_size())) + ")";
}

static __attribute__((unused)) std::string to_string(filter_r reg)
{
    return "filter_mode=" + ::to_string(reg.get_filter_mode()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_filter_mode())) + ")"
        + " " + "filter0_width=" + std::to_string(reg.get_filter0_width())
        + " " + "filter0_height=" + std::to_string(reg.get_filter0_height())
        + " " + "filter1_width=" + std::to_string(reg.get_filter1_width())
        + " " + "filter1_height=" + std::to_string(reg.get_filter1_height())
        + " " + "filter2_width=" + std::to_string(reg.get_filter2_width())
        + " " + "filter2_height=" + std::to_string(reg.get_filter2_height())
        + " " + "filter3_width=" + std::to_string(reg.get_filter3_width())
        + " " + "filter3_height=" + std::to_string(reg.get_filter3_height());
}

static __attribute__((unused)) std::string to_string(mul_enable_og0_r reg)
{
    return "mul_enable=" + std::to_string(reg.get_mul_enable());
}

static __attribute__((unused)) std::string to_string(weight_base_addr_og0_r reg)
{
    return "address=" + std::to_string(reg.get_address());
}

static __attribute__((unused)) std::string to_string(ifm_config2_ig1_r reg)
{
    return "num_ifm_local=" + std::to_string(reg.get_num_ifm_local());
}

static __attribute__((unused)) std::string to_string(ifm_slot_base_address_ig1_r reg)
{
    return "ifm_slot_base_addr=" + std::to_string(reg.get_ifm_slot_base_addr())
        + " " + "ifm_slot_base_addr_hi=" + std::to_string(reg.get_ifm_slot_base_addr_hi());
}

static __attribute__((unused)) std::string to_string(ifm_pad0_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad1_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad2_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad3_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad4_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad5_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad6_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad7_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad8_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad9_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad10_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad11_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad12_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad13_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad14_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad15_ig1_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(mul_enable_og1_r reg)
{
    return "mul_enable=" + std::to_string(reg.get_mul_enable());
}

static __attribute__((unused)) std::string to_string(weight_base_addr_og1_r reg)
{
    return "address=" + std::to_string(reg.get_address());
}

static __attribute__((unused)) std::string to_string(ifm_config2_ig2_r reg)
{
    return "num_ifm_local=" + std::to_string(reg.get_num_ifm_local());
}

static __attribute__((unused)) std::string to_string(ifm_slot_base_address_ig2_r reg)
{
    return "ifm_slot_base_addr=" + std::to_string(reg.get_ifm_slot_base_addr())
        + " " + "ifm_slot_base_addr_hi=" + std::to_string(reg.get_ifm_slot_base_addr_hi());
}

static __attribute__((unused)) std::string to_string(ifm_pad0_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad1_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad2_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad3_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad4_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad5_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad6_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad7_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad8_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad9_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad10_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad11_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad12_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad13_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad14_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad15_ig2_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(mul_enable_og2_r reg)
{
    return "mul_enable=" + std::to_string(reg.get_mul_enable());
}

static __attribute__((unused)) std::string to_string(weight_base_addr_og2_r reg)
{
    return "address=" + std::to_string(reg.get_address());
}

static __attribute__((unused)) std::string to_string(ifm_config2_ig3_r reg)
{
    return "num_ifm_local=" + std::to_string(reg.get_num_ifm_local());
}

static __attribute__((unused)) std::string to_string(ifm_slot_base_address_ig3_r reg)
{
    return "ifm_slot_base_addr=" + std::to_string(reg.get_ifm_slot_base_addr())
        + " " + "ifm_slot_base_addr_hi=" + std::to_string(reg.get_ifm_slot_base_addr_hi());
}

static __attribute__((unused)) std::string to_string(ifm_pad0_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad1_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad2_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad3_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad4_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad5_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad6_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad7_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad8_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad9_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad10_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad11_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad12_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad13_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad14_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(ifm_pad15_ig3_r reg)
{
    return "left_pad=" + std::to_string(reg.get_left_pad())
        + " " + "top_pad=" + std::to_string(reg.get_top_pad())
        + " " + "ifm_stripe_width_delta=" + std::to_string(reg.get_ifm_stripe_width_delta())
        + " " + "ifm_stripe_height_delta=" + std::to_string(reg.get_ifm_stripe_height_delta());
}

static __attribute__((unused)) std::string to_string(mul_enable_og3_r reg)
{
    return "mul_enable=" + std::to_string(reg.get_mul_enable());
}

static __attribute__((unused)) std::string to_string(weight_base_addr_og3_r reg)
{
    return "address=" + std::to_string(reg.get_address());
}

static __attribute__((unused)) std::string to_string(mce_debug_control_r reg)
{
    return "event_suppress=" + std::to_string(reg.get_event_suppress());
}

static __attribute__((unused)) std::string to_string(dl1_ext_access_control_r reg)
{
    return "excctlr=" + std::to_string(reg.get_excctlr())
        + " " + "ramctlr=" + std::to_string(reg.get_ramctlr())
        + " " + "dbgctlr=" + std::to_string(reg.get_dbgctlr());
}

static __attribute__((unused)) std::string to_string(dl1_delegation_r reg)
{
    return "secctlr=" + ::to_string(reg.get_secctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secctlr())) + ")"
        + " " + "secmcuctlr=" + ::to_string(reg.get_secmcuctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secmcuctlr())) + ")"
        + " " + "sysctlr=" + ::to_string(reg.get_sysctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sysctlr())) + ")"
        + " " + "pwrctlr=" + ::to_string(reg.get_pwrctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pwrctlr())) + ")"
        + " " + "auxctlr=" + ::to_string(reg.get_auxctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_auxctlr())) + ")"
        + " " + "excctlr=" + ::to_string(reg.get_excctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_excctlr())) + ")"
        + " " + "ramctlr=" + ::to_string(reg.get_ramctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ramctlr())) + ")"
        + " " + "dbgctlr=" + ::to_string(reg.get_dbgctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dbgctlr())) + ")"
        + " " + "err=" + ::to_string(reg.get_err()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_err())) + ")"
        + " " + "debug=" + ::to_string(reg.get_debug()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_debug())) + ")"
        + " " + "job=" + ::to_string(reg.get_job()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_job())) + ")"
        + " " + "event=" + ::to_string(reg.get_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_event())) + ")"
        + " " + "interrupt=" + ::to_string(reg.get_interrupt()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_interrupt())) + ")"
        + " " + "nmi=" + ::to_string(reg.get_nmi()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nmi())) + ")"
        + " " + "irq=" + ::to_string(reg.get_irq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_irq())) + ")"
        + " " + "intext=" + ::to_string(reg.get_intext()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_intext())) + ")"
        + " " + "gp0=" + ::to_string(reg.get_gp0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp0())) + ")"
        + " " + "gp1=" + ::to_string(reg.get_gp1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp1())) + ")"
        + " " + "gp2=" + ::to_string(reg.get_gp2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp2())) + ")"
        + " " + "gp3=" + ::to_string(reg.get_gp3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp3())) + ")"
        + " " + "gp4=" + ::to_string(reg.get_gp4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp4())) + ")"
        + " " + "gp5=" + ::to_string(reg.get_gp5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp5())) + ")"
        + " " + "gp6=" + ::to_string(reg.get_gp6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp6())) + ")"
        + " " + "gp7=" + ::to_string(reg.get_gp7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp7())) + ")"
        + " " + "dfcot=" + ::to_string(reg.get_dfcot()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dfcot())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_secctlr_r reg)
{
    return "ns_allowed=" + std::to_string(reg.get_ns_allowed())
        + " " + "npu_ns_mode=" + std::to_string(reg.get_npu_ns_mode())
        + " " + "ext_ns_evnt_to_s_evnt=" + std::to_string(reg.get_ext_ns_evnt_to_s_evnt())
        + " " + "ext_ns_irq_to_s_irq=" + std::to_string(reg.get_ext_ns_irq_to_s_irq())
        + " " + "ext_s_evnt_to_ns_evnt=" + std::to_string(reg.get_ext_s_evnt_to_ns_evnt())
        + " " + "ext_s_evnt_to_ns_irq=" + std::to_string(reg.get_ext_s_evnt_to_ns_irq());
}

static __attribute__((unused)) std::string to_string(dl1_secmcuctlr_r reg)
{
    return "mcu_state=" + std::to_string(reg.get_mcu_state());
}

static __attribute__((unused)) std::string to_string(dl1_sysctlr0_r reg)
{
    return "cpuwait=" + std::to_string(reg.get_cpuwait())
        + " " + "lockup=" + std::to_string(reg.get_lockup())
        + " " + "halted=" + std::to_string(reg.get_halted())
        + " " + "rstreq=" + std::to_string(reg.get_rstreq())
        + " " + "sleeping=" + std::to_string(reg.get_sleeping())
        + " " + "initvtor=" + std::to_string(reg.get_initvtor())
        + " " + "soft_rstreq=" + ::to_string(reg.get_soft_rstreq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_soft_rstreq())) + ")"
        + " " + "hard_rstreq=" + std::to_string(reg.get_hard_rstreq());
}

static __attribute__((unused)) std::string to_string(dl1_sysctlr1_r reg)
{
    return "mcu_setevnt=" + std::to_string(reg.get_mcu_setevnt())
        + " " + "mcu_setirq=" + std::to_string(reg.get_mcu_setirq())
        + " " + "mcu_gpevnt=" + std::to_string(reg.get_mcu_gpevnt())
        + " " + "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "txev_ple=" + std::to_string(reg.get_txev_ple())
        + " " + "txev_dbg=" + std::to_string(reg.get_txev_dbg())
        + " " + "rxev_degroup=" + std::to_string(reg.get_rxev_degroup())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "err_tolr_evnt=" + std::to_string(reg.get_err_tolr_evnt())
        + " " + "err_tolr_irq=" + std::to_string(reg.get_err_tolr_irq())
        + " " + "err_func_irq=" + std::to_string(reg.get_err_func_irq())
        + " " + "err_recv_irq=" + std::to_string(reg.get_err_recv_irq());
}

static __attribute__((unused)) std::string to_string(dl1_pwrctlr_r reg)
{
    return "active=" + std::to_string(reg.get_active())
        + " " + "qreqn=" + std::to_string(reg.get_qreqn());
}

static __attribute__((unused)) std::string to_string(dl1_auxctlr_r reg)
{
    return "dis_clkgate=" + std::to_string(reg.get_dis_clkgate())
        + " " + "dis_qdeny=" + std::to_string(reg.get_dis_qdeny())
        + " " + "dis_edgeirq=" + std::to_string(reg.get_dis_edgeirq())
        + " " + "dis_mcu_unique_rid=" + std::to_string(reg.get_dis_mcu_unique_rid())
        + " " + "dis_stshtrnsltn=" + std::to_string(reg.get_dis_stshtrnsltn())
        + " " + "increase_outstanding_writes=" + std::to_string(reg.get_increase_outstanding_writes())
        + " " + "dbgen=" + std::to_string(reg.get_dbgen())
        + " " + "niden=" + std::to_string(reg.get_niden())
        + " " + "dis_ext_err_unrecoverable=" + std::to_string(reg.get_dis_ext_err_unrecoverable())
        + " " + "dis_ext_err_recoverable=" + std::to_string(reg.get_dis_ext_err_recoverable())
        + " " + "dis_ext_err_functional=" + std::to_string(reg.get_dis_ext_err_functional())
        + " " + "dis_ext_err_tolerable=" + std::to_string(reg.get_dis_ext_err_tolerable())
        + " " + "dis_non_broadcast_global_err=" + std::to_string(reg.get_dis_non_broadcast_global_err())
        + " " + "en_ple_block_done=" + std::to_string(reg.get_en_ple_block_done())
        + " " + "mac_ramp_cycles=" + ::to_string(reg.get_mac_ramp_cycles()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mac_ramp_cycles())) + ")"
        + " " + "snoop_dis=" + std::to_string(reg.get_snoop_dis())
        + " " + "wd_ramp_dis=" + std::to_string(reg.get_wd_ramp_dis())
        + " " + "stash_ahead=" + std::to_string(reg.get_stash_ahead())
        + " " + "stash_issue=" + std::to_string(reg.get_stash_issue());
}

static __attribute__((unused)) std::string to_string(dl1_setirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl1_clrirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl1_setirq_int_r reg)
{
    return "event=" + std::to_string(reg.get_event())
        + " " + "interrupt=" + std::to_string(reg.get_interrupt())
        + " " + "nmi=" + std::to_string(reg.get_nmi());
}

static __attribute__((unused)) std::string to_string(dl1_dfc_slv_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl1_dfc_slv_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl1_dfc_mst_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl1_dfc_mst_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl1_irq_status_r reg)
{
    return "setirq_err=" + std::to_string(reg.get_setirq_err())
        + " " + "setirq_dbg=" + std::to_string(reg.get_setirq_dbg())
        + " " + "setirq_job=" + std::to_string(reg.get_setirq_job())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl1_int_status_r reg)
{
    return "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl1_ext_status_r reg)
{
    return "setirq_evnt=" + std::to_string(reg.get_setirq_evnt())
        + " " + "setirq_irq=" + std::to_string(reg.get_setirq_irq())
        + " " + "gp_evnt=" + std::to_string(reg.get_gp_evnt());
}

static __attribute__((unused)) std::string to_string(dl1_gp0_r reg)
{
    return "gp0=" + std::to_string(reg.get_gp0());
}

static __attribute__((unused)) std::string to_string(dl1_gp1_r reg)
{
    return "gp1=" + std::to_string(reg.get_gp1());
}

static __attribute__((unused)) std::string to_string(dl1_gp2_r reg)
{
    return "gp2=" + std::to_string(reg.get_gp2());
}

static __attribute__((unused)) std::string to_string(dl1_gp3_r reg)
{
    return "gp3=" + std::to_string(reg.get_gp3());
}

static __attribute__((unused)) std::string to_string(dl1_gp4_r reg)
{
    return "gp4=" + std::to_string(reg.get_gp4());
}

static __attribute__((unused)) std::string to_string(dl1_gp5_r reg)
{
    return "gp5=" + std::to_string(reg.get_gp5());
}

static __attribute__((unused)) std::string to_string(dl1_gp6_r reg)
{
    return "gp6=" + std::to_string(reg.get_gp6());
}

static __attribute__((unused)) std::string to_string(dl1_gp7_r reg)
{
    return "gp7=" + std::to_string(reg.get_gp7());
}

static __attribute__((unused)) std::string to_string(dl1_delegation_stream_security_r reg)
{
    return "mmusecsid0=" + ::to_string(reg.get_mmusecsid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid0())) + ")"
        + " " + "protns0=" + ::to_string(reg.get_protns0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns0())) + ")"
        + " " + "mmusecsid1=" + ::to_string(reg.get_mmusecsid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid1())) + ")"
        + " " + "protns1=" + ::to_string(reg.get_protns1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns1())) + ")"
        + " " + "mmusecsid2=" + ::to_string(reg.get_mmusecsid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid2())) + ")"
        + " " + "protns2=" + ::to_string(reg.get_protns2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns2())) + ")"
        + " " + "mmusecsid3=" + ::to_string(reg.get_mmusecsid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid3())) + ")"
        + " " + "protns3=" + ::to_string(reg.get_protns3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns3())) + ")"
        + " " + "mmusecsid4=" + ::to_string(reg.get_mmusecsid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid4())) + ")"
        + " " + "protns4=" + ::to_string(reg.get_protns4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns4())) + ")"
        + " " + "mmusecsid5=" + ::to_string(reg.get_mmusecsid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid5())) + ")"
        + " " + "protns5=" + ::to_string(reg.get_protns5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns5())) + ")"
        + " " + "mmusecsid6=" + ::to_string(reg.get_mmusecsid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid6())) + ")"
        + " " + "protns6=" + ::to_string(reg.get_protns6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns6())) + ")"
        + " " + "mmusecsid7=" + ::to_string(reg.get_mmusecsid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid7())) + ")"
        + " " + "protns7=" + ::to_string(reg.get_protns7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns7())) + ")"
        + " " + "mmusecsid8=" + ::to_string(reg.get_mmusecsid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid8())) + ")"
        + " " + "protns8=" + ::to_string(reg.get_protns8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_nsaid_r reg)
{
    return "nsaid0=" + ::to_string(reg.get_nsaid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid0())) + ")"
        + " " + "nsaid1=" + ::to_string(reg.get_nsaid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid1())) + ")"
        + " " + "nsaid2=" + ::to_string(reg.get_nsaid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid2())) + ")"
        + " " + "nsaid3=" + ::to_string(reg.get_nsaid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid3())) + ")"
        + " " + "nsaid4=" + ::to_string(reg.get_nsaid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid4())) + ")"
        + " " + "nsaid5=" + ::to_string(reg.get_nsaid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid5())) + ")"
        + " " + "nsaid6=" + ::to_string(reg.get_nsaid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid6())) + ")"
        + " " + "nsaid7=" + ::to_string(reg.get_nsaid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid7())) + ")"
        + " " + "nsaid8=" + ::to_string(reg.get_nsaid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_mmusid_r reg)
{
    return "sid0=" + ::to_string(reg.get_sid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid0())) + ")"
        + " " + "sid1=" + ::to_string(reg.get_sid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid1())) + ")"
        + " " + "sid2=" + ::to_string(reg.get_sid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid2())) + ")"
        + " " + "sid3=" + ::to_string(reg.get_sid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid3())) + ")"
        + " " + "sid4=" + ::to_string(reg.get_sid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid4())) + ")"
        + " " + "sid5=" + ::to_string(reg.get_sid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid5())) + ")"
        + " " + "sid6=" + ::to_string(reg.get_sid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid6())) + ")"
        + " " + "sid7=" + ::to_string(reg.get_sid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid7())) + ")"
        + " " + "sid8=" + ::to_string(reg.get_sid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_mmussid_r reg)
{
    return "ssid0=" + ::to_string(reg.get_ssid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid0())) + ")"
        + " " + "ssid1=" + ::to_string(reg.get_ssid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid1())) + ")"
        + " " + "ssid2=" + ::to_string(reg.get_ssid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid2())) + ")"
        + " " + "ssid3=" + ::to_string(reg.get_ssid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid3())) + ")"
        + " " + "ssid4=" + ::to_string(reg.get_ssid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid4())) + ")"
        + " " + "ssid5=" + ::to_string(reg.get_ssid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid5())) + ")"
        + " " + "ssid6=" + ::to_string(reg.get_ssid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid6())) + ")"
        + " " + "ssid7=" + ::to_string(reg.get_ssid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid7())) + ")"
        + " " + "ssid8=" + ::to_string(reg.get_ssid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_mmussidv_r reg)
{
    return "ssidv0=" + ::to_string(reg.get_ssidv0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv0())) + ")"
        + " " + "ssidv1=" + ::to_string(reg.get_ssidv1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv1())) + ")"
        + " " + "ssidv2=" + ::to_string(reg.get_ssidv2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv2())) + ")"
        + " " + "ssidv3=" + ::to_string(reg.get_ssidv3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv3())) + ")"
        + " " + "ssidv4=" + ::to_string(reg.get_ssidv4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv4())) + ")"
        + " " + "ssidv5=" + ::to_string(reg.get_ssidv5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv5())) + ")"
        + " " + "ssidv6=" + ::to_string(reg.get_ssidv6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv6())) + ")"
        + " " + "ssidv7=" + ::to_string(reg.get_ssidv7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv7())) + ")"
        + " " + "ssidv8=" + ::to_string(reg.get_ssidv8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_attr_control_r reg)
{
    return "attrctrl0=" + ::to_string(reg.get_attrctrl0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl0())) + ")"
        + " " + "attrctrl1=" + ::to_string(reg.get_attrctrl1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl1())) + ")"
        + " " + "attrctrl2=" + ::to_string(reg.get_attrctrl2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl2())) + ")"
        + " " + "attrctrl3=" + ::to_string(reg.get_attrctrl3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl3())) + ")"
        + " " + "attrctrl4=" + ::to_string(reg.get_attrctrl4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl4())) + ")"
        + " " + "attrctrl5=" + ::to_string(reg.get_attrctrl5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl5())) + ")"
        + " " + "attrctrl6=" + ::to_string(reg.get_attrctrl6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl6())) + ")"
        + " " + "attrctrl7=" + ::to_string(reg.get_attrctrl7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl7())) + ")"
        + " " + "attrctrl8=" + ::to_string(reg.get_attrctrl8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_memattr_r reg)
{
    return "memattr0=" + ::to_string(reg.get_memattr0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr0())) + ")"
        + " " + "memattr1=" + ::to_string(reg.get_memattr1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr1())) + ")"
        + " " + "memattr2=" + ::to_string(reg.get_memattr2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr2())) + ")"
        + " " + "memattr3=" + ::to_string(reg.get_memattr3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr3())) + ")"
        + " " + "memattr4=" + ::to_string(reg.get_memattr4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr4())) + ")"
        + " " + "memattr5=" + ::to_string(reg.get_memattr5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr5())) + ")"
        + " " + "memattr6=" + ::to_string(reg.get_memattr6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr6())) + ")"
        + " " + "memattr7=" + ::to_string(reg.get_memattr7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr7())) + ")"
        + " " + "memattr8=" + ::to_string(reg.get_memattr8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_delegation_address_extend_r reg)
{
    return "addressextend0=" + ::to_string(reg.get_addressextend0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend0())) + ")"
        + " " + "addressextend1=" + ::to_string(reg.get_addressextend1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend1())) + ")"
        + " " + "addressextend2=" + ::to_string(reg.get_addressextend2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend2())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream0_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream0_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream0_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream0_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream0_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream0_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream0_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream1_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream1_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream2_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream2_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream3_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream4_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream4_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream4_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream4_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream4_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream4_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream5_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream5_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream5_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream5_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream5_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream5_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream6_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream6_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream6_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream6_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream6_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream6_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream7_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream7_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream7_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream7_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream7_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream7_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_stream8_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl1_stream8_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl1_stream8_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl1_stream8_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl1_stream8_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl1_stream8_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl1_npu_id_r reg)
{
    return "version_status=" + ::to_string(reg.get_version_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_version_status())) + ")"
        + " " + "version_minor=" + std::to_string(reg.get_version_minor())
        + " " + "version_major=" + std::to_string(reg.get_version_major())
        + " " + "product_major=" + std::to_string(reg.get_product_major())
        + " " + "arch_rev=" + std::to_string(reg.get_arch_rev())
        + " " + "arch_minor=" + std::to_string(reg.get_arch_minor())
        + " " + "arch_major=" + std::to_string(reg.get_arch_major());
}

static __attribute__((unused)) std::string to_string(dl1_unit_count_r reg)
{
    return "quad_count=" + std::to_string(reg.get_quad_count())
        + " " + "engines_per_quad=" + std::to_string(reg.get_engines_per_quad())
        + " " + "dfc_emc_per_engine=" + std::to_string(reg.get_dfc_emc_per_engine());
}

static __attribute__((unused)) std::string to_string(dl1_mce_features_r reg)
{
    return "ifm_generated_per_engine=" + std::to_string(reg.get_ifm_generated_per_engine())
        + " " + "ofm_generated_per_engine=" + std::to_string(reg.get_ofm_generated_per_engine())
        + " " + "mce_num_macs=" + std::to_string(reg.get_mce_num_macs())
        + " " + "mce_num_acc=" + std::to_string(reg.get_mce_num_acc())
        + " " + "winograd_support=" + std::to_string(reg.get_winograd_support())
        + " " + "tsu_16bit_sequence_support=" + std::to_string(reg.get_tsu_16bit_sequence_support())
        + " " + "ofm_scaling_16bit_support=" + std::to_string(reg.get_ofm_scaling_16bit_support());
}

static __attribute__((unused)) std::string to_string(dl1_dfc_features_r reg)
{
    return "dfc_mem_size_per_emc=" + std::to_string(reg.get_dfc_mem_size_per_emc())
        + " " + "bank_count=" + std::to_string(reg.get_bank_count())
        + " " + "activation_compression=" + std::to_string(reg.get_activation_compression());
}

static __attribute__((unused)) std::string to_string(dl1_ple_features_r reg)
{
    return "ple_input_mem_size=" + std::to_string(reg.get_ple_input_mem_size())
        + " " + "ple_output_mem_size=" + std::to_string(reg.get_ple_output_mem_size())
        + " " + "ple_vrf_mem_size=" + std::to_string(reg.get_ple_vrf_mem_size())
        + " " + "ple_mem_size=" + std::to_string(reg.get_ple_mem_size());
}

static __attribute__((unused)) std::string to_string(dl1_wd_features_r reg)
{
    return "buffer_size=" + std::to_string(reg.get_buffer_size())
        + " " + "max_dim=" + std::to_string(reg.get_max_dim())
        + " " + "compression_version=" + std::to_string(reg.get_compression_version());
}

static __attribute__((unused)) std::string to_string(dl1_vector_engine_features_r reg)
{
    return "vector_engine_version=" + std::to_string(reg.get_vector_engine_version())
        + " " + "ple_lanes=" + std::to_string(reg.get_ple_lanes());
}

static __attribute__((unused)) std::string to_string(dl1_ecoid_r reg)
{
    return "ecoid=" + std::to_string(reg.get_ecoid());
}

static __attribute__((unused)) std::string to_string(dl1_streamid_width_r reg)
{
    return "mmusid_w=" + std::to_string(reg.get_mmusid_w())
        + " " + "mmussid_w=" + std::to_string(reg.get_mmussid_w());
}

static __attribute__((unused)) std::string to_string(dl2_ext_access_control_r reg)
{
    return "excctlr=" + std::to_string(reg.get_excctlr())
        + " " + "ramctlr=" + std::to_string(reg.get_ramctlr())
        + " " + "dbgctlr=" + std::to_string(reg.get_dbgctlr());
}

static __attribute__((unused)) std::string to_string(dl2_delegation_r reg)
{
    return "secctlr=" + ::to_string(reg.get_secctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secctlr())) + ")"
        + " " + "secmcuctlr=" + ::to_string(reg.get_secmcuctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secmcuctlr())) + ")"
        + " " + "sysctlr=" + ::to_string(reg.get_sysctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sysctlr())) + ")"
        + " " + "pwrctlr=" + ::to_string(reg.get_pwrctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pwrctlr())) + ")"
        + " " + "auxctlr=" + ::to_string(reg.get_auxctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_auxctlr())) + ")"
        + " " + "excctlr=" + ::to_string(reg.get_excctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_excctlr())) + ")"
        + " " + "ramctlr=" + ::to_string(reg.get_ramctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ramctlr())) + ")"
        + " " + "dbgctlr=" + ::to_string(reg.get_dbgctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dbgctlr())) + ")"
        + " " + "err=" + ::to_string(reg.get_err()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_err())) + ")"
        + " " + "debug=" + ::to_string(reg.get_debug()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_debug())) + ")"
        + " " + "job=" + ::to_string(reg.get_job()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_job())) + ")"
        + " " + "event=" + ::to_string(reg.get_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_event())) + ")"
        + " " + "interrupt=" + ::to_string(reg.get_interrupt()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_interrupt())) + ")"
        + " " + "nmi=" + ::to_string(reg.get_nmi()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nmi())) + ")"
        + " " + "irq=" + ::to_string(reg.get_irq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_irq())) + ")"
        + " " + "intext=" + ::to_string(reg.get_intext()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_intext())) + ")"
        + " " + "gp0=" + ::to_string(reg.get_gp0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp0())) + ")"
        + " " + "gp1=" + ::to_string(reg.get_gp1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp1())) + ")"
        + " " + "gp2=" + ::to_string(reg.get_gp2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp2())) + ")"
        + " " + "gp3=" + ::to_string(reg.get_gp3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp3())) + ")"
        + " " + "gp4=" + ::to_string(reg.get_gp4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp4())) + ")"
        + " " + "gp5=" + ::to_string(reg.get_gp5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp5())) + ")"
        + " " + "gp6=" + ::to_string(reg.get_gp6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp6())) + ")"
        + " " + "gp7=" + ::to_string(reg.get_gp7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp7())) + ")"
        + " " + "dfcot=" + ::to_string(reg.get_dfcot()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dfcot())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_secctlr_r reg)
{
    return "ns_allowed=" + std::to_string(reg.get_ns_allowed())
        + " " + "npu_ns_mode=" + std::to_string(reg.get_npu_ns_mode())
        + " " + "ext_ns_evnt_to_s_evnt=" + std::to_string(reg.get_ext_ns_evnt_to_s_evnt())
        + " " + "ext_ns_irq_to_s_irq=" + std::to_string(reg.get_ext_ns_irq_to_s_irq())
        + " " + "ext_s_evnt_to_ns_evnt=" + std::to_string(reg.get_ext_s_evnt_to_ns_evnt())
        + " " + "ext_s_evnt_to_ns_irq=" + std::to_string(reg.get_ext_s_evnt_to_ns_irq());
}

static __attribute__((unused)) std::string to_string(dl2_secmcuctlr_r reg)
{
    return "mcu_state=" + std::to_string(reg.get_mcu_state());
}

static __attribute__((unused)) std::string to_string(dl2_sysctlr0_r reg)
{
    return "cpuwait=" + std::to_string(reg.get_cpuwait())
        + " " + "lockup=" + std::to_string(reg.get_lockup())
        + " " + "halted=" + std::to_string(reg.get_halted())
        + " " + "rstreq=" + std::to_string(reg.get_rstreq())
        + " " + "sleeping=" + std::to_string(reg.get_sleeping())
        + " " + "initvtor=" + std::to_string(reg.get_initvtor())
        + " " + "soft_rstreq=" + ::to_string(reg.get_soft_rstreq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_soft_rstreq())) + ")"
        + " " + "hard_rstreq=" + std::to_string(reg.get_hard_rstreq());
}

static __attribute__((unused)) std::string to_string(dl2_sysctlr1_r reg)
{
    return "mcu_setevnt=" + std::to_string(reg.get_mcu_setevnt())
        + " " + "mcu_setirq=" + std::to_string(reg.get_mcu_setirq())
        + " " + "mcu_gpevnt=" + std::to_string(reg.get_mcu_gpevnt())
        + " " + "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "txev_ple=" + std::to_string(reg.get_txev_ple())
        + " " + "txev_dbg=" + std::to_string(reg.get_txev_dbg())
        + " " + "rxev_degroup=" + std::to_string(reg.get_rxev_degroup())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "err_tolr_evnt=" + std::to_string(reg.get_err_tolr_evnt())
        + " " + "err_tolr_irq=" + std::to_string(reg.get_err_tolr_irq())
        + " " + "err_func_irq=" + std::to_string(reg.get_err_func_irq())
        + " " + "err_recv_irq=" + std::to_string(reg.get_err_recv_irq());
}

static __attribute__((unused)) std::string to_string(dl2_pwrctlr_r reg)
{
    return "active=" + std::to_string(reg.get_active())
        + " " + "qreqn=" + std::to_string(reg.get_qreqn());
}

static __attribute__((unused)) std::string to_string(dl2_auxctlr_r reg)
{
    return "dis_clkgate=" + std::to_string(reg.get_dis_clkgate())
        + " " + "dis_qdeny=" + std::to_string(reg.get_dis_qdeny())
        + " " + "dis_edgeirq=" + std::to_string(reg.get_dis_edgeirq())
        + " " + "dis_mcu_unique_rid=" + std::to_string(reg.get_dis_mcu_unique_rid())
        + " " + "dis_stshtrnsltn=" + std::to_string(reg.get_dis_stshtrnsltn())
        + " " + "increase_outstanding_writes=" + std::to_string(reg.get_increase_outstanding_writes())
        + " " + "dbgen=" + std::to_string(reg.get_dbgen())
        + " " + "niden=" + std::to_string(reg.get_niden())
        + " " + "dis_ext_err_unrecoverable=" + std::to_string(reg.get_dis_ext_err_unrecoverable())
        + " " + "dis_ext_err_recoverable=" + std::to_string(reg.get_dis_ext_err_recoverable())
        + " " + "dis_ext_err_functional=" + std::to_string(reg.get_dis_ext_err_functional())
        + " " + "dis_ext_err_tolerable=" + std::to_string(reg.get_dis_ext_err_tolerable())
        + " " + "dis_non_broadcast_global_err=" + std::to_string(reg.get_dis_non_broadcast_global_err())
        + " " + "en_ple_block_done=" + std::to_string(reg.get_en_ple_block_done())
        + " " + "mac_ramp_cycles=" + ::to_string(reg.get_mac_ramp_cycles()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mac_ramp_cycles())) + ")"
        + " " + "snoop_dis=" + std::to_string(reg.get_snoop_dis())
        + " " + "wd_ramp_dis=" + std::to_string(reg.get_wd_ramp_dis())
        + " " + "stash_ahead=" + std::to_string(reg.get_stash_ahead())
        + " " + "stash_issue=" + std::to_string(reg.get_stash_issue());
}

static __attribute__((unused)) std::string to_string(dl2_setirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl2_clrirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl2_setirq_int_r reg)
{
    return "event=" + std::to_string(reg.get_event())
        + " " + "interrupt=" + std::to_string(reg.get_interrupt())
        + " " + "nmi=" + std::to_string(reg.get_nmi());
}

static __attribute__((unused)) std::string to_string(dl2_dfc_slv_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl2_dfc_slv_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl2_dfc_mst_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl2_dfc_mst_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl2_irq_status_r reg)
{
    return "setirq_err=" + std::to_string(reg.get_setirq_err())
        + " " + "setirq_dbg=" + std::to_string(reg.get_setirq_dbg())
        + " " + "setirq_job=" + std::to_string(reg.get_setirq_job())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl2_int_status_r reg)
{
    return "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl2_ext_status_r reg)
{
    return "setirq_evnt=" + std::to_string(reg.get_setirq_evnt())
        + " " + "setirq_irq=" + std::to_string(reg.get_setirq_irq())
        + " " + "gp_evnt=" + std::to_string(reg.get_gp_evnt());
}

static __attribute__((unused)) std::string to_string(dl2_gp0_r reg)
{
    return "gp0=" + std::to_string(reg.get_gp0());
}

static __attribute__((unused)) std::string to_string(dl2_gp1_r reg)
{
    return "gp1=" + std::to_string(reg.get_gp1());
}

static __attribute__((unused)) std::string to_string(dl2_gp2_r reg)
{
    return "gp2=" + std::to_string(reg.get_gp2());
}

static __attribute__((unused)) std::string to_string(dl2_gp3_r reg)
{
    return "gp3=" + std::to_string(reg.get_gp3());
}

static __attribute__((unused)) std::string to_string(dl2_gp4_r reg)
{
    return "gp4=" + std::to_string(reg.get_gp4());
}

static __attribute__((unused)) std::string to_string(dl2_gp5_r reg)
{
    return "gp5=" + std::to_string(reg.get_gp5());
}

static __attribute__((unused)) std::string to_string(dl2_gp6_r reg)
{
    return "gp6=" + std::to_string(reg.get_gp6());
}

static __attribute__((unused)) std::string to_string(dl2_gp7_r reg)
{
    return "gp7=" + std::to_string(reg.get_gp7());
}

static __attribute__((unused)) std::string to_string(dl2_delegation_stream_security_r reg)
{
    return "mmusecsid0=" + ::to_string(reg.get_mmusecsid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid0())) + ")"
        + " " + "protns0=" + ::to_string(reg.get_protns0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns0())) + ")"
        + " " + "mmusecsid1=" + ::to_string(reg.get_mmusecsid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid1())) + ")"
        + " " + "protns1=" + ::to_string(reg.get_protns1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns1())) + ")"
        + " " + "mmusecsid2=" + ::to_string(reg.get_mmusecsid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid2())) + ")"
        + " " + "protns2=" + ::to_string(reg.get_protns2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns2())) + ")"
        + " " + "mmusecsid3=" + ::to_string(reg.get_mmusecsid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid3())) + ")"
        + " " + "protns3=" + ::to_string(reg.get_protns3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns3())) + ")"
        + " " + "mmusecsid4=" + ::to_string(reg.get_mmusecsid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid4())) + ")"
        + " " + "protns4=" + ::to_string(reg.get_protns4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns4())) + ")"
        + " " + "mmusecsid5=" + ::to_string(reg.get_mmusecsid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid5())) + ")"
        + " " + "protns5=" + ::to_string(reg.get_protns5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns5())) + ")"
        + " " + "mmusecsid6=" + ::to_string(reg.get_mmusecsid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid6())) + ")"
        + " " + "protns6=" + ::to_string(reg.get_protns6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns6())) + ")"
        + " " + "mmusecsid7=" + ::to_string(reg.get_mmusecsid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid7())) + ")"
        + " " + "protns7=" + ::to_string(reg.get_protns7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns7())) + ")"
        + " " + "mmusecsid8=" + ::to_string(reg.get_mmusecsid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid8())) + ")"
        + " " + "protns8=" + ::to_string(reg.get_protns8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_nsaid_r reg)
{
    return "nsaid0=" + ::to_string(reg.get_nsaid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid0())) + ")"
        + " " + "nsaid1=" + ::to_string(reg.get_nsaid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid1())) + ")"
        + " " + "nsaid2=" + ::to_string(reg.get_nsaid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid2())) + ")"
        + " " + "nsaid3=" + ::to_string(reg.get_nsaid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid3())) + ")"
        + " " + "nsaid4=" + ::to_string(reg.get_nsaid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid4())) + ")"
        + " " + "nsaid5=" + ::to_string(reg.get_nsaid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid5())) + ")"
        + " " + "nsaid6=" + ::to_string(reg.get_nsaid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid6())) + ")"
        + " " + "nsaid7=" + ::to_string(reg.get_nsaid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid7())) + ")"
        + " " + "nsaid8=" + ::to_string(reg.get_nsaid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_mmusid_r reg)
{
    return "sid0=" + ::to_string(reg.get_sid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid0())) + ")"
        + " " + "sid1=" + ::to_string(reg.get_sid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid1())) + ")"
        + " " + "sid2=" + ::to_string(reg.get_sid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid2())) + ")"
        + " " + "sid3=" + ::to_string(reg.get_sid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid3())) + ")"
        + " " + "sid4=" + ::to_string(reg.get_sid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid4())) + ")"
        + " " + "sid5=" + ::to_string(reg.get_sid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid5())) + ")"
        + " " + "sid6=" + ::to_string(reg.get_sid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid6())) + ")"
        + " " + "sid7=" + ::to_string(reg.get_sid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid7())) + ")"
        + " " + "sid8=" + ::to_string(reg.get_sid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_mmussid_r reg)
{
    return "ssid0=" + ::to_string(reg.get_ssid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid0())) + ")"
        + " " + "ssid1=" + ::to_string(reg.get_ssid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid1())) + ")"
        + " " + "ssid2=" + ::to_string(reg.get_ssid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid2())) + ")"
        + " " + "ssid3=" + ::to_string(reg.get_ssid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid3())) + ")"
        + " " + "ssid4=" + ::to_string(reg.get_ssid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid4())) + ")"
        + " " + "ssid5=" + ::to_string(reg.get_ssid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid5())) + ")"
        + " " + "ssid6=" + ::to_string(reg.get_ssid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid6())) + ")"
        + " " + "ssid7=" + ::to_string(reg.get_ssid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid7())) + ")"
        + " " + "ssid8=" + ::to_string(reg.get_ssid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_mmussidv_r reg)
{
    return "ssidv0=" + ::to_string(reg.get_ssidv0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv0())) + ")"
        + " " + "ssidv1=" + ::to_string(reg.get_ssidv1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv1())) + ")"
        + " " + "ssidv2=" + ::to_string(reg.get_ssidv2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv2())) + ")"
        + " " + "ssidv3=" + ::to_string(reg.get_ssidv3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv3())) + ")"
        + " " + "ssidv4=" + ::to_string(reg.get_ssidv4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv4())) + ")"
        + " " + "ssidv5=" + ::to_string(reg.get_ssidv5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv5())) + ")"
        + " " + "ssidv6=" + ::to_string(reg.get_ssidv6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv6())) + ")"
        + " " + "ssidv7=" + ::to_string(reg.get_ssidv7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv7())) + ")"
        + " " + "ssidv8=" + ::to_string(reg.get_ssidv8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_attr_control_r reg)
{
    return "attrctrl0=" + ::to_string(reg.get_attrctrl0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl0())) + ")"
        + " " + "attrctrl1=" + ::to_string(reg.get_attrctrl1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl1())) + ")"
        + " " + "attrctrl2=" + ::to_string(reg.get_attrctrl2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl2())) + ")"
        + " " + "attrctrl3=" + ::to_string(reg.get_attrctrl3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl3())) + ")"
        + " " + "attrctrl4=" + ::to_string(reg.get_attrctrl4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl4())) + ")"
        + " " + "attrctrl5=" + ::to_string(reg.get_attrctrl5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl5())) + ")"
        + " " + "attrctrl6=" + ::to_string(reg.get_attrctrl6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl6())) + ")"
        + " " + "attrctrl7=" + ::to_string(reg.get_attrctrl7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl7())) + ")"
        + " " + "attrctrl8=" + ::to_string(reg.get_attrctrl8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_memattr_r reg)
{
    return "memattr0=" + ::to_string(reg.get_memattr0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr0())) + ")"
        + " " + "memattr1=" + ::to_string(reg.get_memattr1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr1())) + ")"
        + " " + "memattr2=" + ::to_string(reg.get_memattr2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr2())) + ")"
        + " " + "memattr3=" + ::to_string(reg.get_memattr3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr3())) + ")"
        + " " + "memattr4=" + ::to_string(reg.get_memattr4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr4())) + ")"
        + " " + "memattr5=" + ::to_string(reg.get_memattr5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr5())) + ")"
        + " " + "memattr6=" + ::to_string(reg.get_memattr6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr6())) + ")"
        + " " + "memattr7=" + ::to_string(reg.get_memattr7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr7())) + ")"
        + " " + "memattr8=" + ::to_string(reg.get_memattr8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_delegation_address_extend_r reg)
{
    return "addressextend0=" + ::to_string(reg.get_addressextend0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend0())) + ")"
        + " " + "addressextend1=" + ::to_string(reg.get_addressextend1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend1())) + ")"
        + " " + "addressextend2=" + ::to_string(reg.get_addressextend2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend2())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream0_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream0_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream0_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream0_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream0_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream0_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream0_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream1_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream1_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream2_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream2_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream3_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream4_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream4_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream4_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream4_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream4_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream4_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream5_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream5_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream5_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream5_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream5_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream5_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream6_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream6_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream6_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream6_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream6_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream6_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream7_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream7_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream7_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream7_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream7_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream7_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_stream8_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl2_stream8_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl2_stream8_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl2_stream8_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl2_stream8_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl2_stream8_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl2_npu_id_r reg)
{
    return "version_status=" + ::to_string(reg.get_version_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_version_status())) + ")"
        + " " + "version_minor=" + std::to_string(reg.get_version_minor())
        + " " + "version_major=" + std::to_string(reg.get_version_major())
        + " " + "product_major=" + std::to_string(reg.get_product_major())
        + " " + "arch_rev=" + std::to_string(reg.get_arch_rev())
        + " " + "arch_minor=" + std::to_string(reg.get_arch_minor())
        + " " + "arch_major=" + std::to_string(reg.get_arch_major());
}

static __attribute__((unused)) std::string to_string(dl2_unit_count_r reg)
{
    return "quad_count=" + std::to_string(reg.get_quad_count())
        + " " + "engines_per_quad=" + std::to_string(reg.get_engines_per_quad())
        + " " + "dfc_emc_per_engine=" + std::to_string(reg.get_dfc_emc_per_engine());
}

static __attribute__((unused)) std::string to_string(dl2_mce_features_r reg)
{
    return "ifm_generated_per_engine=" + std::to_string(reg.get_ifm_generated_per_engine())
        + " " + "ofm_generated_per_engine=" + std::to_string(reg.get_ofm_generated_per_engine())
        + " " + "mce_num_macs=" + std::to_string(reg.get_mce_num_macs())
        + " " + "mce_num_acc=" + std::to_string(reg.get_mce_num_acc())
        + " " + "winograd_support=" + std::to_string(reg.get_winograd_support())
        + " " + "tsu_16bit_sequence_support=" + std::to_string(reg.get_tsu_16bit_sequence_support())
        + " " + "ofm_scaling_16bit_support=" + std::to_string(reg.get_ofm_scaling_16bit_support());
}

static __attribute__((unused)) std::string to_string(dl2_dfc_features_r reg)
{
    return "dfc_mem_size_per_emc=" + std::to_string(reg.get_dfc_mem_size_per_emc())
        + " " + "bank_count=" + std::to_string(reg.get_bank_count())
        + " " + "activation_compression=" + std::to_string(reg.get_activation_compression());
}

static __attribute__((unused)) std::string to_string(dl2_ple_features_r reg)
{
    return "ple_input_mem_size=" + std::to_string(reg.get_ple_input_mem_size())
        + " " + "ple_output_mem_size=" + std::to_string(reg.get_ple_output_mem_size())
        + " " + "ple_vrf_mem_size=" + std::to_string(reg.get_ple_vrf_mem_size())
        + " " + "ple_mem_size=" + std::to_string(reg.get_ple_mem_size());
}

static __attribute__((unused)) std::string to_string(dl2_wd_features_r reg)
{
    return "buffer_size=" + std::to_string(reg.get_buffer_size())
        + " " + "max_dim=" + std::to_string(reg.get_max_dim())
        + " " + "compression_version=" + std::to_string(reg.get_compression_version());
}

static __attribute__((unused)) std::string to_string(dl2_vector_engine_features_r reg)
{
    return "vector_engine_version=" + std::to_string(reg.get_vector_engine_version())
        + " " + "ple_lanes=" + std::to_string(reg.get_ple_lanes());
}

static __attribute__((unused)) std::string to_string(dl2_ecoid_r reg)
{
    return "ecoid=" + std::to_string(reg.get_ecoid());
}

static __attribute__((unused)) std::string to_string(dl2_streamid_width_r reg)
{
    return "mmusid_w=" + std::to_string(reg.get_mmusid_w())
        + " " + "mmussid_w=" + std::to_string(reg.get_mmussid_w());
}

static __attribute__((unused)) std::string to_string(dl3_ext_access_control_r reg)
{
    return "excctlr=" + std::to_string(reg.get_excctlr())
        + " " + "ramctlr=" + std::to_string(reg.get_ramctlr())
        + " " + "dbgctlr=" + std::to_string(reg.get_dbgctlr());
}

static __attribute__((unused)) std::string to_string(dl3_delegation_r reg)
{
    return "secctlr=" + ::to_string(reg.get_secctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secctlr())) + ")"
        + " " + "secmcuctlr=" + ::to_string(reg.get_secmcuctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secmcuctlr())) + ")"
        + " " + "sysctlr=" + ::to_string(reg.get_sysctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sysctlr())) + ")"
        + " " + "pwrctlr=" + ::to_string(reg.get_pwrctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pwrctlr())) + ")"
        + " " + "auxctlr=" + ::to_string(reg.get_auxctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_auxctlr())) + ")"
        + " " + "excctlr=" + ::to_string(reg.get_excctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_excctlr())) + ")"
        + " " + "ramctlr=" + ::to_string(reg.get_ramctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ramctlr())) + ")"
        + " " + "dbgctlr=" + ::to_string(reg.get_dbgctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dbgctlr())) + ")"
        + " " + "err=" + ::to_string(reg.get_err()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_err())) + ")"
        + " " + "debug=" + ::to_string(reg.get_debug()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_debug())) + ")"
        + " " + "job=" + ::to_string(reg.get_job()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_job())) + ")"
        + " " + "event=" + ::to_string(reg.get_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_event())) + ")"
        + " " + "interrupt=" + ::to_string(reg.get_interrupt()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_interrupt())) + ")"
        + " " + "nmi=" + ::to_string(reg.get_nmi()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nmi())) + ")"
        + " " + "irq=" + ::to_string(reg.get_irq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_irq())) + ")"
        + " " + "intext=" + ::to_string(reg.get_intext()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_intext())) + ")"
        + " " + "gp0=" + ::to_string(reg.get_gp0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp0())) + ")"
        + " " + "gp1=" + ::to_string(reg.get_gp1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp1())) + ")"
        + " " + "gp2=" + ::to_string(reg.get_gp2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp2())) + ")"
        + " " + "gp3=" + ::to_string(reg.get_gp3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp3())) + ")"
        + " " + "gp4=" + ::to_string(reg.get_gp4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp4())) + ")"
        + " " + "gp5=" + ::to_string(reg.get_gp5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp5())) + ")"
        + " " + "gp6=" + ::to_string(reg.get_gp6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp6())) + ")"
        + " " + "gp7=" + ::to_string(reg.get_gp7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp7())) + ")"
        + " " + "dfcot=" + ::to_string(reg.get_dfcot()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dfcot())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_secctlr_r reg)
{
    return "ns_allowed=" + std::to_string(reg.get_ns_allowed())
        + " " + "npu_ns_mode=" + std::to_string(reg.get_npu_ns_mode())
        + " " + "ext_ns_evnt_to_s_evnt=" + std::to_string(reg.get_ext_ns_evnt_to_s_evnt())
        + " " + "ext_ns_irq_to_s_irq=" + std::to_string(reg.get_ext_ns_irq_to_s_irq())
        + " " + "ext_s_evnt_to_ns_evnt=" + std::to_string(reg.get_ext_s_evnt_to_ns_evnt())
        + " " + "ext_s_evnt_to_ns_irq=" + std::to_string(reg.get_ext_s_evnt_to_ns_irq());
}

static __attribute__((unused)) std::string to_string(dl3_secmcuctlr_r reg)
{
    return "mcu_state=" + std::to_string(reg.get_mcu_state());
}

static __attribute__((unused)) std::string to_string(dl3_sysctlr0_r reg)
{
    return "cpuwait=" + std::to_string(reg.get_cpuwait())
        + " " + "lockup=" + std::to_string(reg.get_lockup())
        + " " + "halted=" + std::to_string(reg.get_halted())
        + " " + "rstreq=" + std::to_string(reg.get_rstreq())
        + " " + "sleeping=" + std::to_string(reg.get_sleeping())
        + " " + "initvtor=" + std::to_string(reg.get_initvtor())
        + " " + "soft_rstreq=" + ::to_string(reg.get_soft_rstreq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_soft_rstreq())) + ")"
        + " " + "hard_rstreq=" + std::to_string(reg.get_hard_rstreq());
}

static __attribute__((unused)) std::string to_string(dl3_sysctlr1_r reg)
{
    return "mcu_setevnt=" + std::to_string(reg.get_mcu_setevnt())
        + " " + "mcu_setirq=" + std::to_string(reg.get_mcu_setirq())
        + " " + "mcu_gpevnt=" + std::to_string(reg.get_mcu_gpevnt())
        + " " + "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "txev_ple=" + std::to_string(reg.get_txev_ple())
        + " " + "txev_dbg=" + std::to_string(reg.get_txev_dbg())
        + " " + "rxev_degroup=" + std::to_string(reg.get_rxev_degroup())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "err_tolr_evnt=" + std::to_string(reg.get_err_tolr_evnt())
        + " " + "err_tolr_irq=" + std::to_string(reg.get_err_tolr_irq())
        + " " + "err_func_irq=" + std::to_string(reg.get_err_func_irq())
        + " " + "err_recv_irq=" + std::to_string(reg.get_err_recv_irq());
}

static __attribute__((unused)) std::string to_string(dl3_pwrctlr_r reg)
{
    return "active=" + std::to_string(reg.get_active())
        + " " + "qreqn=" + std::to_string(reg.get_qreqn());
}

static __attribute__((unused)) std::string to_string(dl3_auxctlr_r reg)
{
    return "dis_clkgate=" + std::to_string(reg.get_dis_clkgate())
        + " " + "dis_qdeny=" + std::to_string(reg.get_dis_qdeny())
        + " " + "dis_edgeirq=" + std::to_string(reg.get_dis_edgeirq())
        + " " + "dis_mcu_unique_rid=" + std::to_string(reg.get_dis_mcu_unique_rid())
        + " " + "dis_stshtrnsltn=" + std::to_string(reg.get_dis_stshtrnsltn())
        + " " + "increase_outstanding_writes=" + std::to_string(reg.get_increase_outstanding_writes())
        + " " + "dbgen=" + std::to_string(reg.get_dbgen())
        + " " + "niden=" + std::to_string(reg.get_niden())
        + " " + "dis_ext_err_unrecoverable=" + std::to_string(reg.get_dis_ext_err_unrecoverable())
        + " " + "dis_ext_err_recoverable=" + std::to_string(reg.get_dis_ext_err_recoverable())
        + " " + "dis_ext_err_functional=" + std::to_string(reg.get_dis_ext_err_functional())
        + " " + "dis_ext_err_tolerable=" + std::to_string(reg.get_dis_ext_err_tolerable())
        + " " + "dis_non_broadcast_global_err=" + std::to_string(reg.get_dis_non_broadcast_global_err())
        + " " + "en_ple_block_done=" + std::to_string(reg.get_en_ple_block_done())
        + " " + "mac_ramp_cycles=" + ::to_string(reg.get_mac_ramp_cycles()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mac_ramp_cycles())) + ")"
        + " " + "snoop_dis=" + std::to_string(reg.get_snoop_dis())
        + " " + "wd_ramp_dis=" + std::to_string(reg.get_wd_ramp_dis())
        + " " + "stash_ahead=" + std::to_string(reg.get_stash_ahead())
        + " " + "stash_issue=" + std::to_string(reg.get_stash_issue());
}

static __attribute__((unused)) std::string to_string(dl3_setirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl3_clrirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(dl3_setirq_int_r reg)
{
    return "event=" + std::to_string(reg.get_event())
        + " " + "interrupt=" + std::to_string(reg.get_interrupt())
        + " " + "nmi=" + std::to_string(reg.get_nmi());
}

static __attribute__((unused)) std::string to_string(dl3_dfc_slv_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl3_dfc_slv_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl3_dfc_mst_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(dl3_dfc_mst_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(dl3_irq_status_r reg)
{
    return "setirq_err=" + std::to_string(reg.get_setirq_err())
        + " " + "setirq_dbg=" + std::to_string(reg.get_setirq_dbg())
        + " " + "setirq_job=" + std::to_string(reg.get_setirq_job())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl3_int_status_r reg)
{
    return "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(dl3_ext_status_r reg)
{
    return "setirq_evnt=" + std::to_string(reg.get_setirq_evnt())
        + " " + "setirq_irq=" + std::to_string(reg.get_setirq_irq())
        + " " + "gp_evnt=" + std::to_string(reg.get_gp_evnt());
}

static __attribute__((unused)) std::string to_string(dl3_gp0_r reg)
{
    return "gp0=" + std::to_string(reg.get_gp0());
}

static __attribute__((unused)) std::string to_string(dl3_gp1_r reg)
{
    return "gp1=" + std::to_string(reg.get_gp1());
}

static __attribute__((unused)) std::string to_string(dl3_gp2_r reg)
{
    return "gp2=" + std::to_string(reg.get_gp2());
}

static __attribute__((unused)) std::string to_string(dl3_gp3_r reg)
{
    return "gp3=" + std::to_string(reg.get_gp3());
}

static __attribute__((unused)) std::string to_string(dl3_gp4_r reg)
{
    return "gp4=" + std::to_string(reg.get_gp4());
}

static __attribute__((unused)) std::string to_string(dl3_gp5_r reg)
{
    return "gp5=" + std::to_string(reg.get_gp5());
}

static __attribute__((unused)) std::string to_string(dl3_gp6_r reg)
{
    return "gp6=" + std::to_string(reg.get_gp6());
}

static __attribute__((unused)) std::string to_string(dl3_gp7_r reg)
{
    return "gp7=" + std::to_string(reg.get_gp7());
}

static __attribute__((unused)) std::string to_string(dl3_delegation_stream_security_r reg)
{
    return "mmusecsid0=" + ::to_string(reg.get_mmusecsid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid0())) + ")"
        + " " + "protns0=" + ::to_string(reg.get_protns0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns0())) + ")"
        + " " + "mmusecsid1=" + ::to_string(reg.get_mmusecsid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid1())) + ")"
        + " " + "protns1=" + ::to_string(reg.get_protns1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns1())) + ")"
        + " " + "mmusecsid2=" + ::to_string(reg.get_mmusecsid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid2())) + ")"
        + " " + "protns2=" + ::to_string(reg.get_protns2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns2())) + ")"
        + " " + "mmusecsid3=" + ::to_string(reg.get_mmusecsid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid3())) + ")"
        + " " + "protns3=" + ::to_string(reg.get_protns3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns3())) + ")"
        + " " + "mmusecsid4=" + ::to_string(reg.get_mmusecsid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid4())) + ")"
        + " " + "protns4=" + ::to_string(reg.get_protns4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns4())) + ")"
        + " " + "mmusecsid5=" + ::to_string(reg.get_mmusecsid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid5())) + ")"
        + " " + "protns5=" + ::to_string(reg.get_protns5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns5())) + ")"
        + " " + "mmusecsid6=" + ::to_string(reg.get_mmusecsid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid6())) + ")"
        + " " + "protns6=" + ::to_string(reg.get_protns6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns6())) + ")"
        + " " + "mmusecsid7=" + ::to_string(reg.get_mmusecsid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid7())) + ")"
        + " " + "protns7=" + ::to_string(reg.get_protns7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns7())) + ")"
        + " " + "mmusecsid8=" + ::to_string(reg.get_mmusecsid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid8())) + ")"
        + " " + "protns8=" + ::to_string(reg.get_protns8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_nsaid_r reg)
{
    return "nsaid0=" + ::to_string(reg.get_nsaid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid0())) + ")"
        + " " + "nsaid1=" + ::to_string(reg.get_nsaid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid1())) + ")"
        + " " + "nsaid2=" + ::to_string(reg.get_nsaid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid2())) + ")"
        + " " + "nsaid3=" + ::to_string(reg.get_nsaid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid3())) + ")"
        + " " + "nsaid4=" + ::to_string(reg.get_nsaid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid4())) + ")"
        + " " + "nsaid5=" + ::to_string(reg.get_nsaid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid5())) + ")"
        + " " + "nsaid6=" + ::to_string(reg.get_nsaid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid6())) + ")"
        + " " + "nsaid7=" + ::to_string(reg.get_nsaid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid7())) + ")"
        + " " + "nsaid8=" + ::to_string(reg.get_nsaid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_mmusid_r reg)
{
    return "sid0=" + ::to_string(reg.get_sid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid0())) + ")"
        + " " + "sid1=" + ::to_string(reg.get_sid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid1())) + ")"
        + " " + "sid2=" + ::to_string(reg.get_sid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid2())) + ")"
        + " " + "sid3=" + ::to_string(reg.get_sid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid3())) + ")"
        + " " + "sid4=" + ::to_string(reg.get_sid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid4())) + ")"
        + " " + "sid5=" + ::to_string(reg.get_sid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid5())) + ")"
        + " " + "sid6=" + ::to_string(reg.get_sid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid6())) + ")"
        + " " + "sid7=" + ::to_string(reg.get_sid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid7())) + ")"
        + " " + "sid8=" + ::to_string(reg.get_sid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_mmussid_r reg)
{
    return "ssid0=" + ::to_string(reg.get_ssid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid0())) + ")"
        + " " + "ssid1=" + ::to_string(reg.get_ssid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid1())) + ")"
        + " " + "ssid2=" + ::to_string(reg.get_ssid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid2())) + ")"
        + " " + "ssid3=" + ::to_string(reg.get_ssid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid3())) + ")"
        + " " + "ssid4=" + ::to_string(reg.get_ssid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid4())) + ")"
        + " " + "ssid5=" + ::to_string(reg.get_ssid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid5())) + ")"
        + " " + "ssid6=" + ::to_string(reg.get_ssid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid6())) + ")"
        + " " + "ssid7=" + ::to_string(reg.get_ssid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid7())) + ")"
        + " " + "ssid8=" + ::to_string(reg.get_ssid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_mmussidv_r reg)
{
    return "ssidv0=" + ::to_string(reg.get_ssidv0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv0())) + ")"
        + " " + "ssidv1=" + ::to_string(reg.get_ssidv1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv1())) + ")"
        + " " + "ssidv2=" + ::to_string(reg.get_ssidv2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv2())) + ")"
        + " " + "ssidv3=" + ::to_string(reg.get_ssidv3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv3())) + ")"
        + " " + "ssidv4=" + ::to_string(reg.get_ssidv4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv4())) + ")"
        + " " + "ssidv5=" + ::to_string(reg.get_ssidv5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv5())) + ")"
        + " " + "ssidv6=" + ::to_string(reg.get_ssidv6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv6())) + ")"
        + " " + "ssidv7=" + ::to_string(reg.get_ssidv7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv7())) + ")"
        + " " + "ssidv8=" + ::to_string(reg.get_ssidv8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_attr_control_r reg)
{
    return "attrctrl0=" + ::to_string(reg.get_attrctrl0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl0())) + ")"
        + " " + "attrctrl1=" + ::to_string(reg.get_attrctrl1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl1())) + ")"
        + " " + "attrctrl2=" + ::to_string(reg.get_attrctrl2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl2())) + ")"
        + " " + "attrctrl3=" + ::to_string(reg.get_attrctrl3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl3())) + ")"
        + " " + "attrctrl4=" + ::to_string(reg.get_attrctrl4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl4())) + ")"
        + " " + "attrctrl5=" + ::to_string(reg.get_attrctrl5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl5())) + ")"
        + " " + "attrctrl6=" + ::to_string(reg.get_attrctrl6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl6())) + ")"
        + " " + "attrctrl7=" + ::to_string(reg.get_attrctrl7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl7())) + ")"
        + " " + "attrctrl8=" + ::to_string(reg.get_attrctrl8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_memattr_r reg)
{
    return "memattr0=" + ::to_string(reg.get_memattr0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr0())) + ")"
        + " " + "memattr1=" + ::to_string(reg.get_memattr1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr1())) + ")"
        + " " + "memattr2=" + ::to_string(reg.get_memattr2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr2())) + ")"
        + " " + "memattr3=" + ::to_string(reg.get_memattr3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr3())) + ")"
        + " " + "memattr4=" + ::to_string(reg.get_memattr4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr4())) + ")"
        + " " + "memattr5=" + ::to_string(reg.get_memattr5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr5())) + ")"
        + " " + "memattr6=" + ::to_string(reg.get_memattr6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr6())) + ")"
        + " " + "memattr7=" + ::to_string(reg.get_memattr7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr7())) + ")"
        + " " + "memattr8=" + ::to_string(reg.get_memattr8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr8())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_delegation_address_extend_r reg)
{
    return "addressextend0=" + ::to_string(reg.get_addressextend0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend0())) + ")"
        + " " + "addressextend1=" + ::to_string(reg.get_addressextend1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend1())) + ")"
        + " " + "addressextend2=" + ::to_string(reg.get_addressextend2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend2())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream0_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream0_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream0_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream0_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream0_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream0_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream0_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream1_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream1_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream2_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream2_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream3_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream4_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream4_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream4_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream4_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream4_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream4_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream5_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream5_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream5_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream5_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream5_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream5_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream6_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream6_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream6_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream6_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream6_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream6_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream7_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream7_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream7_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream7_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream7_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream7_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_stream8_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(dl3_stream8_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(dl3_stream8_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(dl3_stream8_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(dl3_stream8_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(dl3_stream8_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(dl3_npu_id_r reg)
{
    return "version_status=" + ::to_string(reg.get_version_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_version_status())) + ")"
        + " " + "version_minor=" + std::to_string(reg.get_version_minor())
        + " " + "version_major=" + std::to_string(reg.get_version_major())
        + " " + "product_major=" + std::to_string(reg.get_product_major())
        + " " + "arch_rev=" + std::to_string(reg.get_arch_rev())
        + " " + "arch_minor=" + std::to_string(reg.get_arch_minor())
        + " " + "arch_major=" + std::to_string(reg.get_arch_major());
}

static __attribute__((unused)) std::string to_string(dl3_unit_count_r reg)
{
    return "quad_count=" + std::to_string(reg.get_quad_count())
        + " " + "engines_per_quad=" + std::to_string(reg.get_engines_per_quad())
        + " " + "dfc_emc_per_engine=" + std::to_string(reg.get_dfc_emc_per_engine());
}

static __attribute__((unused)) std::string to_string(dl3_mce_features_r reg)
{
    return "ifm_generated_per_engine=" + std::to_string(reg.get_ifm_generated_per_engine())
        + " " + "ofm_generated_per_engine=" + std::to_string(reg.get_ofm_generated_per_engine())
        + " " + "mce_num_macs=" + std::to_string(reg.get_mce_num_macs())
        + " " + "mce_num_acc=" + std::to_string(reg.get_mce_num_acc())
        + " " + "winograd_support=" + std::to_string(reg.get_winograd_support())
        + " " + "tsu_16bit_sequence_support=" + std::to_string(reg.get_tsu_16bit_sequence_support())
        + " " + "ofm_scaling_16bit_support=" + std::to_string(reg.get_ofm_scaling_16bit_support());
}

static __attribute__((unused)) std::string to_string(dl3_dfc_features_r reg)
{
    return "dfc_mem_size_per_emc=" + std::to_string(reg.get_dfc_mem_size_per_emc())
        + " " + "bank_count=" + std::to_string(reg.get_bank_count())
        + " " + "activation_compression=" + std::to_string(reg.get_activation_compression());
}

static __attribute__((unused)) std::string to_string(dl3_ple_features_r reg)
{
    return "ple_input_mem_size=" + std::to_string(reg.get_ple_input_mem_size())
        + " " + "ple_output_mem_size=" + std::to_string(reg.get_ple_output_mem_size())
        + " " + "ple_vrf_mem_size=" + std::to_string(reg.get_ple_vrf_mem_size())
        + " " + "ple_mem_size=" + std::to_string(reg.get_ple_mem_size());
}

static __attribute__((unused)) std::string to_string(dl3_wd_features_r reg)
{
    return "buffer_size=" + std::to_string(reg.get_buffer_size())
        + " " + "max_dim=" + std::to_string(reg.get_max_dim())
        + " " + "compression_version=" + std::to_string(reg.get_compression_version());
}

static __attribute__((unused)) std::string to_string(dl3_vector_engine_features_r reg)
{
    return "vector_engine_version=" + std::to_string(reg.get_vector_engine_version())
        + " " + "ple_lanes=" + std::to_string(reg.get_ple_lanes());
}

static __attribute__((unused)) std::string to_string(dl3_ecoid_r reg)
{
    return "ecoid=" + std::to_string(reg.get_ecoid());
}

static __attribute__((unused)) std::string to_string(dl3_streamid_width_r reg)
{
    return "mmusid_w=" + std::to_string(reg.get_mmusid_w())
        + " " + "mmussid_w=" + std::to_string(reg.get_mmussid_w());
}

static __attribute__((unused)) std::string to_string(dram_addr_l_r reg)
{
    return "dram_address_l=" + std::to_string(reg.get_dram_address_l());
}

static __attribute__((unused)) std::string to_string(dram_addr_h_r reg)
{
    return "dram_address_h=" + std::to_string(reg.get_dram_address_h());
}

static __attribute__((unused)) std::string to_string(dma_status_r reg)
{
    return "dma_idle=" + std::to_string(reg.get_dma_idle())
        + " " + "rd_cmdq_free=" + std::to_string(reg.get_rd_cmdq_free())
        + " " + "last_rd_id_written=" + std::to_string(reg.get_last_rd_id_written())
        + " " + "last_rd_id_completed=" + std::to_string(reg.get_last_rd_id_completed())
        + " " + "wr_cmdq_free=" + std::to_string(reg.get_wr_cmdq_free())
        + " " + "last_wr_id_written=" + std::to_string(reg.get_last_wr_id_written())
        + " " + "last_wr_id_completed=" + std::to_string(reg.get_last_wr_id_completed());
}

static __attribute__((unused)) std::string to_string(sram_addr_r reg)
{
    return "address=" + std::to_string(reg.get_address())
        + " " + "address_h=" + std::to_string(reg.get_address_h());
}

static __attribute__((unused)) std::string to_string(dma_emcs_r reg)
{
    return "emcs=" + std::to_string(reg.get_emcs());
}

static __attribute__((unused)) std::string to_string(dma_channels_r reg)
{
    return "channels=" + std::to_string(reg.get_channels());
}

static __attribute__((unused)) std::string to_string(dma_rd_cmd_r reg)
{
    return "rd_id=" + std::to_string(reg.get_rd_id())
        + " " + "format=" + ::to_string(reg.get_format()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_format())) + ")"
        + " " + "stream_type=" + ::to_string(reg.get_stream_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_stream_type())) + ")"
        + " " + "int_transfer=" + std::to_string(reg.get_int_transfer())
        + " " + "nhwc16=" + std::to_string(reg.get_nhwc16());
}

static __attribute__((unused)) std::string to_string(dma_wr_cmd_r reg)
{
    return "wr_id=" + std::to_string(reg.get_wr_id())
        + " " + "format=" + ::to_string(reg.get_format()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_format())) + ")"
        + " " + "stream_type=" + ::to_string(reg.get_stream_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_stream_type())) + ")"
        + " " + "int_transfer=" + std::to_string(reg.get_int_transfer())
        + " " + "nhwc16=" + std::to_string(reg.get_nhwc16());
}

static __attribute__((unused)) std::string to_string(dma_stride0_r reg)
{
    return "inner_stride=" + std::to_string(reg.get_inner_stride());
}

static __attribute__((unused)) std::string to_string(dma_stride1_r reg)
{
    return "outer_stride=" + std::to_string(reg.get_outer_stride());
}

static __attribute__((unused)) std::string to_string(dma_stride2_r reg)
{
    return "extra_stride=" + std::to_string(reg.get_extra_stride());
}

static __attribute__((unused)) std::string to_string(dma_stride3_r reg)
{
    return "stride3=" + std::to_string(reg.get_stride3());
}

static __attribute__((unused)) std::string to_string(dma_sram_stride_r reg)
{
    return "sram_group_stride=" + std::to_string(reg.get_sram_group_stride())
        + " " + "sram_row_stride=" + std::to_string(reg.get_sram_row_stride());
}

static __attribute__((unused)) std::string to_string(dma_total_bytes_r reg)
{
    return "total_bytes=" + std::to_string(reg.get_total_bytes());
}

static __attribute__((unused)) std::string to_string(dma_comp_config0_r reg)
{
    return "signed_activations=" + std::to_string(reg.get_signed_activations())
        + " " + "zero_point=" + std::to_string(reg.get_zero_point());
}

static __attribute__((unused)) std::string to_string(stash_address_l_r reg)
{
    return "stream_id=" + ::to_string(reg.get_stream_id()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_stream_id())) + ")"
        + " " + "stash_addr_low=" + std::to_string(reg.get_stash_addr_low());
}

static __attribute__((unused)) std::string to_string(stash_address_h_r reg)
{
    return "stash_addr_hi=" + std::to_string(reg.get_stash_addr_hi());
}

static __attribute__((unused)) std::string to_string(stripe_bank_config_r reg)
{
    return "force_bank=" + ::to_string(reg.get_force_bank()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_force_bank())) + ")";
}

static __attribute__((unused)) std::string to_string(stripe_bank_control_r reg)
{
    return "start=" + std::to_string(reg.get_start());
}

static __attribute__((unused)) std::string to_string(block_bank_config_r reg)
{
    return "force_bank=" + ::to_string(reg.get_force_bank()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_force_bank())) + ")";
}

static __attribute__((unused)) std::string to_string(block_bank_control_r reg)
{
    return "start=" + std::to_string(reg.get_start());
}

static __attribute__((unused)) std::string to_string(ple_mceif_config_r reg)
{
    return "mceif_num_bufs=" + std::to_string(reg.get_mceif_num_bufs())
        + " " + "mceif_buf_size=" + std::to_string(reg.get_mceif_buf_size())
        + " " + "mceif_buf_base=" + std::to_string(reg.get_mceif_buf_base());
}

static __attribute__((unused)) std::string to_string(top_err_cause_r reg)
{
    return "engine_ram_correctable_err=" + std::to_string(reg.get_engine_ram_correctable_err())
        + " " + "engine_ram_uncorrectable_err=" + std::to_string(reg.get_engine_ram_uncorrectable_err())
        + " " + "top_tolerable_ram_err=" + std::to_string(reg.get_top_tolerable_ram_err())
        + " " + "top_recoverable_ram_err=" + std::to_string(reg.get_top_recoverable_ram_err())
        + " " + "mcu_lockup_err=" + std::to_string(reg.get_mcu_lockup_err())
        + " " + "mcu_instr_err=" + std::to_string(reg.get_mcu_instr_err())
        + " " + "mcu_data_read_err=" + std::to_string(reg.get_mcu_data_read_err())
        + " " + "mcu_data_write_err=" + std::to_string(reg.get_mcu_data_write_err())
        + " " + "dma_read_err=" + std::to_string(reg.get_dma_read_err())
        + " " + "dma_write_err=" + std::to_string(reg.get_dma_write_err())
        + " " + "stash_translation_err=" + std::to_string(reg.get_stash_translation_err())
        + " " + "dma_queue_programming_err=" + std::to_string(reg.get_dma_queue_programming_err())
        + " " + "pwrctlr_active_programming_err=" + std::to_string(reg.get_pwrctlr_active_programming_err())
        + " " + "stash_trans_programming_err=" + std::to_string(reg.get_stash_trans_programming_err())
        + " " + "tsu_event_overflow_err=" + std::to_string(reg.get_tsu_event_overflow_err())
        + " " + "stripe_programming_err=" + std::to_string(reg.get_stripe_programming_err())
        + " " + "stripe_write_while_busy_err=" + std::to_string(reg.get_stripe_write_while_busy_err())
        + " " + "block_programming_err=" + std::to_string(reg.get_block_programming_err())
        + " " + "block_write_while_busy_err=" + std::to_string(reg.get_block_write_while_busy_err())
        + " " + "shadow_err=" + std::to_string(reg.get_shadow_err())
        + " " + "engine_func_err=" + std::to_string(reg.get_engine_func_err());
}

static __attribute__((unused)) std::string to_string(top_err_address_r reg)
{
    return "address=" + std::to_string(reg.get_address())
        + " " + "bank=" + std::to_string(reg.get_bank())
        + " " + "ncu_mcu_icache_tag=" + std::to_string(reg.get_ncu_mcu_icache_tag())
        + " " + "ncu_mcu_icache_data=" + std::to_string(reg.get_ncu_mcu_icache_data())
        + " " + "ncu_mcu_dcache_tag=" + std::to_string(reg.get_ncu_mcu_dcache_tag())
        + " " + "ncu_mcu_dcache_data=" + std::to_string(reg.get_ncu_mcu_dcache_data())
        + " " + "dfc_rob=" + std::to_string(reg.get_dfc_rob())
        + " " + "dfc_compressor_sim=" + std::to_string(reg.get_dfc_compressor_sim())
        + " " + "dfc_compressor_rem=" + std::to_string(reg.get_dfc_compressor_rem())
        + " " + "dfc_compressor_unary=" + std::to_string(reg.get_dfc_compressor_unary())
        + " " + "dfc_decompressor=" + std::to_string(reg.get_dfc_decompressor())
        + " " + "err_multi=" + std::to_string(reg.get_err_multi())
        + " " + "err_uncorrected=" + std::to_string(reg.get_err_uncorrected());
}

static __attribute__((unused)) std::string to_string(pmcr_r reg)
{
    return "cnt_en=" + std::to_string(reg.get_cnt_en())
        + " " + "event_cnt_rst=" + std::to_string(reg.get_event_cnt_rst())
        + " " + "cycle_cnt_rst=" + std::to_string(reg.get_cycle_cnt_rst())
        + " " + "clk_div=" + std::to_string(reg.get_clk_div())
        + " " + "export_events=" + std::to_string(reg.get_export_events())
        + " " + "disable_cycle_cnt=" + std::to_string(reg.get_disable_cycle_cnt())
        + " " + "long_cycle_cnt=" + std::to_string(reg.get_long_cycle_cnt())
        + " " + "num_counters=" + std::to_string(reg.get_num_counters())
        + " " + "read_stream_type=" + std::to_string(reg.get_read_stream_type())
        + " " + "write_stream_type=" + std::to_string(reg.get_write_stream_type())
        + " " + "stash_lat_en=" + std::to_string(reg.get_stash_lat_en());
}

static __attribute__((unused)) std::string to_string(pmcntenset_r reg)
{
    return "event_cnt_0=" + std::to_string(reg.get_event_cnt_0())
        + " " + "event_cnt_1=" + std::to_string(reg.get_event_cnt_1())
        + " " + "event_cnt_2=" + std::to_string(reg.get_event_cnt_2())
        + " " + "event_cnt_3=" + std::to_string(reg.get_event_cnt_3())
        + " " + "event_cnt_4=" + std::to_string(reg.get_event_cnt_4())
        + " " + "event_cnt_5=" + std::to_string(reg.get_event_cnt_5())
        + " " + "cycle_cnt=" + std::to_string(reg.get_cycle_cnt());
}

static __attribute__((unused)) std::string to_string(pmcntenclr_r reg)
{
    return "event_cnt_0=" + std::to_string(reg.get_event_cnt_0())
        + " " + "event_cnt_1=" + std::to_string(reg.get_event_cnt_1())
        + " " + "event_cnt_2=" + std::to_string(reg.get_event_cnt_2())
        + " " + "event_cnt_3=" + std::to_string(reg.get_event_cnt_3())
        + " " + "event_cnt_4=" + std::to_string(reg.get_event_cnt_4())
        + " " + "event_cnt_5=" + std::to_string(reg.get_event_cnt_5())
        + " " + "cycle_cnt=" + std::to_string(reg.get_cycle_cnt());
}

static __attribute__((unused)) std::string to_string(pmovsset_r reg)
{
    return "event_cnt_0_ovf=" + std::to_string(reg.get_event_cnt_0_ovf())
        + " " + "event_cnt_1_ovf=" + std::to_string(reg.get_event_cnt_1_ovf())
        + " " + "event_cnt_2_ovf=" + std::to_string(reg.get_event_cnt_2_ovf())
        + " " + "event_cnt_3_ovf=" + std::to_string(reg.get_event_cnt_3_ovf())
        + " " + "event_cnt_4_ovf=" + std::to_string(reg.get_event_cnt_4_ovf())
        + " " + "event_cnt_5_ovf=" + std::to_string(reg.get_event_cnt_5_ovf())
        + " " + "cycle_cnt_ovf=" + std::to_string(reg.get_cycle_cnt_ovf());
}

static __attribute__((unused)) std::string to_string(pmovsclr_r reg)
{
    return "event_cnt_0_ovf=" + std::to_string(reg.get_event_cnt_0_ovf())
        + " " + "event_cnt_1_ovf=" + std::to_string(reg.get_event_cnt_1_ovf())
        + " " + "event_cnt_2_ovf=" + std::to_string(reg.get_event_cnt_2_ovf())
        + " " + "event_cnt_3_ovf=" + std::to_string(reg.get_event_cnt_3_ovf())
        + " " + "event_cnt_4_ovf=" + std::to_string(reg.get_event_cnt_4_ovf())
        + " " + "event_cnt_5_ovf=" + std::to_string(reg.get_event_cnt_5_ovf())
        + " " + "cycle_cnt_ovf=" + std::to_string(reg.get_cycle_cnt_ovf());
}

static __attribute__((unused)) std::string to_string(pmintenset_r reg)
{
    return "event_cnt_0_int=" + std::to_string(reg.get_event_cnt_0_int())
        + " " + "event_cnt_1_int=" + std::to_string(reg.get_event_cnt_1_int())
        + " " + "event_cnt_2_int=" + std::to_string(reg.get_event_cnt_2_int())
        + " " + "event_cnt_3_int=" + std::to_string(reg.get_event_cnt_3_int())
        + " " + "event_cnt_4_int=" + std::to_string(reg.get_event_cnt_4_int())
        + " " + "event_cnt_5_int=" + std::to_string(reg.get_event_cnt_5_int())
        + " " + "cycle_cnt_int=" + std::to_string(reg.get_cycle_cnt_int());
}

static __attribute__((unused)) std::string to_string(pmintenclr_r reg)
{
    return "event_cnt_0_int=" + std::to_string(reg.get_event_cnt_0_int())
        + " " + "event_cnt_1_int=" + std::to_string(reg.get_event_cnt_1_int())
        + " " + "event_cnt_2_int=" + std::to_string(reg.get_event_cnt_2_int())
        + " " + "event_cnt_3_int=" + std::to_string(reg.get_event_cnt_3_int())
        + " " + "event_cnt_4_int=" + std::to_string(reg.get_event_cnt_4_int())
        + " " + "event_cnt_5_int=" + std::to_string(reg.get_event_cnt_5_int())
        + " " + "cycle_cnt_int=" + std::to_string(reg.get_cycle_cnt_int());
}

static __attribute__((unused)) std::string to_string(pmccntr_lo_r reg)
{
    return "cycle_cnt_lo=" + std::to_string(reg.get_cycle_cnt_lo());
}

static __attribute__((unused)) std::string to_string(pmccntr_hi_r reg)
{
    return "cycle_cnt_hi=" + std::to_string(reg.get_cycle_cnt_hi());
}

static __attribute__((unused)) std::string to_string(pmevcntr0_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevcntr1_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevcntr2_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevcntr3_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevcntr4_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevcntr5_r reg)
{
    return "event_cnt=" + std::to_string(reg.get_event_cnt());
}

static __attribute__((unused)) std::string to_string(pmevtyper0_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(pmevtyper1_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(pmevtyper2_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(pmevtyper3_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(pmevtyper4_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(pmevtyper5_r reg)
{
    return "event_type=" + std::to_string(reg.get_event_type())
        + " " + "top_event_type=" + ::to_string(reg.get_top_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_top_event_type())) + ")"
        + " " + "engine_event_type=" + ::to_string(reg.get_engine_event_type()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_engine_event_type())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_ext_access_control_r reg)
{
    return "excctlr=" + std::to_string(reg.get_excctlr())
        + " " + "ramctlr=" + std::to_string(reg.get_ramctlr())
        + " " + "dbgctlr=" + std::to_string(reg.get_dbgctlr())
        + " " + "excctlr_ns_allowed=" + std::to_string(reg.get_excctlr_ns_allowed())
        + " " + "ramctlr_ns_allowed=" + std::to_string(reg.get_ramctlr_ns_allowed())
        + " " + "dbgctlr_ns_allowed=" + std::to_string(reg.get_dbgctlr_ns_allowed());
}

static __attribute__((unused)) std::string to_string(sec_delegation_r reg)
{
    return "secctlr=" + ::to_string(reg.get_secctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secctlr())) + ")"
        + " " + "secmcuctlr=" + ::to_string(reg.get_secmcuctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_secmcuctlr())) + ")"
        + " " + "sysctlr=" + ::to_string(reg.get_sysctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sysctlr())) + ")"
        + " " + "pwrctlr=" + ::to_string(reg.get_pwrctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_pwrctlr())) + ")"
        + " " + "auxctlr=" + ::to_string(reg.get_auxctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_auxctlr())) + ")"
        + " " + "excctlr=" + ::to_string(reg.get_excctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_excctlr())) + ")"
        + " " + "ramctlr=" + ::to_string(reg.get_ramctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ramctlr())) + ")"
        + " " + "dbgctlr=" + ::to_string(reg.get_dbgctlr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dbgctlr())) + ")"
        + " " + "err=" + ::to_string(reg.get_err()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_err())) + ")"
        + " " + "debug=" + ::to_string(reg.get_debug()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_debug())) + ")"
        + " " + "job=" + ::to_string(reg.get_job()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_job())) + ")"
        + " " + "event=" + ::to_string(reg.get_event()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_event())) + ")"
        + " " + "interrupt=" + ::to_string(reg.get_interrupt()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_interrupt())) + ")"
        + " " + "nmi=" + ::to_string(reg.get_nmi()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nmi())) + ")"
        + " " + "irq=" + ::to_string(reg.get_irq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_irq())) + ")"
        + " " + "intext=" + ::to_string(reg.get_intext()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_intext())) + ")"
        + " " + "gp0=" + ::to_string(reg.get_gp0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp0())) + ")"
        + " " + "gp1=" + ::to_string(reg.get_gp1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp1())) + ")"
        + " " + "gp2=" + ::to_string(reg.get_gp2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp2())) + ")"
        + " " + "gp3=" + ::to_string(reg.get_gp3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp3())) + ")"
        + " " + "gp4=" + ::to_string(reg.get_gp4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp4())) + ")"
        + " " + "gp5=" + ::to_string(reg.get_gp5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp5())) + ")"
        + " " + "gp6=" + ::to_string(reg.get_gp6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp6())) + ")"
        + " " + "gp7=" + ::to_string(reg.get_gp7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_gp7())) + ")"
        + " " + "dfcot=" + ::to_string(reg.get_dfcot()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dfcot())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_secctlr_r reg)
{
    return "ns_allowed=" + std::to_string(reg.get_ns_allowed())
        + " " + "npu_ns_mode=" + std::to_string(reg.get_npu_ns_mode())
        + " " + "ext_ns_evnt_to_s_evnt=" + std::to_string(reg.get_ext_ns_evnt_to_s_evnt())
        + " " + "ext_ns_irq_to_s_irq=" + std::to_string(reg.get_ext_ns_irq_to_s_irq())
        + " " + "ext_s_evnt_to_ns_evnt=" + std::to_string(reg.get_ext_s_evnt_to_ns_evnt())
        + " " + "ext_s_evnt_to_ns_irq=" + std::to_string(reg.get_ext_s_evnt_to_ns_irq());
}

static __attribute__((unused)) std::string to_string(sec_secmcuctlr_r reg)
{
    return "mcu_state=" + std::to_string(reg.get_mcu_state());
}

static __attribute__((unused)) std::string to_string(sec_sysctlr0_r reg)
{
    return "cpuwait=" + std::to_string(reg.get_cpuwait())
        + " " + "lockup=" + std::to_string(reg.get_lockup())
        + " " + "halted=" + std::to_string(reg.get_halted())
        + " " + "rstreq=" + std::to_string(reg.get_rstreq())
        + " " + "sleeping=" + std::to_string(reg.get_sleeping())
        + " " + "initvtor=" + std::to_string(reg.get_initvtor())
        + " " + "soft_rstreq=" + ::to_string(reg.get_soft_rstreq()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_soft_rstreq())) + ")"
        + " " + "hard_rstreq=" + std::to_string(reg.get_hard_rstreq());
}

static __attribute__((unused)) std::string to_string(sec_sysctlr1_r reg)
{
    return "mcu_setevnt=" + std::to_string(reg.get_mcu_setevnt())
        + " " + "mcu_setirq=" + std::to_string(reg.get_mcu_setirq())
        + " " + "mcu_gpevnt=" + std::to_string(reg.get_mcu_gpevnt())
        + " " + "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "txev_ple=" + std::to_string(reg.get_txev_ple())
        + " " + "txev_dbg=" + std::to_string(reg.get_txev_dbg())
        + " " + "rxev_degroup=" + std::to_string(reg.get_rxev_degroup())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "err_tolr_evnt=" + std::to_string(reg.get_err_tolr_evnt())
        + " " + "err_tolr_irq=" + std::to_string(reg.get_err_tolr_irq())
        + " " + "err_func_irq=" + std::to_string(reg.get_err_func_irq())
        + " " + "err_recv_irq=" + std::to_string(reg.get_err_recv_irq());
}

static __attribute__((unused)) std::string to_string(sec_pwrctlr_r reg)
{
    return "active=" + std::to_string(reg.get_active())
        + " " + "qreqn=" + std::to_string(reg.get_qreqn());
}

static __attribute__((unused)) std::string to_string(sec_auxctlr_r reg)
{
    return "dis_clkgate=" + std::to_string(reg.get_dis_clkgate())
        + " " + "dis_qdeny=" + std::to_string(reg.get_dis_qdeny())
        + " " + "dis_edgeirq=" + std::to_string(reg.get_dis_edgeirq())
        + " " + "dis_mcu_unique_rid=" + std::to_string(reg.get_dis_mcu_unique_rid())
        + " " + "dis_stshtrnsltn=" + std::to_string(reg.get_dis_stshtrnsltn())
        + " " + "increase_outstanding_writes=" + std::to_string(reg.get_increase_outstanding_writes())
        + " " + "dbgen=" + std::to_string(reg.get_dbgen())
        + " " + "niden=" + std::to_string(reg.get_niden())
        + " " + "dis_ext_err_unrecoverable=" + std::to_string(reg.get_dis_ext_err_unrecoverable())
        + " " + "dis_ext_err_recoverable=" + std::to_string(reg.get_dis_ext_err_recoverable())
        + " " + "dis_ext_err_functional=" + std::to_string(reg.get_dis_ext_err_functional())
        + " " + "dis_ext_err_tolerable=" + std::to_string(reg.get_dis_ext_err_tolerable())
        + " " + "dis_non_broadcast_global_err=" + std::to_string(reg.get_dis_non_broadcast_global_err())
        + " " + "en_ple_block_done=" + std::to_string(reg.get_en_ple_block_done())
        + " " + "mac_ramp_cycles=" + ::to_string(reg.get_mac_ramp_cycles()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mac_ramp_cycles())) + ")"
        + " " + "snoop_dis=" + std::to_string(reg.get_snoop_dis())
        + " " + "wd_ramp_dis=" + std::to_string(reg.get_wd_ramp_dis())
        + " " + "stash_ahead=" + std::to_string(reg.get_stash_ahead())
        + " " + "stash_issue=" + std::to_string(reg.get_stash_issue());
}

static __attribute__((unused)) std::string to_string(sec_setirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(sec_clrirq_ext_r reg)
{
    return "err=" + std::to_string(reg.get_err())
        + " " + "debug=" + std::to_string(reg.get_debug())
        + " " + "job=" + std::to_string(reg.get_job());
}

static __attribute__((unused)) std::string to_string(sec_setirq_int_r reg)
{
    return "event=" + std::to_string(reg.get_event())
        + " " + "interrupt=" + std::to_string(reg.get_interrupt())
        + " " + "nmi=" + std::to_string(reg.get_nmi());
}

static __attribute__((unused)) std::string to_string(sec_dfc_slv_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(sec_dfc_slv_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(sec_dfc_mst_ord_r reg)
{
    return "out_reads=" + std::to_string(reg.get_out_reads());
}

static __attribute__((unused)) std::string to_string(sec_dfc_mst_owr_r reg)
{
    return "out_writes=" + std::to_string(reg.get_out_writes());
}

static __attribute__((unused)) std::string to_string(sec_irq_status_r reg)
{
    return "setirq_err=" + std::to_string(reg.get_setirq_err())
        + " " + "setirq_dbg=" + std::to_string(reg.get_setirq_dbg())
        + " " + "setirq_job=" + std::to_string(reg.get_setirq_job())
        + " " + "tsu_dbg=" + std::to_string(reg.get_tsu_dbg())
        + " " + "pmu_dbg=" + std::to_string(reg.get_pmu_dbg())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(sec_int_status_r reg)
{
    return "tsu_evnt=" + std::to_string(reg.get_tsu_evnt())
        + " " + "tsu_irq=" + std::to_string(reg.get_tsu_irq())
        + " " + "rxev_evnt=" + std::to_string(reg.get_rxev_evnt())
        + " " + "rxev_irq=" + std::to_string(reg.get_rxev_irq())
        + " " + "pmu_evnt=" + std::to_string(reg.get_pmu_evnt())
        + " " + "pmu_irq=" + std::to_string(reg.get_pmu_irq())
        + " " + "pmu_eng=" + std::to_string(reg.get_pmu_eng())
        + " " + "tol_err=" + std::to_string(reg.get_tol_err())
        + " " + "func_err=" + std::to_string(reg.get_func_err())
        + " " + "rec_err=" + std::to_string(reg.get_rec_err())
        + " " + "unrec_err=" + std::to_string(reg.get_unrec_err());
}

static __attribute__((unused)) std::string to_string(sec_ext_status_r reg)
{
    return "setirq_evnt=" + std::to_string(reg.get_setirq_evnt())
        + " " + "setirq_irq=" + std::to_string(reg.get_setirq_irq())
        + " " + "gp_evnt=" + std::to_string(reg.get_gp_evnt());
}

static __attribute__((unused)) std::string to_string(sec_gp0_r reg)
{
    return "gp0=" + std::to_string(reg.get_gp0());
}

static __attribute__((unused)) std::string to_string(sec_gp1_r reg)
{
    return "gp1=" + std::to_string(reg.get_gp1());
}

static __attribute__((unused)) std::string to_string(sec_gp2_r reg)
{
    return "gp2=" + std::to_string(reg.get_gp2());
}

static __attribute__((unused)) std::string to_string(sec_gp3_r reg)
{
    return "gp3=" + std::to_string(reg.get_gp3());
}

static __attribute__((unused)) std::string to_string(sec_gp4_r reg)
{
    return "gp4=" + std::to_string(reg.get_gp4());
}

static __attribute__((unused)) std::string to_string(sec_gp5_r reg)
{
    return "gp5=" + std::to_string(reg.get_gp5());
}

static __attribute__((unused)) std::string to_string(sec_gp6_r reg)
{
    return "gp6=" + std::to_string(reg.get_gp6());
}

static __attribute__((unused)) std::string to_string(sec_gp7_r reg)
{
    return "gp7=" + std::to_string(reg.get_gp7());
}

static __attribute__((unused)) std::string to_string(sec_delegation_stream_security_r reg)
{
    return "mmusecsid0=" + ::to_string(reg.get_mmusecsid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid0())) + ")"
        + " " + "protns0=" + ::to_string(reg.get_protns0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns0())) + ")"
        + " " + "mmusecsid1=" + ::to_string(reg.get_mmusecsid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid1())) + ")"
        + " " + "protns1=" + ::to_string(reg.get_protns1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns1())) + ")"
        + " " + "mmusecsid2=" + ::to_string(reg.get_mmusecsid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid2())) + ")"
        + " " + "protns2=" + ::to_string(reg.get_protns2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns2())) + ")"
        + " " + "mmusecsid3=" + ::to_string(reg.get_mmusecsid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid3())) + ")"
        + " " + "protns3=" + ::to_string(reg.get_protns3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns3())) + ")"
        + " " + "mmusecsid4=" + ::to_string(reg.get_mmusecsid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid4())) + ")"
        + " " + "protns4=" + ::to_string(reg.get_protns4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns4())) + ")"
        + " " + "mmusecsid5=" + ::to_string(reg.get_mmusecsid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid5())) + ")"
        + " " + "protns5=" + ::to_string(reg.get_protns5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns5())) + ")"
        + " " + "mmusecsid6=" + ::to_string(reg.get_mmusecsid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid6())) + ")"
        + " " + "protns6=" + ::to_string(reg.get_protns6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns6())) + ")"
        + " " + "mmusecsid7=" + ::to_string(reg.get_mmusecsid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid7())) + ")"
        + " " + "protns7=" + ::to_string(reg.get_protns7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns7())) + ")"
        + " " + "mmusecsid8=" + ::to_string(reg.get_mmusecsid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mmusecsid8())) + ")"
        + " " + "protns8=" + ::to_string(reg.get_protns8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_protns8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_nsaid_r reg)
{
    return "nsaid0=" + ::to_string(reg.get_nsaid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid0())) + ")"
        + " " + "nsaid1=" + ::to_string(reg.get_nsaid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid1())) + ")"
        + " " + "nsaid2=" + ::to_string(reg.get_nsaid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid2())) + ")"
        + " " + "nsaid3=" + ::to_string(reg.get_nsaid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid3())) + ")"
        + " " + "nsaid4=" + ::to_string(reg.get_nsaid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid4())) + ")"
        + " " + "nsaid5=" + ::to_string(reg.get_nsaid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid5())) + ")"
        + " " + "nsaid6=" + ::to_string(reg.get_nsaid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid6())) + ")"
        + " " + "nsaid7=" + ::to_string(reg.get_nsaid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid7())) + ")"
        + " " + "nsaid8=" + ::to_string(reg.get_nsaid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_nsaid8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_mmusid_r reg)
{
    return "sid0=" + ::to_string(reg.get_sid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid0())) + ")"
        + " " + "sid1=" + ::to_string(reg.get_sid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid1())) + ")"
        + " " + "sid2=" + ::to_string(reg.get_sid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid2())) + ")"
        + " " + "sid3=" + ::to_string(reg.get_sid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid3())) + ")"
        + " " + "sid4=" + ::to_string(reg.get_sid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid4())) + ")"
        + " " + "sid5=" + ::to_string(reg.get_sid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid5())) + ")"
        + " " + "sid6=" + ::to_string(reg.get_sid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid6())) + ")"
        + " " + "sid7=" + ::to_string(reg.get_sid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid7())) + ")"
        + " " + "sid8=" + ::to_string(reg.get_sid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_sid8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_mmussid_r reg)
{
    return "ssid0=" + ::to_string(reg.get_ssid0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid0())) + ")"
        + " " + "ssid1=" + ::to_string(reg.get_ssid1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid1())) + ")"
        + " " + "ssid2=" + ::to_string(reg.get_ssid2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid2())) + ")"
        + " " + "ssid3=" + ::to_string(reg.get_ssid3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid3())) + ")"
        + " " + "ssid4=" + ::to_string(reg.get_ssid4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid4())) + ")"
        + " " + "ssid5=" + ::to_string(reg.get_ssid5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid5())) + ")"
        + " " + "ssid6=" + ::to_string(reg.get_ssid6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid6())) + ")"
        + " " + "ssid7=" + ::to_string(reg.get_ssid7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid7())) + ")"
        + " " + "ssid8=" + ::to_string(reg.get_ssid8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssid8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_mmussidv_r reg)
{
    return "ssidv0=" + ::to_string(reg.get_ssidv0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv0())) + ")"
        + " " + "ssidv1=" + ::to_string(reg.get_ssidv1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv1())) + ")"
        + " " + "ssidv2=" + ::to_string(reg.get_ssidv2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv2())) + ")"
        + " " + "ssidv3=" + ::to_string(reg.get_ssidv3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv3())) + ")"
        + " " + "ssidv4=" + ::to_string(reg.get_ssidv4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv4())) + ")"
        + " " + "ssidv5=" + ::to_string(reg.get_ssidv5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv5())) + ")"
        + " " + "ssidv6=" + ::to_string(reg.get_ssidv6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv6())) + ")"
        + " " + "ssidv7=" + ::to_string(reg.get_ssidv7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv7())) + ")"
        + " " + "ssidv8=" + ::to_string(reg.get_ssidv8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ssidv8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_attr_control_r reg)
{
    return "attrctrl0=" + ::to_string(reg.get_attrctrl0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl0())) + ")"
        + " " + "attrctrl1=" + ::to_string(reg.get_attrctrl1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl1())) + ")"
        + " " + "attrctrl2=" + ::to_string(reg.get_attrctrl2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl2())) + ")"
        + " " + "attrctrl3=" + ::to_string(reg.get_attrctrl3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl3())) + ")"
        + " " + "attrctrl4=" + ::to_string(reg.get_attrctrl4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl4())) + ")"
        + " " + "attrctrl5=" + ::to_string(reg.get_attrctrl5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl5())) + ")"
        + " " + "attrctrl6=" + ::to_string(reg.get_attrctrl6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl6())) + ")"
        + " " + "attrctrl7=" + ::to_string(reg.get_attrctrl7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl7())) + ")"
        + " " + "attrctrl8=" + ::to_string(reg.get_attrctrl8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_attrctrl8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_memattr_r reg)
{
    return "memattr0=" + ::to_string(reg.get_memattr0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr0())) + ")"
        + " " + "memattr1=" + ::to_string(reg.get_memattr1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr1())) + ")"
        + " " + "memattr2=" + ::to_string(reg.get_memattr2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr2())) + ")"
        + " " + "memattr3=" + ::to_string(reg.get_memattr3()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr3())) + ")"
        + " " + "memattr4=" + ::to_string(reg.get_memattr4()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr4())) + ")"
        + " " + "memattr5=" + ::to_string(reg.get_memattr5()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr5())) + ")"
        + " " + "memattr6=" + ::to_string(reg.get_memattr6()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr6())) + ")"
        + " " + "memattr7=" + ::to_string(reg.get_memattr7()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr7())) + ")"
        + " " + "memattr8=" + ::to_string(reg.get_memattr8()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr8())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_delegation_address_extend_r reg)
{
    return "addressextend0=" + ::to_string(reg.get_addressextend0()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend0())) + ")"
        + " " + "addressextend1=" + ::to_string(reg.get_addressextend1()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend1())) + ")"
        + " " + "addressextend2=" + ::to_string(reg.get_addressextend2()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_addressextend2())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream0_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream0_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream0_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream0_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream0_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream0_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream0_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(sec_stream1_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream1_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream1_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream1_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream1_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream1_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream1_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(sec_stream2_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream2_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream2_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream2_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream2_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream2_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream2_address_extend_r reg)
{
    return "addrextend=" + std::to_string(reg.get_addrextend());
}

static __attribute__((unused)) std::string to_string(sec_stream3_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream3_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream3_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream3_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream3_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream3_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream4_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream4_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream4_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream4_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream4_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream4_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream5_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream5_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream5_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream5_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream5_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream5_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream6_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream6_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream6_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream6_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream6_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream6_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream7_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream7_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream7_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream7_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream7_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream7_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_stream8_stream_security_r reg)
{
    return "mmusecsid=" + std::to_string(reg.get_mmusecsid())
        + " " + "protns=" + std::to_string(reg.get_protns());
}

static __attribute__((unused)) std::string to_string(sec_stream8_nsaid_r reg)
{
    return "nsaid=" + std::to_string(reg.get_nsaid());
}

static __attribute__((unused)) std::string to_string(sec_stream8_mmusid_r reg)
{
    return "mmusid=" + std::to_string(reg.get_mmusid());
}

static __attribute__((unused)) std::string to_string(sec_stream8_mmussid_r reg)
{
    return "mmussid=" + std::to_string(reg.get_mmussid())
        + " " + "mmussidv=" + std::to_string(reg.get_mmussidv());
}

static __attribute__((unused)) std::string to_string(sec_stream8_attr_control_r reg)
{
    return "attrlocked=" + std::to_string(reg.get_attrlocked());
}

static __attribute__((unused)) std::string to_string(sec_stream8_memattr_r reg)
{
    return "memattr=" + ::to_string(reg.get_memattr()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_memattr())) + ")";
}

static __attribute__((unused)) std::string to_string(sec_npu_id_r reg)
{
    return "version_status=" + ::to_string(reg.get_version_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_version_status())) + ")"
        + " " + "version_minor=" + std::to_string(reg.get_version_minor())
        + " " + "version_major=" + std::to_string(reg.get_version_major())
        + " " + "product_major=" + std::to_string(reg.get_product_major())
        + " " + "arch_rev=" + std::to_string(reg.get_arch_rev())
        + " " + "arch_minor=" + std::to_string(reg.get_arch_minor())
        + " " + "arch_major=" + std::to_string(reg.get_arch_major());
}

static __attribute__((unused)) std::string to_string(sec_unit_count_r reg)
{
    return "quad_count=" + std::to_string(reg.get_quad_count())
        + " " + "engines_per_quad=" + std::to_string(reg.get_engines_per_quad())
        + " " + "dfc_emc_per_engine=" + std::to_string(reg.get_dfc_emc_per_engine());
}

static __attribute__((unused)) std::string to_string(sec_mce_features_r reg)
{
    return "ifm_generated_per_engine=" + std::to_string(reg.get_ifm_generated_per_engine())
        + " " + "ofm_generated_per_engine=" + std::to_string(reg.get_ofm_generated_per_engine())
        + " " + "mce_num_macs=" + std::to_string(reg.get_mce_num_macs())
        + " " + "mce_num_acc=" + std::to_string(reg.get_mce_num_acc())
        + " " + "winograd_support=" + std::to_string(reg.get_winograd_support())
        + " " + "tsu_16bit_sequence_support=" + std::to_string(reg.get_tsu_16bit_sequence_support())
        + " " + "ofm_scaling_16bit_support=" + std::to_string(reg.get_ofm_scaling_16bit_support());
}

static __attribute__((unused)) std::string to_string(sec_dfc_features_r reg)
{
    return "dfc_mem_size_per_emc=" + std::to_string(reg.get_dfc_mem_size_per_emc())
        + " " + "bank_count=" + std::to_string(reg.get_bank_count())
        + " " + "activation_compression=" + std::to_string(reg.get_activation_compression());
}

static __attribute__((unused)) std::string to_string(sec_ple_features_r reg)
{
    return "ple_input_mem_size=" + std::to_string(reg.get_ple_input_mem_size())
        + " " + "ple_output_mem_size=" + std::to_string(reg.get_ple_output_mem_size())
        + " " + "ple_vrf_mem_size=" + std::to_string(reg.get_ple_vrf_mem_size())
        + " " + "ple_mem_size=" + std::to_string(reg.get_ple_mem_size());
}

static __attribute__((unused)) std::string to_string(sec_wd_features_r reg)
{
    return "buffer_size=" + std::to_string(reg.get_buffer_size())
        + " " + "max_dim=" + std::to_string(reg.get_max_dim())
        + " " + "compression_version=" + std::to_string(reg.get_compression_version());
}

static __attribute__((unused)) std::string to_string(sec_vector_engine_features_r reg)
{
    return "vector_engine_version=" + std::to_string(reg.get_vector_engine_version())
        + " " + "ple_lanes=" + std::to_string(reg.get_ple_lanes());
}

static __attribute__((unused)) std::string to_string(sec_ecoid_r reg)
{
    return "ecoid=" + std::to_string(reg.get_ecoid());
}

static __attribute__((unused)) std::string to_string(sec_streamid_width_r reg)
{
    return "mmusid_w=" + std::to_string(reg.get_mmusid_w())
        + " " + "mmussid_w=" + std::to_string(reg.get_mmussid_w());
}

static __attribute__((unused)) std::string to_string(stripe_bank_status_r reg)
{
    return "bank_busy=" + std::to_string(reg.get_bank_busy())
        + " " + "current_bank=" + std::to_string(reg.get_current_bank())
        + " " + "bank0_status=" + ::to_string(reg.get_bank0_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank0_status())) + ")"
        + " " + "bank1_status=" + ::to_string(reg.get_bank1_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank1_status())) + ")";
}

static __attribute__((unused)) std::string to_string(block_bank_status_r reg)
{
    return "bank_busy=" + std::to_string(reg.get_bank_busy())
        + " " + "current_bank=" + std::to_string(reg.get_current_bank())
        + " " + "bank0_status=" + ::to_string(reg.get_bank0_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank0_status())) + ")"
        + " " + "bank1_status=" + ::to_string(reg.get_bank1_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank1_status())) + ")"
        + " " + "bank2_status=" + ::to_string(reg.get_bank2_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank2_status())) + ")"
        + " " + "bank3_status=" + ::to_string(reg.get_bank3_status()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_bank3_status())) + ")";
}

static __attribute__((unused)) std::string to_string(tsu_control_r reg)
{
    return "tsu_block_issue_dis=" + std::to_string(reg.get_tsu_block_issue_dis());
}

static __attribute__((unused)) std::string to_string(tsu_event_r reg)
{
    return "ple_buffer_freed=" + ::to_string(reg.get_ple_buffer_freed()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_buffer_freed())) + ")"
        + " " + "ple_layer_done=" + ::to_string(reg.get_ple_layer_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_layer_done())) + ")"
        + " " + "ple_stripe_done=" + ::to_string(reg.get_ple_stripe_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_stripe_done())) + ")"
        + " " + "ple_block_done=" + ::to_string(reg.get_ple_block_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_block_done())) + ")"
        + " " + "udma_or_clear_done=" + ::to_string(reg.get_udma_or_clear_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_udma_or_clear_done())) + ")"
        + " " + "dma_done=" + ::to_string(reg.get_dma_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dma_done())) + ")"
        + " " + "mce_stripe_done=" + ::to_string(reg.get_mce_stripe_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mce_stripe_done())) + ")"
        + " " + "mce_block_done=" + ::to_string(reg.get_mce_block_done()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mce_block_done())) + ")";
}

static __attribute__((unused)) std::string to_string(tsu_event_msk_r reg)
{
    return "ple_buffer_freed_mask=" + ::to_string(reg.get_ple_buffer_freed_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_buffer_freed_mask())) + ")"
        + " " + "ple_layer_done_mask=" + ::to_string(reg.get_ple_layer_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_layer_done_mask())) + ")"
        + " " + "ple_stripe_done_mask=" + ::to_string(reg.get_ple_stripe_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_stripe_done_mask())) + ")"
        + " " + "ple_block_done_mask=" + ::to_string(reg.get_ple_block_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_ple_block_done_mask())) + ")"
        + " " + "udma_or_clear_done_mask=" + ::to_string(reg.get_udma_or_clear_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_udma_or_clear_done_mask())) + ")"
        + " " + "dma_done_mask=" + ::to_string(reg.get_dma_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_dma_done_mask())) + ")"
        + " " + "mce_stripe_done_mask=" + ::to_string(reg.get_mce_stripe_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mce_stripe_done_mask())) + ")"
        + " " + "mce_block_done_mask=" + ::to_string(reg.get_mce_block_done_mask()) + "(" + std::to_string(static_cast<uint32_t>(reg.get_mce_block_done_mask())) + ")";
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine0_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine1_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine2_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine3_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine4_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine5_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine6_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string to_string(tsu_debug_counters_engine7_r reg)
{
    return "ple_block_done_event_count=" + std::to_string(reg.get_ple_block_done_event_count())
        + " " + "ple_layer_done_event_count=" + std::to_string(reg.get_ple_layer_done_event_count())
        + " " + "ple_mcu_txev_event_count=" + std::to_string(reg.get_ple_mcu_txev_event_count())
        + " " + "ple_buffer_freed_count=" + std::to_string(reg.get_ple_buffer_freed_count())
        + " " + "mce_block_done_event_count=" + std::to_string(reg.get_mce_block_done_event_count())
        + " " + "ple_stripe_done_event_count=" + std::to_string(reg.get_ple_stripe_done_event_count())
        + " " + "mce_stripe_done_event_count=" + std::to_string(reg.get_mce_stripe_done_event_count());
}

static __attribute__((unused)) std::string address_to_string(uint32_t addr, uint32_t val)
{
   uint32_t page = (addr >> REGPAGE_SHIFT) & REGPAGE_MASK;
   uint32_t offset = (addr >> REGOFFSET_SHIFT) & REGOFFSET_MASK;
   switch (page)
    {        case CE_RP:
        {
            switch (offset)
            {
                case CE_CE_ENABLES:
                    return "CE.CE_ENABLES: " + ::to_string(ce_enables_r(val));
                case CE_CE_STATUS:
                    return "CE.CE_STATUS: " + ::to_string(ce_status_r(val));
                case CE_CE_SETIRQ:
                    return "CE.CE_SETIRQ: " + ::to_string(ce_setirq_r(val));
                case CE_CE_INST:
                    return "CE.CE_INST: " + ::to_string(ce_inst_r(val));
                case CE_CE_ID:
                    return "CE.CE_ID: " + ::to_string(ce_id_r(val));
                case CE_CE_ERR_CAUSE:
                    return "CE.CE_ERR_CAUSE: " + ::to_string(ce_err_cause_r(val));
                case CE_CE_ERR_ADDRESS:
                    return "CE.CE_ERR_ADDRESS: " + ::to_string(ce_err_address_r(val));
                case CE_PLE_CONTROL_0:
                    return "CE.PLE_CONTROL_0: " + ::to_string(ple_control_0_r(val));
                case CE_PLE_CONTROL_1:
                    return "CE.PLE_CONTROL_1: " + ::to_string(ple_control_1_r(val));
                case CE_PLE_STATUS:
                    return "CE.PLE_STATUS: " + ::to_string(ple_status_r(val));
                case CE_PLE_SETIRQ:
                    return "CE.PLE_SETIRQ: " + ::to_string(ple_setirq_r(val));
                case CE_PLE_UDMA_LOAD_PARAMETERS:
                    return "CE.PLE_UDMA_LOAD_PARAMETERS: " + ::to_string(ple_udma_load_parameters_r(val));
                case CE_PLE_UDMA_LOAD_COMMAND:
                    return "CE.PLE_UDMA_LOAD_COMMAND: " + ::to_string(ple_udma_load_command_r(val));
                case CE_PLE_UDMA_STORE_PARAMETERS:
                    return "CE.PLE_UDMA_STORE_PARAMETERS: " + ::to_string(ple_udma_store_parameters_r(val));
                case CE_PLE_UDMA_STORE_COMMAND:
                    return "CE.PLE_UDMA_STORE_COMMAND: " + ::to_string(ple_udma_store_command_r(val));
                case CE_PLE_COUNTERS:
                    return "CE.PLE_COUNTERS: " + ::to_string(ple_counters_r(val));
                case CE_PLE_SCRATCH0:
                    return "CE.PLE_SCRATCH0: " + ::to_string(ple_scratch0_r(val));
                case CE_PLE_SCRATCH1:
                    return "CE.PLE_SCRATCH1: " + ::to_string(ple_scratch1_r(val));
                case CE_PLE_SCRATCH2:
                    return "CE.PLE_SCRATCH2: " + ::to_string(ple_scratch2_r(val));
                case CE_PLE_SCRATCH3:
                    return "CE.PLE_SCRATCH3: " + ::to_string(ple_scratch3_r(val));
                case CE_PLE_SCRATCH4:
                    return "CE.PLE_SCRATCH4: " + ::to_string(ple_scratch4_r(val));
                case CE_PLE_SCRATCH5:
                    return "CE.PLE_SCRATCH5: " + ::to_string(ple_scratch5_r(val));
                case CE_PLE_SCRATCH6:
                    return "CE.PLE_SCRATCH6: " + ::to_string(ple_scratch6_r(val));
                case CE_PLE_SCRATCH7:
                    return "CE.PLE_SCRATCH7: " + ::to_string(ple_scratch7_r(val));
                case CE_PLE_DEBUG_CONTROL:
                    return "CE.PLE_DEBUG_CONTROL: " + ::to_string(ple_debug_control_r(val));
            }
        }
        case CE_BLOCK_RP:
        {
            switch (offset)
            {
                case CE_BLOCK_OFM_BLOCK_CONFIG:
                    return "CE_BLOCK.OFM_BLOCK_CONFIG: " + ::to_string(ofm_block_config_r(val));
                case CE_BLOCK_OFM_BLOCK_XY:
                    return "CE_BLOCK.OFM_BLOCK_XY: " + ::to_string(ofm_block_xy_r(val));
                case CE_BLOCK_SUBKERNEL_OFFSET:
                    return "CE_BLOCK.SUBKERNEL_OFFSET: " + ::to_string(subkernel_offset_r(val));
            }
        }
        case CE_STRIPE_RP:
        {
            switch (offset)
            {
                case CE_STRIPE_CE_CONTROL:
                    return "CE_STRIPE.CE_CONTROL: " + ::to_string(ce_control_r(val));
                case CE_STRIPE_WIDE_KERNEL_CONTROL:
                    return "CE_STRIPE.WIDE_KERNEL_CONTROL: " + ::to_string(wide_kernel_control_r(val));
                case CE_STRIPE_WIDE_KERNEL_OFFSET:
                    return "CE_STRIPE.WIDE_KERNEL_OFFSET: " + ::to_string(wide_kernel_offset_r(val));
                case CE_STRIPE_IFM_ZERO_POINT:
                    return "CE_STRIPE.IFM_ZERO_POINT: " + ::to_string(ifm_zero_point_r(val));
                case CE_STRIPE_IFM_DEFAULT_SLOT_SIZE:
                    return "CE_STRIPE.IFM_DEFAULT_SLOT_SIZE: " + ::to_string(ifm_default_slot_size_r(val));
                case CE_STRIPE_IFM_SLOT_STRIDE:
                    return "CE_STRIPE.IFM_SLOT_STRIDE: " + ::to_string(ifm_slot_stride_r(val));
                case CE_STRIPE_IFM_ROW_STRIDE:
                    return "CE_STRIPE.IFM_ROW_STRIDE: " + ::to_string(ifm_row_stride_r(val));
                case CE_STRIPE_IFM_CONFIG1:
                    return "CE_STRIPE.IFM_CONFIG1: " + ::to_string(ifm_config1_r(val));
                case CE_STRIPE_IFM_TOP_SLOTS:
                    return "CE_STRIPE.IFM_TOP_SLOTS: " + ::to_string(ifm_top_slots_r(val));
                case CE_STRIPE_IFM_MID_SLOTS:
                    return "CE_STRIPE.IFM_MID_SLOTS: " + ::to_string(ifm_mid_slots_r(val));
                case CE_STRIPE_IFM_BOTTOM_SLOTS:
                    return "CE_STRIPE.IFM_BOTTOM_SLOTS: " + ::to_string(ifm_bottom_slots_r(val));
                case CE_STRIPE_IFM_SLOT_PAD_CONFIG:
                    return "CE_STRIPE.IFM_SLOT_PAD_CONFIG: " + ::to_string(ifm_slot_pad_config_r(val));
                case CE_STRIPE_DEPTHWISE_CONTROL:
                    return "CE_STRIPE.DEPTHWISE_CONTROL: " + ::to_string(depthwise_control_r(val));
                case CE_STRIPE_IFM_CONFIG2_IG0:
                    return "CE_STRIPE.IFM_CONFIG2_IG0: " + ::to_string(ifm_config2_ig0_r(val));
                case CE_STRIPE_IFM_SLOT_BASE_ADDRESS_IG0:
                    return "CE_STRIPE.IFM_SLOT_BASE_ADDRESS_IG0: " + ::to_string(ifm_slot_base_address_ig0_r(val));
                case CE_STRIPE_IFM_PAD0_IG0:
                    return "CE_STRIPE.IFM_PAD0_IG0: " + ::to_string(ifm_pad0_ig0_r(val));
                case CE_STRIPE_IFM_PAD1_IG0:
                    return "CE_STRIPE.IFM_PAD1_IG0: " + ::to_string(ifm_pad1_ig0_r(val));
                case CE_STRIPE_IFM_PAD2_IG0:
                    return "CE_STRIPE.IFM_PAD2_IG0: " + ::to_string(ifm_pad2_ig0_r(val));
                case CE_STRIPE_IFM_PAD3_IG0:
                    return "CE_STRIPE.IFM_PAD3_IG0: " + ::to_string(ifm_pad3_ig0_r(val));
                case CE_STRIPE_IFM_PAD4_IG0:
                    return "CE_STRIPE.IFM_PAD4_IG0: " + ::to_string(ifm_pad4_ig0_r(val));
                case CE_STRIPE_IFM_PAD5_IG0:
                    return "CE_STRIPE.IFM_PAD5_IG0: " + ::to_string(ifm_pad5_ig0_r(val));
                case CE_STRIPE_IFM_PAD6_IG0:
                    return "CE_STRIPE.IFM_PAD6_IG0: " + ::to_string(ifm_pad6_ig0_r(val));
                case CE_STRIPE_IFM_PAD7_IG0:
                    return "CE_STRIPE.IFM_PAD7_IG0: " + ::to_string(ifm_pad7_ig0_r(val));
                case CE_STRIPE_IFM_PAD8_IG0:
                    return "CE_STRIPE.IFM_PAD8_IG0: " + ::to_string(ifm_pad8_ig0_r(val));
                case CE_STRIPE_IFM_PAD9_IG0:
                    return "CE_STRIPE.IFM_PAD9_IG0: " + ::to_string(ifm_pad9_ig0_r(val));
                case CE_STRIPE_IFM_PAD10_IG0:
                    return "CE_STRIPE.IFM_PAD10_IG0: " + ::to_string(ifm_pad10_ig0_r(val));
                case CE_STRIPE_IFM_PAD11_IG0:
                    return "CE_STRIPE.IFM_PAD11_IG0: " + ::to_string(ifm_pad11_ig0_r(val));
                case CE_STRIPE_IFM_PAD12_IG0:
                    return "CE_STRIPE.IFM_PAD12_IG0: " + ::to_string(ifm_pad12_ig0_r(val));
                case CE_STRIPE_IFM_PAD13_IG0:
                    return "CE_STRIPE.IFM_PAD13_IG0: " + ::to_string(ifm_pad13_ig0_r(val));
                case CE_STRIPE_IFM_PAD14_IG0:
                    return "CE_STRIPE.IFM_PAD14_IG0: " + ::to_string(ifm_pad14_ig0_r(val));
                case CE_STRIPE_IFM_PAD15_IG0:
                    return "CE_STRIPE.IFM_PAD15_IG0: " + ::to_string(ifm_pad15_ig0_r(val));
                case CE_STRIPE_ACTIVATION_CONFIG:
                    return "CE_STRIPE.ACTIVATION_CONFIG: " + ::to_string(activation_config_r(val));
                case CE_STRIPE_STRIPE_BLOCK_CONFIG:
                    return "CE_STRIPE.STRIPE_BLOCK_CONFIG: " + ::to_string(stripe_block_config_r(val));
                case CE_STRIPE_OFM_STRIPE_SIZE:
                    return "CE_STRIPE.OFM_STRIPE_SIZE: " + ::to_string(ofm_stripe_size_r(val));
                case CE_STRIPE_OFM_CONFIG:
                    return "CE_STRIPE.OFM_CONFIG: " + ::to_string(ofm_config_r(val));
                case CE_STRIPE_VP_CONTROL:
                    return "CE_STRIPE.VP_CONTROL: " + ::to_string(vp_control_r(val));
                case CE_STRIPE_FILTER:
                    return "CE_STRIPE.FILTER: " + ::to_string(filter_r(val));
                case CE_STRIPE_MUL_ENABLE_OG0:
                    return "CE_STRIPE.MUL_ENABLE_OG0: " + ::to_string(mul_enable_og0_r(val));
                case CE_STRIPE_WEIGHT_BASE_ADDR_OG0:
                    return "CE_STRIPE.WEIGHT_BASE_ADDR_OG0: " + ::to_string(weight_base_addr_og0_r(val));
                case CE_STRIPE_IFM_CONFIG2_IG1:
                    return "CE_STRIPE.IFM_CONFIG2_IG1: " + ::to_string(ifm_config2_ig1_r(val));
                case CE_STRIPE_IFM_SLOT_BASE_ADDRESS_IG1:
                    return "CE_STRIPE.IFM_SLOT_BASE_ADDRESS_IG1: " + ::to_string(ifm_slot_base_address_ig1_r(val));
                case CE_STRIPE_IFM_PAD0_IG1:
                    return "CE_STRIPE.IFM_PAD0_IG1: " + ::to_string(ifm_pad0_ig1_r(val));
                case CE_STRIPE_IFM_PAD1_IG1:
                    return "CE_STRIPE.IFM_PAD1_IG1: " + ::to_string(ifm_pad1_ig1_r(val));
                case CE_STRIPE_IFM_PAD2_IG1:
                    return "CE_STRIPE.IFM_PAD2_IG1: " + ::to_string(ifm_pad2_ig1_r(val));
                case CE_STRIPE_IFM_PAD3_IG1:
                    return "CE_STRIPE.IFM_PAD3_IG1: " + ::to_string(ifm_pad3_ig1_r(val));
                case CE_STRIPE_IFM_PAD4_IG1:
                    return "CE_STRIPE.IFM_PAD4_IG1: " + ::to_string(ifm_pad4_ig1_r(val));
                case CE_STRIPE_IFM_PAD5_IG1:
                    return "CE_STRIPE.IFM_PAD5_IG1: " + ::to_string(ifm_pad5_ig1_r(val));
                case CE_STRIPE_IFM_PAD6_IG1:
                    return "CE_STRIPE.IFM_PAD6_IG1: " + ::to_string(ifm_pad6_ig1_r(val));
                case CE_STRIPE_IFM_PAD7_IG1:
                    return "CE_STRIPE.IFM_PAD7_IG1: " + ::to_string(ifm_pad7_ig1_r(val));
                case CE_STRIPE_IFM_PAD8_IG1:
                    return "CE_STRIPE.IFM_PAD8_IG1: " + ::to_string(ifm_pad8_ig1_r(val));
                case CE_STRIPE_IFM_PAD9_IG1:
                    return "CE_STRIPE.IFM_PAD9_IG1: " + ::to_string(ifm_pad9_ig1_r(val));
                case CE_STRIPE_IFM_PAD10_IG1:
                    return "CE_STRIPE.IFM_PAD10_IG1: " + ::to_string(ifm_pad10_ig1_r(val));
                case CE_STRIPE_IFM_PAD11_IG1:
                    return "CE_STRIPE.IFM_PAD11_IG1: " + ::to_string(ifm_pad11_ig1_r(val));
                case CE_STRIPE_IFM_PAD12_IG1:
                    return "CE_STRIPE.IFM_PAD12_IG1: " + ::to_string(ifm_pad12_ig1_r(val));
                case CE_STRIPE_IFM_PAD13_IG1:
                    return "CE_STRIPE.IFM_PAD13_IG1: " + ::to_string(ifm_pad13_ig1_r(val));
                case CE_STRIPE_IFM_PAD14_IG1:
                    return "CE_STRIPE.IFM_PAD14_IG1: " + ::to_string(ifm_pad14_ig1_r(val));
                case CE_STRIPE_IFM_PAD15_IG1:
                    return "CE_STRIPE.IFM_PAD15_IG1: " + ::to_string(ifm_pad15_ig1_r(val));
                case CE_STRIPE_MUL_ENABLE_OG1:
                    return "CE_STRIPE.MUL_ENABLE_OG1: " + ::to_string(mul_enable_og1_r(val));
                case CE_STRIPE_WEIGHT_BASE_ADDR_OG1:
                    return "CE_STRIPE.WEIGHT_BASE_ADDR_OG1: " + ::to_string(weight_base_addr_og1_r(val));
                case CE_STRIPE_IFM_CONFIG2_IG2:
                    return "CE_STRIPE.IFM_CONFIG2_IG2: " + ::to_string(ifm_config2_ig2_r(val));
                case CE_STRIPE_IFM_SLOT_BASE_ADDRESS_IG2:
                    return "CE_STRIPE.IFM_SLOT_BASE_ADDRESS_IG2: " + ::to_string(ifm_slot_base_address_ig2_r(val));
                case CE_STRIPE_IFM_PAD0_IG2:
                    return "CE_STRIPE.IFM_PAD0_IG2: " + ::to_string(ifm_pad0_ig2_r(val));
                case CE_STRIPE_IFM_PAD1_IG2:
                    return "CE_STRIPE.IFM_PAD1_IG2: " + ::to_string(ifm_pad1_ig2_r(val));
                case CE_STRIPE_IFM_PAD2_IG2:
                    return "CE_STRIPE.IFM_PAD2_IG2: " + ::to_string(ifm_pad2_ig2_r(val));
                case CE_STRIPE_IFM_PAD3_IG2:
                    return "CE_STRIPE.IFM_PAD3_IG2: " + ::to_string(ifm_pad3_ig2_r(val));
                case CE_STRIPE_IFM_PAD4_IG2:
                    return "CE_STRIPE.IFM_PAD4_IG2: " + ::to_string(ifm_pad4_ig2_r(val));
                case CE_STRIPE_IFM_PAD5_IG2:
                    return "CE_STRIPE.IFM_PAD5_IG2: " + ::to_string(ifm_pad5_ig2_r(val));
                case CE_STRIPE_IFM_PAD6_IG2:
                    return "CE_STRIPE.IFM_PAD6_IG2: " + ::to_string(ifm_pad6_ig2_r(val));
                case CE_STRIPE_IFM_PAD7_IG2:
                    return "CE_STRIPE.IFM_PAD7_IG2: " + ::to_string(ifm_pad7_ig2_r(val));
                case CE_STRIPE_IFM_PAD8_IG2:
                    return "CE_STRIPE.IFM_PAD8_IG2: " + ::to_string(ifm_pad8_ig2_r(val));
                case CE_STRIPE_IFM_PAD9_IG2:
                    return "CE_STRIPE.IFM_PAD9_IG2: " + ::to_string(ifm_pad9_ig2_r(val));
                case CE_STRIPE_IFM_PAD10_IG2:
                    return "CE_STRIPE.IFM_PAD10_IG2: " + ::to_string(ifm_pad10_ig2_r(val));
                case CE_STRIPE_IFM_PAD11_IG2:
                    return "CE_STRIPE.IFM_PAD11_IG2: " + ::to_string(ifm_pad11_ig2_r(val));
                case CE_STRIPE_IFM_PAD12_IG2:
                    return "CE_STRIPE.IFM_PAD12_IG2: " + ::to_string(ifm_pad12_ig2_r(val));
                case CE_STRIPE_IFM_PAD13_IG2:
                    return "CE_STRIPE.IFM_PAD13_IG2: " + ::to_string(ifm_pad13_ig2_r(val));
                case CE_STRIPE_IFM_PAD14_IG2:
                    return "CE_STRIPE.IFM_PAD14_IG2: " + ::to_string(ifm_pad14_ig2_r(val));
                case CE_STRIPE_IFM_PAD15_IG2:
                    return "CE_STRIPE.IFM_PAD15_IG2: " + ::to_string(ifm_pad15_ig2_r(val));
                case CE_STRIPE_MUL_ENABLE_OG2:
                    return "CE_STRIPE.MUL_ENABLE_OG2: " + ::to_string(mul_enable_og2_r(val));
                case CE_STRIPE_WEIGHT_BASE_ADDR_OG2:
                    return "CE_STRIPE.WEIGHT_BASE_ADDR_OG2: " + ::to_string(weight_base_addr_og2_r(val));
                case CE_STRIPE_IFM_CONFIG2_IG3:
                    return "CE_STRIPE.IFM_CONFIG2_IG3: " + ::to_string(ifm_config2_ig3_r(val));
                case CE_STRIPE_IFM_SLOT_BASE_ADDRESS_IG3:
                    return "CE_STRIPE.IFM_SLOT_BASE_ADDRESS_IG3: " + ::to_string(ifm_slot_base_address_ig3_r(val));
                case CE_STRIPE_IFM_PAD0_IG3:
                    return "CE_STRIPE.IFM_PAD0_IG3: " + ::to_string(ifm_pad0_ig3_r(val));
                case CE_STRIPE_IFM_PAD1_IG3:
                    return "CE_STRIPE.IFM_PAD1_IG3: " + ::to_string(ifm_pad1_ig3_r(val));
                case CE_STRIPE_IFM_PAD2_IG3:
                    return "CE_STRIPE.IFM_PAD2_IG3: " + ::to_string(ifm_pad2_ig3_r(val));
                case CE_STRIPE_IFM_PAD3_IG3:
                    return "CE_STRIPE.IFM_PAD3_IG3: " + ::to_string(ifm_pad3_ig3_r(val));
                case CE_STRIPE_IFM_PAD4_IG3:
                    return "CE_STRIPE.IFM_PAD4_IG3: " + ::to_string(ifm_pad4_ig3_r(val));
                case CE_STRIPE_IFM_PAD5_IG3:
                    return "CE_STRIPE.IFM_PAD5_IG3: " + ::to_string(ifm_pad5_ig3_r(val));
                case CE_STRIPE_IFM_PAD6_IG3:
                    return "CE_STRIPE.IFM_PAD6_IG3: " + ::to_string(ifm_pad6_ig3_r(val));
                case CE_STRIPE_IFM_PAD7_IG3:
                    return "CE_STRIPE.IFM_PAD7_IG3: " + ::to_string(ifm_pad7_ig3_r(val));
                case CE_STRIPE_IFM_PAD8_IG3:
                    return "CE_STRIPE.IFM_PAD8_IG3: " + ::to_string(ifm_pad8_ig3_r(val));
                case CE_STRIPE_IFM_PAD9_IG3:
                    return "CE_STRIPE.IFM_PAD9_IG3: " + ::to_string(ifm_pad9_ig3_r(val));
                case CE_STRIPE_IFM_PAD10_IG3:
                    return "CE_STRIPE.IFM_PAD10_IG3: " + ::to_string(ifm_pad10_ig3_r(val));
                case CE_STRIPE_IFM_PAD11_IG3:
                    return "CE_STRIPE.IFM_PAD11_IG3: " + ::to_string(ifm_pad11_ig3_r(val));
                case CE_STRIPE_IFM_PAD12_IG3:
                    return "CE_STRIPE.IFM_PAD12_IG3: " + ::to_string(ifm_pad12_ig3_r(val));
                case CE_STRIPE_IFM_PAD13_IG3:
                    return "CE_STRIPE.IFM_PAD13_IG3: " + ::to_string(ifm_pad13_ig3_r(val));
                case CE_STRIPE_IFM_PAD14_IG3:
                    return "CE_STRIPE.IFM_PAD14_IG3: " + ::to_string(ifm_pad14_ig3_r(val));
                case CE_STRIPE_IFM_PAD15_IG3:
                    return "CE_STRIPE.IFM_PAD15_IG3: " + ::to_string(ifm_pad15_ig3_r(val));
                case CE_STRIPE_MUL_ENABLE_OG3:
                    return "CE_STRIPE.MUL_ENABLE_OG3: " + ::to_string(mul_enable_og3_r(val));
                case CE_STRIPE_WEIGHT_BASE_ADDR_OG3:
                    return "CE_STRIPE.WEIGHT_BASE_ADDR_OG3: " + ::to_string(weight_base_addr_og3_r(val));
                case CE_STRIPE_MCE_DEBUG_CONTROL:
                    return "CE_STRIPE.MCE_DEBUG_CONTROL: " + ::to_string(mce_debug_control_r(val));
            }
        }
        case DL1_RP:
        {
            switch (offset)
            {
                case DL1_EXT_ACCESS_CONTROL:
                    return "DL1.EXT_ACCESS_CONTROL: " + ::to_string(dl1_ext_access_control_r(val));
                case DL1_DELEGATION:
                    return "DL1.DELEGATION: " + ::to_string(dl1_delegation_r(val));
                case DL1_SECCTLR:
                    return "DL1.SECCTLR: " + ::to_string(dl1_secctlr_r(val));
                case DL1_SECMCUCTLR:
                    return "DL1.SECMCUCTLR: " + ::to_string(dl1_secmcuctlr_r(val));
                case DL1_SYSCTLR0:
                    return "DL1.SYSCTLR0: " + ::to_string(dl1_sysctlr0_r(val));
                case DL1_SYSCTLR1:
                    return "DL1.SYSCTLR1: " + ::to_string(dl1_sysctlr1_r(val));
                case DL1_PWRCTLR:
                    return "DL1.PWRCTLR: " + ::to_string(dl1_pwrctlr_r(val));
                case DL1_AUXCTLR:
                    return "DL1.AUXCTLR: " + ::to_string(dl1_auxctlr_r(val));
                case DL1_SETIRQ_EXT:
                    return "DL1.SETIRQ_EXT: " + ::to_string(dl1_setirq_ext_r(val));
                case DL1_CLRIRQ_EXT:
                    return "DL1.CLRIRQ_EXT: " + ::to_string(dl1_clrirq_ext_r(val));
                case DL1_SETIRQ_INT:
                    return "DL1.SETIRQ_INT: " + ::to_string(dl1_setirq_int_r(val));
                case DL1_DFC_SLV_ORD:
                    return "DL1.DFC_SLV_ORD: " + ::to_string(dl1_dfc_slv_ord_r(val));
                case DL1_DFC_SLV_OWR:
                    return "DL1.DFC_SLV_OWR: " + ::to_string(dl1_dfc_slv_owr_r(val));
                case DL1_DFC_MST_ORD:
                    return "DL1.DFC_MST_ORD: " + ::to_string(dl1_dfc_mst_ord_r(val));
                case DL1_DFC_MST_OWR:
                    return "DL1.DFC_MST_OWR: " + ::to_string(dl1_dfc_mst_owr_r(val));
                case DL1_IRQ_STATUS:
                    return "DL1.IRQ_STATUS: " + ::to_string(dl1_irq_status_r(val));
                case DL1_INT_STATUS:
                    return "DL1.INT_STATUS: " + ::to_string(dl1_int_status_r(val));
                case DL1_EXT_STATUS:
                    return "DL1.EXT_STATUS: " + ::to_string(dl1_ext_status_r(val));
                case DL1_GP0:
                    return "DL1.GP0: " + ::to_string(dl1_gp0_r(val));
                case DL1_GP1:
                    return "DL1.GP1: " + ::to_string(dl1_gp1_r(val));
                case DL1_GP2:
                    return "DL1.GP2: " + ::to_string(dl1_gp2_r(val));
                case DL1_GP3:
                    return "DL1.GP3: " + ::to_string(dl1_gp3_r(val));
                case DL1_GP4:
                    return "DL1.GP4: " + ::to_string(dl1_gp4_r(val));
                case DL1_GP5:
                    return "DL1.GP5: " + ::to_string(dl1_gp5_r(val));
                case DL1_GP6:
                    return "DL1.GP6: " + ::to_string(dl1_gp6_r(val));
                case DL1_GP7:
                    return "DL1.GP7: " + ::to_string(dl1_gp7_r(val));
                case DL1_DELEGATION_STREAM_SECURITY:
                    return "DL1.DELEGATION_STREAM_SECURITY: " + ::to_string(dl1_delegation_stream_security_r(val));
                case DL1_DELEGATION_NSAID:
                    return "DL1.DELEGATION_NSAID: " + ::to_string(dl1_delegation_nsaid_r(val));
                case DL1_DELEGATION_MMUSID:
                    return "DL1.DELEGATION_MMUSID: " + ::to_string(dl1_delegation_mmusid_r(val));
                case DL1_DELEGATION_MMUSSID:
                    return "DL1.DELEGATION_MMUSSID: " + ::to_string(dl1_delegation_mmussid_r(val));
                case DL1_DELEGATION_MMUSSIDV:
                    return "DL1.DELEGATION_MMUSSIDV: " + ::to_string(dl1_delegation_mmussidv_r(val));
                case DL1_DELEGATION_ATTR_CONTROL:
                    return "DL1.DELEGATION_ATTR_CONTROL: " + ::to_string(dl1_delegation_attr_control_r(val));
                case DL1_DELEGATION_MEMATTR:
                    return "DL1.DELEGATION_MEMATTR: " + ::to_string(dl1_delegation_memattr_r(val));
                case DL1_DELEGATION_ADDRESS_EXTEND:
                    return "DL1.DELEGATION_ADDRESS_EXTEND: " + ::to_string(dl1_delegation_address_extend_r(val));
                case DL1_STREAM0_STREAM_SECURITY:
                    return "DL1.STREAM0_STREAM_SECURITY: " + ::to_string(dl1_stream0_stream_security_r(val));
                case DL1_STREAM0_NSAID:
                    return "DL1.STREAM0_NSAID: " + ::to_string(dl1_stream0_nsaid_r(val));
                case DL1_STREAM0_MMUSID:
                    return "DL1.STREAM0_MMUSID: " + ::to_string(dl1_stream0_mmusid_r(val));
                case DL1_STREAM0_MMUSSID:
                    return "DL1.STREAM0_MMUSSID: " + ::to_string(dl1_stream0_mmussid_r(val));
                case DL1_STREAM0_ATTR_CONTROL:
                    return "DL1.STREAM0_ATTR_CONTROL: " + ::to_string(dl1_stream0_attr_control_r(val));
                case DL1_STREAM0_MEMATTR:
                    return "DL1.STREAM0_MEMATTR: " + ::to_string(dl1_stream0_memattr_r(val));
                case DL1_STREAM0_ADDRESS_EXTEND:
                    return "DL1.STREAM0_ADDRESS_EXTEND: " + ::to_string(dl1_stream0_address_extend_r(val));
                case DL1_STREAM1_STREAM_SECURITY:
                    return "DL1.STREAM1_STREAM_SECURITY: " + ::to_string(dl1_stream1_stream_security_r(val));
                case DL1_STREAM1_NSAID:
                    return "DL1.STREAM1_NSAID: " + ::to_string(dl1_stream1_nsaid_r(val));
                case DL1_STREAM1_MMUSID:
                    return "DL1.STREAM1_MMUSID: " + ::to_string(dl1_stream1_mmusid_r(val));
                case DL1_STREAM1_MMUSSID:
                    return "DL1.STREAM1_MMUSSID: " + ::to_string(dl1_stream1_mmussid_r(val));
                case DL1_STREAM1_ATTR_CONTROL:
                    return "DL1.STREAM1_ATTR_CONTROL: " + ::to_string(dl1_stream1_attr_control_r(val));
                case DL1_STREAM1_MEMATTR:
                    return "DL1.STREAM1_MEMATTR: " + ::to_string(dl1_stream1_memattr_r(val));
                case DL1_STREAM1_ADDRESS_EXTEND:
                    return "DL1.STREAM1_ADDRESS_EXTEND: " + ::to_string(dl1_stream1_address_extend_r(val));
                case DL1_STREAM2_STREAM_SECURITY:
                    return "DL1.STREAM2_STREAM_SECURITY: " + ::to_string(dl1_stream2_stream_security_r(val));
                case DL1_STREAM2_NSAID:
                    return "DL1.STREAM2_NSAID: " + ::to_string(dl1_stream2_nsaid_r(val));
                case DL1_STREAM2_MMUSID:
                    return "DL1.STREAM2_MMUSID: " + ::to_string(dl1_stream2_mmusid_r(val));
                case DL1_STREAM2_MMUSSID:
                    return "DL1.STREAM2_MMUSSID: " + ::to_string(dl1_stream2_mmussid_r(val));
                case DL1_STREAM2_ATTR_CONTROL:
                    return "DL1.STREAM2_ATTR_CONTROL: " + ::to_string(dl1_stream2_attr_control_r(val));
                case DL1_STREAM2_MEMATTR:
                    return "DL1.STREAM2_MEMATTR: " + ::to_string(dl1_stream2_memattr_r(val));
                case DL1_STREAM2_ADDRESS_EXTEND:
                    return "DL1.STREAM2_ADDRESS_EXTEND: " + ::to_string(dl1_stream2_address_extend_r(val));
                case DL1_STREAM3_STREAM_SECURITY:
                    return "DL1.STREAM3_STREAM_SECURITY: " + ::to_string(dl1_stream3_stream_security_r(val));
                case DL1_STREAM3_NSAID:
                    return "DL1.STREAM3_NSAID: " + ::to_string(dl1_stream3_nsaid_r(val));
                case DL1_STREAM3_MMUSID:
                    return "DL1.STREAM3_MMUSID: " + ::to_string(dl1_stream3_mmusid_r(val));
                case DL1_STREAM3_MMUSSID:
                    return "DL1.STREAM3_MMUSSID: " + ::to_string(dl1_stream3_mmussid_r(val));
                case DL1_STREAM3_ATTR_CONTROL:
                    return "DL1.STREAM3_ATTR_CONTROL: " + ::to_string(dl1_stream3_attr_control_r(val));
                case DL1_STREAM3_MEMATTR:
                    return "DL1.STREAM3_MEMATTR: " + ::to_string(dl1_stream3_memattr_r(val));
                case DL1_STREAM4_STREAM_SECURITY:
                    return "DL1.STREAM4_STREAM_SECURITY: " + ::to_string(dl1_stream4_stream_security_r(val));
                case DL1_STREAM4_NSAID:
                    return "DL1.STREAM4_NSAID: " + ::to_string(dl1_stream4_nsaid_r(val));
                case DL1_STREAM4_MMUSID:
                    return "DL1.STREAM4_MMUSID: " + ::to_string(dl1_stream4_mmusid_r(val));
                case DL1_STREAM4_MMUSSID:
                    return "DL1.STREAM4_MMUSSID: " + ::to_string(dl1_stream4_mmussid_r(val));
                case DL1_STREAM4_ATTR_CONTROL:
                    return "DL1.STREAM4_ATTR_CONTROL: " + ::to_string(dl1_stream4_attr_control_r(val));
                case DL1_STREAM4_MEMATTR:
                    return "DL1.STREAM4_MEMATTR: " + ::to_string(dl1_stream4_memattr_r(val));
                case DL1_STREAM5_STREAM_SECURITY:
                    return "DL1.STREAM5_STREAM_SECURITY: " + ::to_string(dl1_stream5_stream_security_r(val));
                case DL1_STREAM5_NSAID:
                    return "DL1.STREAM5_NSAID: " + ::to_string(dl1_stream5_nsaid_r(val));
                case DL1_STREAM5_MMUSID:
                    return "DL1.STREAM5_MMUSID: " + ::to_string(dl1_stream5_mmusid_r(val));
                case DL1_STREAM5_MMUSSID:
                    return "DL1.STREAM5_MMUSSID: " + ::to_string(dl1_stream5_mmussid_r(val));
                case DL1_STREAM5_ATTR_CONTROL:
                    return "DL1.STREAM5_ATTR_CONTROL: " + ::to_string(dl1_stream5_attr_control_r(val));
                case DL1_STREAM5_MEMATTR:
                    return "DL1.STREAM5_MEMATTR: " + ::to_string(dl1_stream5_memattr_r(val));
                case DL1_STREAM6_STREAM_SECURITY:
                    return "DL1.STREAM6_STREAM_SECURITY: " + ::to_string(dl1_stream6_stream_security_r(val));
                case DL1_STREAM6_NSAID:
                    return "DL1.STREAM6_NSAID: " + ::to_string(dl1_stream6_nsaid_r(val));
                case DL1_STREAM6_MMUSID:
                    return "DL1.STREAM6_MMUSID: " + ::to_string(dl1_stream6_mmusid_r(val));
                case DL1_STREAM6_MMUSSID:
                    return "DL1.STREAM6_MMUSSID: " + ::to_string(dl1_stream6_mmussid_r(val));
                case DL1_STREAM6_ATTR_CONTROL:
                    return "DL1.STREAM6_ATTR_CONTROL: " + ::to_string(dl1_stream6_attr_control_r(val));
                case DL1_STREAM6_MEMATTR:
                    return "DL1.STREAM6_MEMATTR: " + ::to_string(dl1_stream6_memattr_r(val));
                case DL1_STREAM7_STREAM_SECURITY:
                    return "DL1.STREAM7_STREAM_SECURITY: " + ::to_string(dl1_stream7_stream_security_r(val));
                case DL1_STREAM7_NSAID:
                    return "DL1.STREAM7_NSAID: " + ::to_string(dl1_stream7_nsaid_r(val));
                case DL1_STREAM7_MMUSID:
                    return "DL1.STREAM7_MMUSID: " + ::to_string(dl1_stream7_mmusid_r(val));
                case DL1_STREAM7_MMUSSID:
                    return "DL1.STREAM7_MMUSSID: " + ::to_string(dl1_stream7_mmussid_r(val));
                case DL1_STREAM7_ATTR_CONTROL:
                    return "DL1.STREAM7_ATTR_CONTROL: " + ::to_string(dl1_stream7_attr_control_r(val));
                case DL1_STREAM7_MEMATTR:
                    return "DL1.STREAM7_MEMATTR: " + ::to_string(dl1_stream7_memattr_r(val));
                case DL1_STREAM8_STREAM_SECURITY:
                    return "DL1.STREAM8_STREAM_SECURITY: " + ::to_string(dl1_stream8_stream_security_r(val));
                case DL1_STREAM8_NSAID:
                    return "DL1.STREAM8_NSAID: " + ::to_string(dl1_stream8_nsaid_r(val));
                case DL1_STREAM8_MMUSID:
                    return "DL1.STREAM8_MMUSID: " + ::to_string(dl1_stream8_mmusid_r(val));
                case DL1_STREAM8_MMUSSID:
                    return "DL1.STREAM8_MMUSSID: " + ::to_string(dl1_stream8_mmussid_r(val));
                case DL1_STREAM8_ATTR_CONTROL:
                    return "DL1.STREAM8_ATTR_CONTROL: " + ::to_string(dl1_stream8_attr_control_r(val));
                case DL1_STREAM8_MEMATTR:
                    return "DL1.STREAM8_MEMATTR: " + ::to_string(dl1_stream8_memattr_r(val));
                case DL1_NPU_ID:
                    return "DL1.NPU_ID: " + ::to_string(dl1_npu_id_r(val));
                case DL1_UNIT_COUNT:
                    return "DL1.UNIT_COUNT: " + ::to_string(dl1_unit_count_r(val));
                case DL1_MCE_FEATURES:
                    return "DL1.MCE_FEATURES: " + ::to_string(dl1_mce_features_r(val));
                case DL1_DFC_FEATURES:
                    return "DL1.DFC_FEATURES: " + ::to_string(dl1_dfc_features_r(val));
                case DL1_PLE_FEATURES:
                    return "DL1.PLE_FEATURES: " + ::to_string(dl1_ple_features_r(val));
                case DL1_WD_FEATURES:
                    return "DL1.WD_FEATURES: " + ::to_string(dl1_wd_features_r(val));
                case DL1_VECTOR_ENGINE_FEATURES:
                    return "DL1.VECTOR_ENGINE_FEATURES: " + ::to_string(dl1_vector_engine_features_r(val));
                case DL1_ECOID:
                    return "DL1.ECOID: " + ::to_string(dl1_ecoid_r(val));
                case DL1_STREAMID_WIDTH:
                    return "DL1.STREAMID_WIDTH: " + ::to_string(dl1_streamid_width_r(val));
            }
        }
        case DL2_RP:
        {
            switch (offset)
            {
                case DL2_EXT_ACCESS_CONTROL:
                    return "DL2.EXT_ACCESS_CONTROL: " + ::to_string(dl2_ext_access_control_r(val));
                case DL2_DELEGATION:
                    return "DL2.DELEGATION: " + ::to_string(dl2_delegation_r(val));
                case DL2_SECCTLR:
                    return "DL2.SECCTLR: " + ::to_string(dl2_secctlr_r(val));
                case DL2_SECMCUCTLR:
                    return "DL2.SECMCUCTLR: " + ::to_string(dl2_secmcuctlr_r(val));
                case DL2_SYSCTLR0:
                    return "DL2.SYSCTLR0: " + ::to_string(dl2_sysctlr0_r(val));
                case DL2_SYSCTLR1:
                    return "DL2.SYSCTLR1: " + ::to_string(dl2_sysctlr1_r(val));
                case DL2_PWRCTLR:
                    return "DL2.PWRCTLR: " + ::to_string(dl2_pwrctlr_r(val));
                case DL2_AUXCTLR:
                    return "DL2.AUXCTLR: " + ::to_string(dl2_auxctlr_r(val));
                case DL2_SETIRQ_EXT:
                    return "DL2.SETIRQ_EXT: " + ::to_string(dl2_setirq_ext_r(val));
                case DL2_CLRIRQ_EXT:
                    return "DL2.CLRIRQ_EXT: " + ::to_string(dl2_clrirq_ext_r(val));
                case DL2_SETIRQ_INT:
                    return "DL2.SETIRQ_INT: " + ::to_string(dl2_setirq_int_r(val));
                case DL2_DFC_SLV_ORD:
                    return "DL2.DFC_SLV_ORD: " + ::to_string(dl2_dfc_slv_ord_r(val));
                case DL2_DFC_SLV_OWR:
                    return "DL2.DFC_SLV_OWR: " + ::to_string(dl2_dfc_slv_owr_r(val));
                case DL2_DFC_MST_ORD:
                    return "DL2.DFC_MST_ORD: " + ::to_string(dl2_dfc_mst_ord_r(val));
                case DL2_DFC_MST_OWR:
                    return "DL2.DFC_MST_OWR: " + ::to_string(dl2_dfc_mst_owr_r(val));
                case DL2_IRQ_STATUS:
                    return "DL2.IRQ_STATUS: " + ::to_string(dl2_irq_status_r(val));
                case DL2_INT_STATUS:
                    return "DL2.INT_STATUS: " + ::to_string(dl2_int_status_r(val));
                case DL2_EXT_STATUS:
                    return "DL2.EXT_STATUS: " + ::to_string(dl2_ext_status_r(val));
                case DL2_GP0:
                    return "DL2.GP0: " + ::to_string(dl2_gp0_r(val));
                case DL2_GP1:
                    return "DL2.GP1: " + ::to_string(dl2_gp1_r(val));
                case DL2_GP2:
                    return "DL2.GP2: " + ::to_string(dl2_gp2_r(val));
                case DL2_GP3:
                    return "DL2.GP3: " + ::to_string(dl2_gp3_r(val));
                case DL2_GP4:
                    return "DL2.GP4: " + ::to_string(dl2_gp4_r(val));
                case DL2_GP5:
                    return "DL2.GP5: " + ::to_string(dl2_gp5_r(val));
                case DL2_GP6:
                    return "DL2.GP6: " + ::to_string(dl2_gp6_r(val));
                case DL2_GP7:
                    return "DL2.GP7: " + ::to_string(dl2_gp7_r(val));
                case DL2_DELEGATION_STREAM_SECURITY:
                    return "DL2.DELEGATION_STREAM_SECURITY: " + ::to_string(dl2_delegation_stream_security_r(val));
                case DL2_DELEGATION_NSAID:
                    return "DL2.DELEGATION_NSAID: " + ::to_string(dl2_delegation_nsaid_r(val));
                case DL2_DELEGATION_MMUSID:
                    return "DL2.DELEGATION_MMUSID: " + ::to_string(dl2_delegation_mmusid_r(val));
                case DL2_DELEGATION_MMUSSID:
                    return "DL2.DELEGATION_MMUSSID: " + ::to_string(dl2_delegation_mmussid_r(val));
                case DL2_DELEGATION_MMUSSIDV:
                    return "DL2.DELEGATION_MMUSSIDV: " + ::to_string(dl2_delegation_mmussidv_r(val));
                case DL2_DELEGATION_ATTR_CONTROL:
                    return "DL2.DELEGATION_ATTR_CONTROL: " + ::to_string(dl2_delegation_attr_control_r(val));
                case DL2_DELEGATION_MEMATTR:
                    return "DL2.DELEGATION_MEMATTR: " + ::to_string(dl2_delegation_memattr_r(val));
                case DL2_DELEGATION_ADDRESS_EXTEND:
                    return "DL2.DELEGATION_ADDRESS_EXTEND: " + ::to_string(dl2_delegation_address_extend_r(val));
                case DL2_STREAM0_STREAM_SECURITY:
                    return "DL2.STREAM0_STREAM_SECURITY: " + ::to_string(dl2_stream0_stream_security_r(val));
                case DL2_STREAM0_NSAID:
                    return "DL2.STREAM0_NSAID: " + ::to_string(dl2_stream0_nsaid_r(val));
                case DL2_STREAM0_MMUSID:
                    return "DL2.STREAM0_MMUSID: " + ::to_string(dl2_stream0_mmusid_r(val));
                case DL2_STREAM0_MMUSSID:
                    return "DL2.STREAM0_MMUSSID: " + ::to_string(dl2_stream0_mmussid_r(val));
                case DL2_STREAM0_ATTR_CONTROL:
                    return "DL2.STREAM0_ATTR_CONTROL: " + ::to_string(dl2_stream0_attr_control_r(val));
                case DL2_STREAM0_MEMATTR:
                    return "DL2.STREAM0_MEMATTR: " + ::to_string(dl2_stream0_memattr_r(val));
                case DL2_STREAM0_ADDRESS_EXTEND:
                    return "DL2.STREAM0_ADDRESS_EXTEND: " + ::to_string(dl2_stream0_address_extend_r(val));
                case DL2_STREAM1_STREAM_SECURITY:
                    return "DL2.STREAM1_STREAM_SECURITY: " + ::to_string(dl2_stream1_stream_security_r(val));
                case DL2_STREAM1_NSAID:
                    return "DL2.STREAM1_NSAID: " + ::to_string(dl2_stream1_nsaid_r(val));
                case DL2_STREAM1_MMUSID:
                    return "DL2.STREAM1_MMUSID: " + ::to_string(dl2_stream1_mmusid_r(val));
                case DL2_STREAM1_MMUSSID:
                    return "DL2.STREAM1_MMUSSID: " + ::to_string(dl2_stream1_mmussid_r(val));
                case DL2_STREAM1_ATTR_CONTROL:
                    return "DL2.STREAM1_ATTR_CONTROL: " + ::to_string(dl2_stream1_attr_control_r(val));
                case DL2_STREAM1_MEMATTR:
                    return "DL2.STREAM1_MEMATTR: " + ::to_string(dl2_stream1_memattr_r(val));
                case DL2_STREAM1_ADDRESS_EXTEND:
                    return "DL2.STREAM1_ADDRESS_EXTEND: " + ::to_string(dl2_stream1_address_extend_r(val));
                case DL2_STREAM2_STREAM_SECURITY:
                    return "DL2.STREAM2_STREAM_SECURITY: " + ::to_string(dl2_stream2_stream_security_r(val));
                case DL2_STREAM2_NSAID:
                    return "DL2.STREAM2_NSAID: " + ::to_string(dl2_stream2_nsaid_r(val));
                case DL2_STREAM2_MMUSID:
                    return "DL2.STREAM2_MMUSID: " + ::to_string(dl2_stream2_mmusid_r(val));
                case DL2_STREAM2_MMUSSID:
                    return "DL2.STREAM2_MMUSSID: " + ::to_string(dl2_stream2_mmussid_r(val));
                case DL2_STREAM2_ATTR_CONTROL:
                    return "DL2.STREAM2_ATTR_CONTROL: " + ::to_string(dl2_stream2_attr_control_r(val));
                case DL2_STREAM2_MEMATTR:
                    return "DL2.STREAM2_MEMATTR: " + ::to_string(dl2_stream2_memattr_r(val));
                case DL2_STREAM2_ADDRESS_EXTEND:
                    return "DL2.STREAM2_ADDRESS_EXTEND: " + ::to_string(dl2_stream2_address_extend_r(val));
                case DL2_STREAM3_STREAM_SECURITY:
                    return "DL2.STREAM3_STREAM_SECURITY: " + ::to_string(dl2_stream3_stream_security_r(val));
                case DL2_STREAM3_NSAID:
                    return "DL2.STREAM3_NSAID: " + ::to_string(dl2_stream3_nsaid_r(val));
                case DL2_STREAM3_MMUSID:
                    return "DL2.STREAM3_MMUSID: " + ::to_string(dl2_stream3_mmusid_r(val));
                case DL2_STREAM3_MMUSSID:
                    return "DL2.STREAM3_MMUSSID: " + ::to_string(dl2_stream3_mmussid_r(val));
                case DL2_STREAM3_ATTR_CONTROL:
                    return "DL2.STREAM3_ATTR_CONTROL: " + ::to_string(dl2_stream3_attr_control_r(val));
                case DL2_STREAM3_MEMATTR:
                    return "DL2.STREAM3_MEMATTR: " + ::to_string(dl2_stream3_memattr_r(val));
                case DL2_STREAM4_STREAM_SECURITY:
                    return "DL2.STREAM4_STREAM_SECURITY: " + ::to_string(dl2_stream4_stream_security_r(val));
                case DL2_STREAM4_NSAID:
                    return "DL2.STREAM4_NSAID: " + ::to_string(dl2_stream4_nsaid_r(val));
                case DL2_STREAM4_MMUSID:
                    return "DL2.STREAM4_MMUSID: " + ::to_string(dl2_stream4_mmusid_r(val));
                case DL2_STREAM4_MMUSSID:
                    return "DL2.STREAM4_MMUSSID: " + ::to_string(dl2_stream4_mmussid_r(val));
                case DL2_STREAM4_ATTR_CONTROL:
                    return "DL2.STREAM4_ATTR_CONTROL: " + ::to_string(dl2_stream4_attr_control_r(val));
                case DL2_STREAM4_MEMATTR:
                    return "DL2.STREAM4_MEMATTR: " + ::to_string(dl2_stream4_memattr_r(val));
                case DL2_STREAM5_STREAM_SECURITY:
                    return "DL2.STREAM5_STREAM_SECURITY: " + ::to_string(dl2_stream5_stream_security_r(val));
                case DL2_STREAM5_NSAID:
                    return "DL2.STREAM5_NSAID: " + ::to_string(dl2_stream5_nsaid_r(val));
                case DL2_STREAM5_MMUSID:
                    return "DL2.STREAM5_MMUSID: " + ::to_string(dl2_stream5_mmusid_r(val));
                case DL2_STREAM5_MMUSSID:
                    return "DL2.STREAM5_MMUSSID: " + ::to_string(dl2_stream5_mmussid_r(val));
                case DL2_STREAM5_ATTR_CONTROL:
                    return "DL2.STREAM5_ATTR_CONTROL: " + ::to_string(dl2_stream5_attr_control_r(val));
                case DL2_STREAM5_MEMATTR:
                    return "DL2.STREAM5_MEMATTR: " + ::to_string(dl2_stream5_memattr_r(val));
                case DL2_STREAM6_STREAM_SECURITY:
                    return "DL2.STREAM6_STREAM_SECURITY: " + ::to_string(dl2_stream6_stream_security_r(val));
                case DL2_STREAM6_NSAID:
                    return "DL2.STREAM6_NSAID: " + ::to_string(dl2_stream6_nsaid_r(val));
                case DL2_STREAM6_MMUSID:
                    return "DL2.STREAM6_MMUSID: " + ::to_string(dl2_stream6_mmusid_r(val));
                case DL2_STREAM6_MMUSSID:
                    return "DL2.STREAM6_MMUSSID: " + ::to_string(dl2_stream6_mmussid_r(val));
                case DL2_STREAM6_ATTR_CONTROL:
                    return "DL2.STREAM6_ATTR_CONTROL: " + ::to_string(dl2_stream6_attr_control_r(val));
                case DL2_STREAM6_MEMATTR:
                    return "DL2.STREAM6_MEMATTR: " + ::to_string(dl2_stream6_memattr_r(val));
                case DL2_STREAM7_STREAM_SECURITY:
                    return "DL2.STREAM7_STREAM_SECURITY: " + ::to_string(dl2_stream7_stream_security_r(val));
                case DL2_STREAM7_NSAID:
                    return "DL2.STREAM7_NSAID: " + ::to_string(dl2_stream7_nsaid_r(val));
                case DL2_STREAM7_MMUSID:
                    return "DL2.STREAM7_MMUSID: " + ::to_string(dl2_stream7_mmusid_r(val));
                case DL2_STREAM7_MMUSSID:
                    return "DL2.STREAM7_MMUSSID: " + ::to_string(dl2_stream7_mmussid_r(val));
                case DL2_STREAM7_ATTR_CONTROL:
                    return "DL2.STREAM7_ATTR_CONTROL: " + ::to_string(dl2_stream7_attr_control_r(val));
                case DL2_STREAM7_MEMATTR:
                    return "DL2.STREAM7_MEMATTR: " + ::to_string(dl2_stream7_memattr_r(val));
                case DL2_STREAM8_STREAM_SECURITY:
                    return "DL2.STREAM8_STREAM_SECURITY: " + ::to_string(dl2_stream8_stream_security_r(val));
                case DL2_STREAM8_NSAID:
                    return "DL2.STREAM8_NSAID: " + ::to_string(dl2_stream8_nsaid_r(val));
                case DL2_STREAM8_MMUSID:
                    return "DL2.STREAM8_MMUSID: " + ::to_string(dl2_stream8_mmusid_r(val));
                case DL2_STREAM8_MMUSSID:
                    return "DL2.STREAM8_MMUSSID: " + ::to_string(dl2_stream8_mmussid_r(val));
                case DL2_STREAM8_ATTR_CONTROL:
                    return "DL2.STREAM8_ATTR_CONTROL: " + ::to_string(dl2_stream8_attr_control_r(val));
                case DL2_STREAM8_MEMATTR:
                    return "DL2.STREAM8_MEMATTR: " + ::to_string(dl2_stream8_memattr_r(val));
                case DL2_NPU_ID:
                    return "DL2.NPU_ID: " + ::to_string(dl2_npu_id_r(val));
                case DL2_UNIT_COUNT:
                    return "DL2.UNIT_COUNT: " + ::to_string(dl2_unit_count_r(val));
                case DL2_MCE_FEATURES:
                    return "DL2.MCE_FEATURES: " + ::to_string(dl2_mce_features_r(val));
                case DL2_DFC_FEATURES:
                    return "DL2.DFC_FEATURES: " + ::to_string(dl2_dfc_features_r(val));
                case DL2_PLE_FEATURES:
                    return "DL2.PLE_FEATURES: " + ::to_string(dl2_ple_features_r(val));
                case DL2_WD_FEATURES:
                    return "DL2.WD_FEATURES: " + ::to_string(dl2_wd_features_r(val));
                case DL2_VECTOR_ENGINE_FEATURES:
                    return "DL2.VECTOR_ENGINE_FEATURES: " + ::to_string(dl2_vector_engine_features_r(val));
                case DL2_ECOID:
                    return "DL2.ECOID: " + ::to_string(dl2_ecoid_r(val));
                case DL2_STREAMID_WIDTH:
                    return "DL2.STREAMID_WIDTH: " + ::to_string(dl2_streamid_width_r(val));
            }
        }
        case DL3_RP:
        {
            switch (offset)
            {
                case DL3_EXT_ACCESS_CONTROL:
                    return "DL3.EXT_ACCESS_CONTROL: " + ::to_string(dl3_ext_access_control_r(val));
                case DL3_DELEGATION:
                    return "DL3.DELEGATION: " + ::to_string(dl3_delegation_r(val));
                case DL3_SECCTLR:
                    return "DL3.SECCTLR: " + ::to_string(dl3_secctlr_r(val));
                case DL3_SECMCUCTLR:
                    return "DL3.SECMCUCTLR: " + ::to_string(dl3_secmcuctlr_r(val));
                case DL3_SYSCTLR0:
                    return "DL3.SYSCTLR0: " + ::to_string(dl3_sysctlr0_r(val));
                case DL3_SYSCTLR1:
                    return "DL3.SYSCTLR1: " + ::to_string(dl3_sysctlr1_r(val));
                case DL3_PWRCTLR:
                    return "DL3.PWRCTLR: " + ::to_string(dl3_pwrctlr_r(val));
                case DL3_AUXCTLR:
                    return "DL3.AUXCTLR: " + ::to_string(dl3_auxctlr_r(val));
                case DL3_SETIRQ_EXT:
                    return "DL3.SETIRQ_EXT: " + ::to_string(dl3_setirq_ext_r(val));
                case DL3_CLRIRQ_EXT:
                    return "DL3.CLRIRQ_EXT: " + ::to_string(dl3_clrirq_ext_r(val));
                case DL3_SETIRQ_INT:
                    return "DL3.SETIRQ_INT: " + ::to_string(dl3_setirq_int_r(val));
                case DL3_DFC_SLV_ORD:
                    return "DL3.DFC_SLV_ORD: " + ::to_string(dl3_dfc_slv_ord_r(val));
                case DL3_DFC_SLV_OWR:
                    return "DL3.DFC_SLV_OWR: " + ::to_string(dl3_dfc_slv_owr_r(val));
                case DL3_DFC_MST_ORD:
                    return "DL3.DFC_MST_ORD: " + ::to_string(dl3_dfc_mst_ord_r(val));
                case DL3_DFC_MST_OWR:
                    return "DL3.DFC_MST_OWR: " + ::to_string(dl3_dfc_mst_owr_r(val));
                case DL3_IRQ_STATUS:
                    return "DL3.IRQ_STATUS: " + ::to_string(dl3_irq_status_r(val));
                case DL3_INT_STATUS:
                    return "DL3.INT_STATUS: " + ::to_string(dl3_int_status_r(val));
                case DL3_EXT_STATUS:
                    return "DL3.EXT_STATUS: " + ::to_string(dl3_ext_status_r(val));
                case DL3_GP0:
                    return "DL3.GP0: " + ::to_string(dl3_gp0_r(val));
                case DL3_GP1:
                    return "DL3.GP1: " + ::to_string(dl3_gp1_r(val));
                case DL3_GP2:
                    return "DL3.GP2: " + ::to_string(dl3_gp2_r(val));
                case DL3_GP3:
                    return "DL3.GP3: " + ::to_string(dl3_gp3_r(val));
                case DL3_GP4:
                    return "DL3.GP4: " + ::to_string(dl3_gp4_r(val));
                case DL3_GP5:
                    return "DL3.GP5: " + ::to_string(dl3_gp5_r(val));
                case DL3_GP6:
                    return "DL3.GP6: " + ::to_string(dl3_gp6_r(val));
                case DL3_GP7:
                    return "DL3.GP7: " + ::to_string(dl3_gp7_r(val));
                case DL3_DELEGATION_STREAM_SECURITY:
                    return "DL3.DELEGATION_STREAM_SECURITY: " + ::to_string(dl3_delegation_stream_security_r(val));
                case DL3_DELEGATION_NSAID:
                    return "DL3.DELEGATION_NSAID: " + ::to_string(dl3_delegation_nsaid_r(val));
                case DL3_DELEGATION_MMUSID:
                    return "DL3.DELEGATION_MMUSID: " + ::to_string(dl3_delegation_mmusid_r(val));
                case DL3_DELEGATION_MMUSSID:
                    return "DL3.DELEGATION_MMUSSID: " + ::to_string(dl3_delegation_mmussid_r(val));
                case DL3_DELEGATION_MMUSSIDV:
                    return "DL3.DELEGATION_MMUSSIDV: " + ::to_string(dl3_delegation_mmussidv_r(val));
                case DL3_DELEGATION_ATTR_CONTROL:
                    return "DL3.DELEGATION_ATTR_CONTROL: " + ::to_string(dl3_delegation_attr_control_r(val));
                case DL3_DELEGATION_MEMATTR:
                    return "DL3.DELEGATION_MEMATTR: " + ::to_string(dl3_delegation_memattr_r(val));
                case DL3_DELEGATION_ADDRESS_EXTEND:
                    return "DL3.DELEGATION_ADDRESS_EXTEND: " + ::to_string(dl3_delegation_address_extend_r(val));
                case DL3_STREAM0_STREAM_SECURITY:
                    return "DL3.STREAM0_STREAM_SECURITY: " + ::to_string(dl3_stream0_stream_security_r(val));
                case DL3_STREAM0_NSAID:
                    return "DL3.STREAM0_NSAID: " + ::to_string(dl3_stream0_nsaid_r(val));
                case DL3_STREAM0_MMUSID:
                    return "DL3.STREAM0_MMUSID: " + ::to_string(dl3_stream0_mmusid_r(val));
                case DL3_STREAM0_MMUSSID:
                    return "DL3.STREAM0_MMUSSID: " + ::to_string(dl3_stream0_mmussid_r(val));
                case DL3_STREAM0_ATTR_CONTROL:
                    return "DL3.STREAM0_ATTR_CONTROL: " + ::to_string(dl3_stream0_attr_control_r(val));
                case DL3_STREAM0_MEMATTR:
                    return "DL3.STREAM0_MEMATTR: " + ::to_string(dl3_stream0_memattr_r(val));
                case DL3_STREAM0_ADDRESS_EXTEND:
                    return "DL3.STREAM0_ADDRESS_EXTEND: " + ::to_string(dl3_stream0_address_extend_r(val));
                case DL3_STREAM1_STREAM_SECURITY:
                    return "DL3.STREAM1_STREAM_SECURITY: " + ::to_string(dl3_stream1_stream_security_r(val));
                case DL3_STREAM1_NSAID:
                    return "DL3.STREAM1_NSAID: " + ::to_string(dl3_stream1_nsaid_r(val));
                case DL3_STREAM1_MMUSID:
                    return "DL3.STREAM1_MMUSID: " + ::to_string(dl3_stream1_mmusid_r(val));
                case DL3_STREAM1_MMUSSID:
                    return "DL3.STREAM1_MMUSSID: " + ::to_string(dl3_stream1_mmussid_r(val));
                case DL3_STREAM1_ATTR_CONTROL:
                    return "DL3.STREAM1_ATTR_CONTROL: " + ::to_string(dl3_stream1_attr_control_r(val));
                case DL3_STREAM1_MEMATTR:
                    return "DL3.STREAM1_MEMATTR: " + ::to_string(dl3_stream1_memattr_r(val));
                case DL3_STREAM1_ADDRESS_EXTEND:
                    return "DL3.STREAM1_ADDRESS_EXTEND: " + ::to_string(dl3_stream1_address_extend_r(val));
                case DL3_STREAM2_STREAM_SECURITY:
                    return "DL3.STREAM2_STREAM_SECURITY: " + ::to_string(dl3_stream2_stream_security_r(val));
                case DL3_STREAM2_NSAID:
                    return "DL3.STREAM2_NSAID: " + ::to_string(dl3_stream2_nsaid_r(val));
                case DL3_STREAM2_MMUSID:
                    return "DL3.STREAM2_MMUSID: " + ::to_string(dl3_stream2_mmusid_r(val));
                case DL3_STREAM2_MMUSSID:
                    return "DL3.STREAM2_MMUSSID: " + ::to_string(dl3_stream2_mmussid_r(val));
                case DL3_STREAM2_ATTR_CONTROL:
                    return "DL3.STREAM2_ATTR_CONTROL: " + ::to_string(dl3_stream2_attr_control_r(val));
                case DL3_STREAM2_MEMATTR:
                    return "DL3.STREAM2_MEMATTR: " + ::to_string(dl3_stream2_memattr_r(val));
                case DL3_STREAM2_ADDRESS_EXTEND:
                    return "DL3.STREAM2_ADDRESS_EXTEND: " + ::to_string(dl3_stream2_address_extend_r(val));
                case DL3_STREAM3_STREAM_SECURITY:
                    return "DL3.STREAM3_STREAM_SECURITY: " + ::to_string(dl3_stream3_stream_security_r(val));
                case DL3_STREAM3_NSAID:
                    return "DL3.STREAM3_NSAID: " + ::to_string(dl3_stream3_nsaid_r(val));
                case DL3_STREAM3_MMUSID:
                    return "DL3.STREAM3_MMUSID: " + ::to_string(dl3_stream3_mmusid_r(val));
                case DL3_STREAM3_MMUSSID:
                    return "DL3.STREAM3_MMUSSID: " + ::to_string(dl3_stream3_mmussid_r(val));
                case DL3_STREAM3_ATTR_CONTROL:
                    return "DL3.STREAM3_ATTR_CONTROL: " + ::to_string(dl3_stream3_attr_control_r(val));
                case DL3_STREAM3_MEMATTR:
                    return "DL3.STREAM3_MEMATTR: " + ::to_string(dl3_stream3_memattr_r(val));
                case DL3_STREAM4_STREAM_SECURITY:
                    return "DL3.STREAM4_STREAM_SECURITY: " + ::to_string(dl3_stream4_stream_security_r(val));
                case DL3_STREAM4_NSAID:
                    return "DL3.STREAM4_NSAID: " + ::to_string(dl3_stream4_nsaid_r(val));
                case DL3_STREAM4_MMUSID:
                    return "DL3.STREAM4_MMUSID: " + ::to_string(dl3_stream4_mmusid_r(val));
                case DL3_STREAM4_MMUSSID:
                    return "DL3.STREAM4_MMUSSID: " + ::to_string(dl3_stream4_mmussid_r(val));
                case DL3_STREAM4_ATTR_CONTROL:
                    return "DL3.STREAM4_ATTR_CONTROL: " + ::to_string(dl3_stream4_attr_control_r(val));
                case DL3_STREAM4_MEMATTR:
                    return "DL3.STREAM4_MEMATTR: " + ::to_string(dl3_stream4_memattr_r(val));
                case DL3_STREAM5_STREAM_SECURITY:
                    return "DL3.STREAM5_STREAM_SECURITY: " + ::to_string(dl3_stream5_stream_security_r(val));
                case DL3_STREAM5_NSAID:
                    return "DL3.STREAM5_NSAID: " + ::to_string(dl3_stream5_nsaid_r(val));
                case DL3_STREAM5_MMUSID:
                    return "DL3.STREAM5_MMUSID: " + ::to_string(dl3_stream5_mmusid_r(val));
                case DL3_STREAM5_MMUSSID:
                    return "DL3.STREAM5_MMUSSID: " + ::to_string(dl3_stream5_mmussid_r(val));
                case DL3_STREAM5_ATTR_CONTROL:
                    return "DL3.STREAM5_ATTR_CONTROL: " + ::to_string(dl3_stream5_attr_control_r(val));
                case DL3_STREAM5_MEMATTR:
                    return "DL3.STREAM5_MEMATTR: " + ::to_string(dl3_stream5_memattr_r(val));
                case DL3_STREAM6_STREAM_SECURITY:
                    return "DL3.STREAM6_STREAM_SECURITY: " + ::to_string(dl3_stream6_stream_security_r(val));
                case DL3_STREAM6_NSAID:
                    return "DL3.STREAM6_NSAID: " + ::to_string(dl3_stream6_nsaid_r(val));
                case DL3_STREAM6_MMUSID:
                    return "DL3.STREAM6_MMUSID: " + ::to_string(dl3_stream6_mmusid_r(val));
                case DL3_STREAM6_MMUSSID:
                    return "DL3.STREAM6_MMUSSID: " + ::to_string(dl3_stream6_mmussid_r(val));
                case DL3_STREAM6_ATTR_CONTROL:
                    return "DL3.STREAM6_ATTR_CONTROL: " + ::to_string(dl3_stream6_attr_control_r(val));
                case DL3_STREAM6_MEMATTR:
                    return "DL3.STREAM6_MEMATTR: " + ::to_string(dl3_stream6_memattr_r(val));
                case DL3_STREAM7_STREAM_SECURITY:
                    return "DL3.STREAM7_STREAM_SECURITY: " + ::to_string(dl3_stream7_stream_security_r(val));
                case DL3_STREAM7_NSAID:
                    return "DL3.STREAM7_NSAID: " + ::to_string(dl3_stream7_nsaid_r(val));
                case DL3_STREAM7_MMUSID:
                    return "DL3.STREAM7_MMUSID: " + ::to_string(dl3_stream7_mmusid_r(val));
                case DL3_STREAM7_MMUSSID:
                    return "DL3.STREAM7_MMUSSID: " + ::to_string(dl3_stream7_mmussid_r(val));
                case DL3_STREAM7_ATTR_CONTROL:
                    return "DL3.STREAM7_ATTR_CONTROL: " + ::to_string(dl3_stream7_attr_control_r(val));
                case DL3_STREAM7_MEMATTR:
                    return "DL3.STREAM7_MEMATTR: " + ::to_string(dl3_stream7_memattr_r(val));
                case DL3_STREAM8_STREAM_SECURITY:
                    return "DL3.STREAM8_STREAM_SECURITY: " + ::to_string(dl3_stream8_stream_security_r(val));
                case DL3_STREAM8_NSAID:
                    return "DL3.STREAM8_NSAID: " + ::to_string(dl3_stream8_nsaid_r(val));
                case DL3_STREAM8_MMUSID:
                    return "DL3.STREAM8_MMUSID: " + ::to_string(dl3_stream8_mmusid_r(val));
                case DL3_STREAM8_MMUSSID:
                    return "DL3.STREAM8_MMUSSID: " + ::to_string(dl3_stream8_mmussid_r(val));
                case DL3_STREAM8_ATTR_CONTROL:
                    return "DL3.STREAM8_ATTR_CONTROL: " + ::to_string(dl3_stream8_attr_control_r(val));
                case DL3_STREAM8_MEMATTR:
                    return "DL3.STREAM8_MEMATTR: " + ::to_string(dl3_stream8_memattr_r(val));
                case DL3_NPU_ID:
                    return "DL3.NPU_ID: " + ::to_string(dl3_npu_id_r(val));
                case DL3_UNIT_COUNT:
                    return "DL3.UNIT_COUNT: " + ::to_string(dl3_unit_count_r(val));
                case DL3_MCE_FEATURES:
                    return "DL3.MCE_FEATURES: " + ::to_string(dl3_mce_features_r(val));
                case DL3_DFC_FEATURES:
                    return "DL3.DFC_FEATURES: " + ::to_string(dl3_dfc_features_r(val));
                case DL3_PLE_FEATURES:
                    return "DL3.PLE_FEATURES: " + ::to_string(dl3_ple_features_r(val));
                case DL3_WD_FEATURES:
                    return "DL3.WD_FEATURES: " + ::to_string(dl3_wd_features_r(val));
                case DL3_VECTOR_ENGINE_FEATURES:
                    return "DL3.VECTOR_ENGINE_FEATURES: " + ::to_string(dl3_vector_engine_features_r(val));
                case DL3_ECOID:
                    return "DL3.ECOID: " + ::to_string(dl3_ecoid_r(val));
                case DL3_STREAMID_WIDTH:
                    return "DL3.STREAMID_WIDTH: " + ::to_string(dl3_streamid_width_r(val));
            }
        }
        case DMA_RP:
        {
            switch (offset)
            {
                case DMA_DRAM_ADDR_L:
                    return "DMA.DRAM_ADDR_L: " + ::to_string(dram_addr_l_r(val));
                case DMA_DRAM_ADDR_H:
                    return "DMA.DRAM_ADDR_H: " + ::to_string(dram_addr_h_r(val));
                case DMA_DMA_STATUS:
                    return "DMA.DMA_STATUS: " + ::to_string(dma_status_r(val));
                case DMA_SRAM_ADDR:
                    return "DMA.SRAM_ADDR: " + ::to_string(sram_addr_r(val));
                case DMA_DMA_EMCS:
                    return "DMA.DMA_EMCS: " + ::to_string(dma_emcs_r(val));
                case DMA_DMA_CHANNELS:
                    return "DMA.DMA_CHANNELS: " + ::to_string(dma_channels_r(val));
                case DMA_DMA_RD_CMD:
                    return "DMA.DMA_RD_CMD: " + ::to_string(dma_rd_cmd_r(val));
                case DMA_DMA_WR_CMD:
                    return "DMA.DMA_WR_CMD: " + ::to_string(dma_wr_cmd_r(val));
                case DMA_DMA_STRIDE0:
                    return "DMA.DMA_STRIDE0: " + ::to_string(dma_stride0_r(val));
                case DMA_DMA_STRIDE1:
                    return "DMA.DMA_STRIDE1: " + ::to_string(dma_stride1_r(val));
                case DMA_DMA_STRIDE2:
                    return "DMA.DMA_STRIDE2: " + ::to_string(dma_stride2_r(val));
                case DMA_DMA_STRIDE3:
                    return "DMA.DMA_STRIDE3: " + ::to_string(dma_stride3_r(val));
                case DMA_DMA_SRAM_STRIDE:
                    return "DMA.DMA_SRAM_STRIDE: " + ::to_string(dma_sram_stride_r(val));
                case DMA_DMA_TOTAL_BYTES:
                    return "DMA.DMA_TOTAL_BYTES: " + ::to_string(dma_total_bytes_r(val));
                case DMA_DMA_COMP_CONFIG0:
                    return "DMA.DMA_COMP_CONFIG0: " + ::to_string(dma_comp_config0_r(val));
                case DMA_STASH_ADDRESS_L:
                    return "DMA.STASH_ADDRESS_L: " + ::to_string(stash_address_l_r(val));
                case DMA_STASH_ADDRESS_H:
                    return "DMA.STASH_ADDRESS_H: " + ::to_string(stash_address_h_r(val));
            }
        }
        case GLOBAL_RP:
        {
            switch (offset)
            {
                case GLOBAL_STRIPE_BANK_CONFIG:
                    return "GLOBAL.STRIPE_BANK_CONFIG: " + ::to_string(stripe_bank_config_r(val));
                case GLOBAL_STRIPE_BANK_CONTROL:
                    return "GLOBAL.STRIPE_BANK_CONTROL: " + ::to_string(stripe_bank_control_r(val));
                case GLOBAL_BLOCK_BANK_CONFIG:
                    return "GLOBAL.BLOCK_BANK_CONFIG: " + ::to_string(block_bank_config_r(val));
                case GLOBAL_BLOCK_BANK_CONTROL:
                    return "GLOBAL.BLOCK_BANK_CONTROL: " + ::to_string(block_bank_control_r(val));
                case GLOBAL_PLE_MCEIF_CONFIG:
                    return "GLOBAL.PLE_MCEIF_CONFIG: " + ::to_string(ple_mceif_config_r(val));
                case GLOBAL_TOP_ERR_CAUSE:
                    return "GLOBAL.TOP_ERR_CAUSE: " + ::to_string(top_err_cause_r(val));
                case GLOBAL_TOP_ERR_ADDRESS:
                    return "GLOBAL.TOP_ERR_ADDRESS: " + ::to_string(top_err_address_r(val));
            }
        }
        case PMU_RP:
        {
            switch (offset)
            {
                case PMU_PMCR:
                    return "PMU.PMCR: " + ::to_string(pmcr_r(val));
                case PMU_PMCNTENSET:
                    return "PMU.PMCNTENSET: " + ::to_string(pmcntenset_r(val));
                case PMU_PMCNTENCLR:
                    return "PMU.PMCNTENCLR: " + ::to_string(pmcntenclr_r(val));
                case PMU_PMOVSSET:
                    return "PMU.PMOVSSET: " + ::to_string(pmovsset_r(val));
                case PMU_PMOVSCLR:
                    return "PMU.PMOVSCLR: " + ::to_string(pmovsclr_r(val));
                case PMU_PMINTENSET:
                    return "PMU.PMINTENSET: " + ::to_string(pmintenset_r(val));
                case PMU_PMINTENCLR:
                    return "PMU.PMINTENCLR: " + ::to_string(pmintenclr_r(val));
                case PMU_PMCCNTR_LO:
                    return "PMU.PMCCNTR_LO: " + ::to_string(pmccntr_lo_r(val));
                case PMU_PMCCNTR_HI:
                    return "PMU.PMCCNTR_HI: " + ::to_string(pmccntr_hi_r(val));
                case PMU_PMEVCNTR0:
                    return "PMU.PMEVCNTR0: " + ::to_string(pmevcntr0_r(val));
                case PMU_PMEVCNTR1:
                    return "PMU.PMEVCNTR1: " + ::to_string(pmevcntr1_r(val));
                case PMU_PMEVCNTR2:
                    return "PMU.PMEVCNTR2: " + ::to_string(pmevcntr2_r(val));
                case PMU_PMEVCNTR3:
                    return "PMU.PMEVCNTR3: " + ::to_string(pmevcntr3_r(val));
                case PMU_PMEVCNTR4:
                    return "PMU.PMEVCNTR4: " + ::to_string(pmevcntr4_r(val));
                case PMU_PMEVCNTR5:
                    return "PMU.PMEVCNTR5: " + ::to_string(pmevcntr5_r(val));
                case PMU_PMEVTYPER0:
                    return "PMU.PMEVTYPER0: " + ::to_string(pmevtyper0_r(val));
                case PMU_PMEVTYPER1:
                    return "PMU.PMEVTYPER1: " + ::to_string(pmevtyper1_r(val));
                case PMU_PMEVTYPER2:
                    return "PMU.PMEVTYPER2: " + ::to_string(pmevtyper2_r(val));
                case PMU_PMEVTYPER3:
                    return "PMU.PMEVTYPER3: " + ::to_string(pmevtyper3_r(val));
                case PMU_PMEVTYPER4:
                    return "PMU.PMEVTYPER4: " + ::to_string(pmevtyper4_r(val));
                case PMU_PMEVTYPER5:
                    return "PMU.PMEVTYPER5: " + ::to_string(pmevtyper5_r(val));
            }
        }
        case SEC_RP:
        {
            switch (offset)
            {
                case SEC_EXT_ACCESS_CONTROL:
                    return "SEC.EXT_ACCESS_CONTROL: " + ::to_string(sec_ext_access_control_r(val));
                case SEC_DELEGATION:
                    return "SEC.DELEGATION: " + ::to_string(sec_delegation_r(val));
                case SEC_SECCTLR:
                    return "SEC.SECCTLR: " + ::to_string(sec_secctlr_r(val));
                case SEC_SECMCUCTLR:
                    return "SEC.SECMCUCTLR: " + ::to_string(sec_secmcuctlr_r(val));
                case SEC_SYSCTLR0:
                    return "SEC.SYSCTLR0: " + ::to_string(sec_sysctlr0_r(val));
                case SEC_SYSCTLR1:
                    return "SEC.SYSCTLR1: " + ::to_string(sec_sysctlr1_r(val));
                case SEC_PWRCTLR:
                    return "SEC.PWRCTLR: " + ::to_string(sec_pwrctlr_r(val));
                case SEC_AUXCTLR:
                    return "SEC.AUXCTLR: " + ::to_string(sec_auxctlr_r(val));
                case SEC_SETIRQ_EXT:
                    return "SEC.SETIRQ_EXT: " + ::to_string(sec_setirq_ext_r(val));
                case SEC_CLRIRQ_EXT:
                    return "SEC.CLRIRQ_EXT: " + ::to_string(sec_clrirq_ext_r(val));
                case SEC_SETIRQ_INT:
                    return "SEC.SETIRQ_INT: " + ::to_string(sec_setirq_int_r(val));
                case SEC_DFC_SLV_ORD:
                    return "SEC.DFC_SLV_ORD: " + ::to_string(sec_dfc_slv_ord_r(val));
                case SEC_DFC_SLV_OWR:
                    return "SEC.DFC_SLV_OWR: " + ::to_string(sec_dfc_slv_owr_r(val));
                case SEC_DFC_MST_ORD:
                    return "SEC.DFC_MST_ORD: " + ::to_string(sec_dfc_mst_ord_r(val));
                case SEC_DFC_MST_OWR:
                    return "SEC.DFC_MST_OWR: " + ::to_string(sec_dfc_mst_owr_r(val));
                case SEC_IRQ_STATUS:
                    return "SEC.IRQ_STATUS: " + ::to_string(sec_irq_status_r(val));
                case SEC_INT_STATUS:
                    return "SEC.INT_STATUS: " + ::to_string(sec_int_status_r(val));
                case SEC_EXT_STATUS:
                    return "SEC.EXT_STATUS: " + ::to_string(sec_ext_status_r(val));
                case SEC_GP0:
                    return "SEC.GP0: " + ::to_string(sec_gp0_r(val));
                case SEC_GP1:
                    return "SEC.GP1: " + ::to_string(sec_gp1_r(val));
                case SEC_GP2:
                    return "SEC.GP2: " + ::to_string(sec_gp2_r(val));
                case SEC_GP3:
                    return "SEC.GP3: " + ::to_string(sec_gp3_r(val));
                case SEC_GP4:
                    return "SEC.GP4: " + ::to_string(sec_gp4_r(val));
                case SEC_GP5:
                    return "SEC.GP5: " + ::to_string(sec_gp5_r(val));
                case SEC_GP6:
                    return "SEC.GP6: " + ::to_string(sec_gp6_r(val));
                case SEC_GP7:
                    return "SEC.GP7: " + ::to_string(sec_gp7_r(val));
                case SEC_DELEGATION_STREAM_SECURITY:
                    return "SEC.DELEGATION_STREAM_SECURITY: " + ::to_string(sec_delegation_stream_security_r(val));
                case SEC_DELEGATION_NSAID:
                    return "SEC.DELEGATION_NSAID: " + ::to_string(sec_delegation_nsaid_r(val));
                case SEC_DELEGATION_MMUSID:
                    return "SEC.DELEGATION_MMUSID: " + ::to_string(sec_delegation_mmusid_r(val));
                case SEC_DELEGATION_MMUSSID:
                    return "SEC.DELEGATION_MMUSSID: " + ::to_string(sec_delegation_mmussid_r(val));
                case SEC_DELEGATION_MMUSSIDV:
                    return "SEC.DELEGATION_MMUSSIDV: " + ::to_string(sec_delegation_mmussidv_r(val));
                case SEC_DELEGATION_ATTR_CONTROL:
                    return "SEC.DELEGATION_ATTR_CONTROL: " + ::to_string(sec_delegation_attr_control_r(val));
                case SEC_DELEGATION_MEMATTR:
                    return "SEC.DELEGATION_MEMATTR: " + ::to_string(sec_delegation_memattr_r(val));
                case SEC_DELEGATION_ADDRESS_EXTEND:
                    return "SEC.DELEGATION_ADDRESS_EXTEND: " + ::to_string(sec_delegation_address_extend_r(val));
                case SEC_STREAM0_STREAM_SECURITY:
                    return "SEC.STREAM0_STREAM_SECURITY: " + ::to_string(sec_stream0_stream_security_r(val));
                case SEC_STREAM0_NSAID:
                    return "SEC.STREAM0_NSAID: " + ::to_string(sec_stream0_nsaid_r(val));
                case SEC_STREAM0_MMUSID:
                    return "SEC.STREAM0_MMUSID: " + ::to_string(sec_stream0_mmusid_r(val));
                case SEC_STREAM0_MMUSSID:
                    return "SEC.STREAM0_MMUSSID: " + ::to_string(sec_stream0_mmussid_r(val));
                case SEC_STREAM0_ATTR_CONTROL:
                    return "SEC.STREAM0_ATTR_CONTROL: " + ::to_string(sec_stream0_attr_control_r(val));
                case SEC_STREAM0_MEMATTR:
                    return "SEC.STREAM0_MEMATTR: " + ::to_string(sec_stream0_memattr_r(val));
                case SEC_STREAM0_ADDRESS_EXTEND:
                    return "SEC.STREAM0_ADDRESS_EXTEND: " + ::to_string(sec_stream0_address_extend_r(val));
                case SEC_STREAM1_STREAM_SECURITY:
                    return "SEC.STREAM1_STREAM_SECURITY: " + ::to_string(sec_stream1_stream_security_r(val));
                case SEC_STREAM1_NSAID:
                    return "SEC.STREAM1_NSAID: " + ::to_string(sec_stream1_nsaid_r(val));
                case SEC_STREAM1_MMUSID:
                    return "SEC.STREAM1_MMUSID: " + ::to_string(sec_stream1_mmusid_r(val));
                case SEC_STREAM1_MMUSSID:
                    return "SEC.STREAM1_MMUSSID: " + ::to_string(sec_stream1_mmussid_r(val));
                case SEC_STREAM1_ATTR_CONTROL:
                    return "SEC.STREAM1_ATTR_CONTROL: " + ::to_string(sec_stream1_attr_control_r(val));
                case SEC_STREAM1_MEMATTR:
                    return "SEC.STREAM1_MEMATTR: " + ::to_string(sec_stream1_memattr_r(val));
                case SEC_STREAM1_ADDRESS_EXTEND:
                    return "SEC.STREAM1_ADDRESS_EXTEND: " + ::to_string(sec_stream1_address_extend_r(val));
                case SEC_STREAM2_STREAM_SECURITY:
                    return "SEC.STREAM2_STREAM_SECURITY: " + ::to_string(sec_stream2_stream_security_r(val));
                case SEC_STREAM2_NSAID:
                    return "SEC.STREAM2_NSAID: " + ::to_string(sec_stream2_nsaid_r(val));
                case SEC_STREAM2_MMUSID:
                    return "SEC.STREAM2_MMUSID: " + ::to_string(sec_stream2_mmusid_r(val));
                case SEC_STREAM2_MMUSSID:
                    return "SEC.STREAM2_MMUSSID: " + ::to_string(sec_stream2_mmussid_r(val));
                case SEC_STREAM2_ATTR_CONTROL:
                    return "SEC.STREAM2_ATTR_CONTROL: " + ::to_string(sec_stream2_attr_control_r(val));
                case SEC_STREAM2_MEMATTR:
                    return "SEC.STREAM2_MEMATTR: " + ::to_string(sec_stream2_memattr_r(val));
                case SEC_STREAM2_ADDRESS_EXTEND:
                    return "SEC.STREAM2_ADDRESS_EXTEND: " + ::to_string(sec_stream2_address_extend_r(val));
                case SEC_STREAM3_STREAM_SECURITY:
                    return "SEC.STREAM3_STREAM_SECURITY: " + ::to_string(sec_stream3_stream_security_r(val));
                case SEC_STREAM3_NSAID:
                    return "SEC.STREAM3_NSAID: " + ::to_string(sec_stream3_nsaid_r(val));
                case SEC_STREAM3_MMUSID:
                    return "SEC.STREAM3_MMUSID: " + ::to_string(sec_stream3_mmusid_r(val));
                case SEC_STREAM3_MMUSSID:
                    return "SEC.STREAM3_MMUSSID: " + ::to_string(sec_stream3_mmussid_r(val));
                case SEC_STREAM3_ATTR_CONTROL:
                    return "SEC.STREAM3_ATTR_CONTROL: " + ::to_string(sec_stream3_attr_control_r(val));
                case SEC_STREAM3_MEMATTR:
                    return "SEC.STREAM3_MEMATTR: " + ::to_string(sec_stream3_memattr_r(val));
                case SEC_STREAM4_STREAM_SECURITY:
                    return "SEC.STREAM4_STREAM_SECURITY: " + ::to_string(sec_stream4_stream_security_r(val));
                case SEC_STREAM4_NSAID:
                    return "SEC.STREAM4_NSAID: " + ::to_string(sec_stream4_nsaid_r(val));
                case SEC_STREAM4_MMUSID:
                    return "SEC.STREAM4_MMUSID: " + ::to_string(sec_stream4_mmusid_r(val));
                case SEC_STREAM4_MMUSSID:
                    return "SEC.STREAM4_MMUSSID: " + ::to_string(sec_stream4_mmussid_r(val));
                case SEC_STREAM4_ATTR_CONTROL:
                    return "SEC.STREAM4_ATTR_CONTROL: " + ::to_string(sec_stream4_attr_control_r(val));
                case SEC_STREAM4_MEMATTR:
                    return "SEC.STREAM4_MEMATTR: " + ::to_string(sec_stream4_memattr_r(val));
                case SEC_STREAM5_STREAM_SECURITY:
                    return "SEC.STREAM5_STREAM_SECURITY: " + ::to_string(sec_stream5_stream_security_r(val));
                case SEC_STREAM5_NSAID:
                    return "SEC.STREAM5_NSAID: " + ::to_string(sec_stream5_nsaid_r(val));
                case SEC_STREAM5_MMUSID:
                    return "SEC.STREAM5_MMUSID: " + ::to_string(sec_stream5_mmusid_r(val));
                case SEC_STREAM5_MMUSSID:
                    return "SEC.STREAM5_MMUSSID: " + ::to_string(sec_stream5_mmussid_r(val));
                case SEC_STREAM5_ATTR_CONTROL:
                    return "SEC.STREAM5_ATTR_CONTROL: " + ::to_string(sec_stream5_attr_control_r(val));
                case SEC_STREAM5_MEMATTR:
                    return "SEC.STREAM5_MEMATTR: " + ::to_string(sec_stream5_memattr_r(val));
                case SEC_STREAM6_STREAM_SECURITY:
                    return "SEC.STREAM6_STREAM_SECURITY: " + ::to_string(sec_stream6_stream_security_r(val));
                case SEC_STREAM6_NSAID:
                    return "SEC.STREAM6_NSAID: " + ::to_string(sec_stream6_nsaid_r(val));
                case SEC_STREAM6_MMUSID:
                    return "SEC.STREAM6_MMUSID: " + ::to_string(sec_stream6_mmusid_r(val));
                case SEC_STREAM6_MMUSSID:
                    return "SEC.STREAM6_MMUSSID: " + ::to_string(sec_stream6_mmussid_r(val));
                case SEC_STREAM6_ATTR_CONTROL:
                    return "SEC.STREAM6_ATTR_CONTROL: " + ::to_string(sec_stream6_attr_control_r(val));
                case SEC_STREAM6_MEMATTR:
                    return "SEC.STREAM6_MEMATTR: " + ::to_string(sec_stream6_memattr_r(val));
                case SEC_STREAM7_STREAM_SECURITY:
                    return "SEC.STREAM7_STREAM_SECURITY: " + ::to_string(sec_stream7_stream_security_r(val));
                case SEC_STREAM7_NSAID:
                    return "SEC.STREAM7_NSAID: " + ::to_string(sec_stream7_nsaid_r(val));
                case SEC_STREAM7_MMUSID:
                    return "SEC.STREAM7_MMUSID: " + ::to_string(sec_stream7_mmusid_r(val));
                case SEC_STREAM7_MMUSSID:
                    return "SEC.STREAM7_MMUSSID: " + ::to_string(sec_stream7_mmussid_r(val));
                case SEC_STREAM7_ATTR_CONTROL:
                    return "SEC.STREAM7_ATTR_CONTROL: " + ::to_string(sec_stream7_attr_control_r(val));
                case SEC_STREAM7_MEMATTR:
                    return "SEC.STREAM7_MEMATTR: " + ::to_string(sec_stream7_memattr_r(val));
                case SEC_STREAM8_STREAM_SECURITY:
                    return "SEC.STREAM8_STREAM_SECURITY: " + ::to_string(sec_stream8_stream_security_r(val));
                case SEC_STREAM8_NSAID:
                    return "SEC.STREAM8_NSAID: " + ::to_string(sec_stream8_nsaid_r(val));
                case SEC_STREAM8_MMUSID:
                    return "SEC.STREAM8_MMUSID: " + ::to_string(sec_stream8_mmusid_r(val));
                case SEC_STREAM8_MMUSSID:
                    return "SEC.STREAM8_MMUSSID: " + ::to_string(sec_stream8_mmussid_r(val));
                case SEC_STREAM8_ATTR_CONTROL:
                    return "SEC.STREAM8_ATTR_CONTROL: " + ::to_string(sec_stream8_attr_control_r(val));
                case SEC_STREAM8_MEMATTR:
                    return "SEC.STREAM8_MEMATTR: " + ::to_string(sec_stream8_memattr_r(val));
                case SEC_NPU_ID:
                    return "SEC.NPU_ID: " + ::to_string(sec_npu_id_r(val));
                case SEC_UNIT_COUNT:
                    return "SEC.UNIT_COUNT: " + ::to_string(sec_unit_count_r(val));
                case SEC_MCE_FEATURES:
                    return "SEC.MCE_FEATURES: " + ::to_string(sec_mce_features_r(val));
                case SEC_DFC_FEATURES:
                    return "SEC.DFC_FEATURES: " + ::to_string(sec_dfc_features_r(val));
                case SEC_PLE_FEATURES:
                    return "SEC.PLE_FEATURES: " + ::to_string(sec_ple_features_r(val));
                case SEC_WD_FEATURES:
                    return "SEC.WD_FEATURES: " + ::to_string(sec_wd_features_r(val));
                case SEC_VECTOR_ENGINE_FEATURES:
                    return "SEC.VECTOR_ENGINE_FEATURES: " + ::to_string(sec_vector_engine_features_r(val));
                case SEC_ECOID:
                    return "SEC.ECOID: " + ::to_string(sec_ecoid_r(val));
                case SEC_STREAMID_WIDTH:
                    return "SEC.STREAMID_WIDTH: " + ::to_string(sec_streamid_width_r(val));
            }
        }
        case TSU_RP:
        {
            switch (offset)
            {
                case TSU_STRIPE_BANK_STATUS:
                    return "TSU.STRIPE_BANK_STATUS: " + ::to_string(stripe_bank_status_r(val));
                case TSU_BLOCK_BANK_STATUS:
                    return "TSU.BLOCK_BANK_STATUS: " + ::to_string(block_bank_status_r(val));
                case TSU_TSU_CONTROL:
                    return "TSU.TSU_CONTROL: " + ::to_string(tsu_control_r(val));
                case TSU_TSU_EVENT:
                    return "TSU.TSU_EVENT: " + ::to_string(tsu_event_r(val));
                case TSU_TSU_EVENT_MSK:
                    return "TSU.TSU_EVENT_MSK: " + ::to_string(tsu_event_msk_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE0:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE0: " + ::to_string(tsu_debug_counters_engine0_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE1:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE1: " + ::to_string(tsu_debug_counters_engine1_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE2:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE2: " + ::to_string(tsu_debug_counters_engine2_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE3:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE3: " + ::to_string(tsu_debug_counters_engine3_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE4:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE4: " + ::to_string(tsu_debug_counters_engine4_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE5:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE5: " + ::to_string(tsu_debug_counters_engine5_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE6:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE6: " + ::to_string(tsu_debug_counters_engine6_r(val));
                case TSU_TSU_DEBUG_COUNTERS_ENGINE7:
                    return "TSU.TSU_DEBUG_COUNTERS_ENGINE7: " + ::to_string(tsu_debug_counters_engine7_r(val));
            }
        }
   }
   return std::string("unknown");

}

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright Â© 2018-2023 Arm Limited.
# SPDX-License-Identifier: Apache-2.0
#

import os
import common

Import("env")

common.setup_common_env(env)
common.setup_toolchain(env, env["platform"])
common.setup_sanitize(env)
# Note we *prepend* so these take priority over CPATH command-line-arguments to avoid depending on the install target
# where the install target is also provided via CPATH.
env.PrependUnique(
    CPPPATH=[
        os.path.join(env["command_stream_dir"], "include"),
        os.path.join(env["utils_dir"], "include"),
        "src",
    ]
)

if env["disable_large_winograd"]:
    env.AppendUnique(CPPDEFINES=["ETHOSN_SUPPORT_LIBRARY_DISABLE_LARGE_WINOGRAD"])

# Build support_library shared and static libs
srcs = [
    os.path.join("src", "Support.cpp"),
    os.path.join("src", "CapabilitiesInternal.cpp"),
    os.path.join("src", "SupportQueries.cpp"),
    os.path.join("src", "Network.cpp"),
    os.path.join("src", "Operation.cpp"),
    os.path.join("src", "ConcreteOperations.cpp"),
    os.path.join("src", "Compiler.cpp"),
    os.path.join("src", "BufferManager.cpp"),
    os.path.join("src", "WeightEncoder.cpp"),
    os.path.join("src", "NetworkToGraphOfPartsConverter.cpp"),
    os.path.join("src", "SubmapFilter.cpp"),
    os.path.join("src", "SramAllocator.cpp"),
    os.path.join("src", "Utils.cpp"),
    os.path.join("src", "ThreadPool.cpp"),
    os.path.join("src", "DebuggingContext.cpp"),
    os.path.join("src", "PerformanceData.cpp"),
    os.path.join("src", "PleKernelDatabase.cpp"),
    os.path.join("src", "DebuggableObject.cpp"),
    os.path.join("src", "Part.cpp"),
    os.path.join("src", "GraphOfParts.cpp"),
    os.path.join("src", "Plan.cpp"),
    os.path.join("src", "OpGraph.cpp"),
    os.path.join("src", "CombinerDFS.cpp"),
    os.path.join("src", "Visualisation.cpp"),
    os.path.join("src", "Estimation.cpp"),
    os.path.join("src", "EstimationUtils.cpp"),
    os.path.join("src", "FullyConnectedPart.cpp"),
    os.path.join("src", "McePart.cpp"),
    os.path.join("src", "FusedPlePart.cpp"),
    os.path.join("src", "StripeHelper.cpp"),
    os.path.join("src", "MceEstimationUtils.cpp"),
    os.path.join("src", "PartUtils.cpp"),
    os.path.join("src", "InputPart.cpp"),
    os.path.join("src", "OutputPart.cpp"),
    os.path.join("src", "ReshapePart.cpp"),
    os.path.join("src", "ConcatPart.cpp"),
    os.path.join("src", "ConstantPart.cpp"),
    os.path.join("src", "SplitPart.cpp"),
    os.path.join("src", "EstimateOnlyPart.cpp"),
    os.path.join("src", "StandalonePlePart.cpp"),
    os.path.join("src", "CommandStreamGenerator.cpp"),
    os.path.join("src", "Scheduler.cpp"),
    os.path.join("src", "WeightEncoderCache.cpp"),
    os.path.join("src", "DmaRegisters.cpp"),
    os.path.join("src", "MceRegisters.cpp"),
    os.path.join("src", "PleRegisters.cpp"),
]

ethosn_support_lib = env.StaticLibrary("libEthosNSupport", srcs)
env.Alias("install", env.Install(env["install_lib_dir"], ethosn_support_lib))

# Note we must explicitly set the SONAME to override the default which uses a path relative to the current directory.
# This means that when the runtime linker looks for the .so, it uses the filename only and not the relative path.
# We need to clone the env to make sure we don't pollute these LINKFLAGS into subsequent builders.
# Note: can't just pass this special LINKFLAGS to SharedLibrary as that would override the existing one we have,
#       which may have --coverage and other flags.
soEnv = env.Clone()
soEnv.AppendUnique(LINKFLAGS="-Wl,-soname=libEthosNSupport.so")
# On non-Unix platforms, the static and shared lib filenames may collide, so use a different name
shared_lib_name = "libEthosNSupport" if env["PLATFORM"] == "posix" else "libEthosNSupportShared"
# On non-Unix platforms, the static and shared libs may need to have different compile options, so the obj names
# need to be unique
obj_prefix = None if env["PLATFORM"] == "posix" else "Shared_"
libs = ["pthread"]
ethosn_support_shared = soEnv.SharedLibrary(
    shared_lib_name, srcs, SHOBJPREFIX=obj_prefix, LIBS=libs
)

env.Alias("install", env.Install(env["install_lib_dir"], ethosn_support_shared))
env.Alias(
    "install",
    env.Install(
        os.path.join(env["install_include_dir"], "ethosn_support_library"),
        Glob(os.path.join("include", "ethosn_support_library", "*")),
    ),
)

# Build unit tests, if requested.
if env["tests"]:
    SConscript(dirs="tests", duplicate=False, exports=["env", "ethosn_support_shared"])

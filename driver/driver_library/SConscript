#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright Â© 2018-2020 Arm Limited. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

import os
import common

Import('env')

common.setup_common_env(env)
common.setup_toolchain(env, env['platform'])

# Note we *prepend* so these take priority over CPATH command-line-arguments to avoid depending on the install target
# where the install target is also provided via CPATH.
env.PrependUnique(CPPPATH=[os.path.join(env['command_stream_dir'], 'include'),
                           os.path.join(env['support_library_dir'], 'include'),
                           env['kernel_driver_dir']])
# Set the appropriate CPP define for the target.
env.Append(CPPDEFINES=['TARGET_' + env['target'].upper()])

if env['profiling']:
    env.AppendUnique(CPPDEFINES=['CONTROL_UNIT_PROFILING'])

srcs = [os.path.join('src', 'Inference.cpp'),
        os.path.join('src', 'Buffer.cpp'),
        os.path.join('src', 'Network.cpp'),
        os.path.join('src', 'ProfilingInternal.cpp'),
        os.path.join('src', 'DumpProfiling.cpp'),
        os.path.join('src', 'NetworkImpl.cpp')]

if env['target'] == 'kmod':
    srcs += [os.path.join('src', 'KmodNetwork.cpp'),
             os.path.join('src', 'KmodProfiling.cpp')]
    env.AppendUnique(CPPDEFINES=['DEVICE_NODE={}'.format(env['device_node'])])
    env.AppendUnique(CPPDEFINES=['FIRMWARE_PROFILING_NODE={}'.format(env['firmware_profiling_node'])])
else:
    srcs += [os.path.join('src', 'NullKmodProfiling.cpp')]

# Build driver_library static and shared lib
ethosn_driver_lib = env.StaticLibrary('libEthosNDriver', srcs)
env.Alias('install', env.Install(env['install_lib_dir'], ethosn_driver_lib))

libs = []

# Note we must explicitly set the SONAME to override the default which uses a path relative to the current directory.
# This means that when the runtime linker looks for the .so, it uses the filename only and not the relative path.
# We need to clone the env to make sure we don't pollute these LINKFLAGS into subsequent builders.
# Note: can't just pass this special LINKFLAGS to SharedLibrary as that would override the existing one we have,
#       which may have --coverage and other flags.
soEnv = env.Clone()
soEnv.Append(LINKFLAGS='-Wl,-soname=libEthosNDriver.so')
ethosn_driver_shared = soEnv.SharedLibrary('libEthosNDriver', srcs, LIBS=libs)

env.Alias('install', env.Install(env['install_lib_dir'], ethosn_driver_shared))
env.Alias('install', env.Install(os.path.join(env['install_include_dir'], 'ethosn_driver_library'),
                                 Glob(os.path.join('include', 'ethosn_driver_library', '*'))))

# Build unit tests if requested.
if env['tests']:
    SConscript(dirs='tests', duplicate=False, exports=['env', 'ethosn_driver_shared'])
